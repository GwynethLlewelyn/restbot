<?xml version="1.0"?>
<doc>
    <assembly>
        <name>/Users/lms/Developer/restbot-0.5/libsl/bin/libsecondlife</name>
    </assembly>
    <members>
        <member name="T:libsecondlife.AgentThrottle">
            <summary>
            Throttles the network traffic for various different traffic types.
            Access this class through SecondLife.Throttle
            </summary>
        </member>
        <member name="M:libsecondlife.AgentThrottle.#ctor(libsecondlife.SecondLife)">
            <summary>
            Default constructor, uses a default high total of 1500 KBps (1536000)
            </summary>
        </member>
        <member name="M:libsecondlife.AgentThrottle.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor that decodes an existing AgentThrottle packet in to
            individual values
            </summary>
            <param name="data">Reference to the throttle data in an AgentThrottle
            packet</param>
            <param name="pos">Offset position to start reading at in the
            throttle data</param>
            <remarks>This is generally not needed in libsecondlife clients as
            the server will never send a throttle packet to the client</remarks>
        </member>
        <member name="P:libsecondlife.AgentThrottle.Resend">
            <summary>Maximum bytes per second for resending unacknowledged packets</summary>
        </member>
        <member name="P:libsecondlife.AgentThrottle.Land">
            <summary>Maximum bytes per second for LayerData terrain</summary>
        </member>
        <member name="P:libsecondlife.AgentThrottle.Wind">
            <summary>Maximum bytes per second for LayerData wind data</summary>
        </member>
        <member name="P:libsecondlife.AgentThrottle.Cloud">
            <summary>Maximum bytes per second for LayerData clouds</summary>
        </member>
        <member name="P:libsecondlife.AgentThrottle.Task">
            <summary>Unknown, includes object data</summary>
        </member>
        <member name="P:libsecondlife.AgentThrottle.Texture">
            <summary>Maximum bytes per second for textures</summary>
        </member>
        <member name="P:libsecondlife.AgentThrottle.Asset">
            <summary>Maximum bytes per second for downloaded assets</summary>
        </member>
        <member name="P:libsecondlife.AgentThrottle.Total">
            <summary>Maximum bytes per second the entire connection, divided up
            between invidiual streams using default multipliers</summary>
        </member>
        <member name="M:libsecondlife.AgentThrottle.Set">
            <summary>
            Send an AgentThrottle packet to the current server using the
            current values
            </summary>
        </member>
        <member name="M:libsecondlife.AgentThrottle.Set(libsecondlife.Simulator)">
            <summary>
            Send an AgentThrottle packet to the specified server using the
            current values
            </summary>
        </member>
        <member name="M:libsecondlife.AgentThrottle.ToBytes">
            <summary>
            Convert the current throttle values to a byte array that can be put
            in an AgentThrottle packet
            </summary>
            <returns>Byte array containing all the throttle values</returns>
        </member>
        <member name="T:libsecondlife.Wearable">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.Wearable.#ctor(libsecondlife.SecondLife)">
            <summary>
            Default constructor
            </summary>
            <param name="client">Reference to the SecondLife client</param>
        </member>
        <member name="T:libsecondlife.Wearable.WearableType">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Wearable.WearableType.Shape">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Wearable.WearableType.Skin">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Wearable.WearableType.Hair">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Wearable.WearableType.Eyes">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Wearable.WearableType.Shirt">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Wearable.WearableType.Pants">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Wearable.WearableType.Shoes">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Wearable.WearableType.Socks">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Wearable.WearableType.Jacket">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Wearable.WearableType.Gloves">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Wearable.WearableType.Undershirt">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Wearable.WearableType.Underpants">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Wearable.WearableType.Skirt">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Wearable.WearableType.Invalid">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.Wearable.ForSale">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Wearable.ForSale.Not">
            <summary>Not for sale</summary>
        </member>
        <member name="F:libsecondlife.Wearable.ForSale.Original">
            <summary>The original is for sale</summary>
        </member>
        <member name="F:libsecondlife.Wearable.ForSale.Copy">
            <summary>Copies are for sale</summary>
        </member>
        <member name="F:libsecondlife.Wearable.ForSale.Contents">
            <summary>The contents of the object are for sale</summary>
        </member>
        <member name="T:libsecondlife.WearableData">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.AppearanceManager">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.AppearanceManager.#ctor(libsecondlife.SecondLife,libsecondlife.AssetManager)">
            <summary>
            Default constructor
            </summary>
            <param name="client">
            </param>
            <param name="assets">
            </param>
        </member>
        <member name="T:libsecondlife.AppearanceManager.TextureIndex">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.AppearanceManager.BakeType">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.AppearanceManager.AgentWearablesCallback">
            <summary>
            </summary>
            <param name="wearables">A mapping of WearableTypes to KeyValuePairs
            with Asset ID of the wearable as key and Item ID as value</param>
        </member>
        <member name="F:libsecondlife.AppearanceManager.WEARABLE_COUNT">
            <summary>Total number of wearables for each avatar</summary>
        </member>
        <member name="F:libsecondlife.AppearanceManager.BAKED_TEXTURE_COUNT">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.AppearanceManager.WEARABLES_PER_LAYER">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.AppearanceManager.AVATAR_TEXTURE_COUNT">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.AppearanceManager.WEARABLE_BAKE_MAP">
            <summary>Map of what wearables are included in each bake</summary>
        </member>
        <member name="F:libsecondlife.AppearanceManager.BAKED_TEXTURE_HASH">
            <summary>Secret values to finalize the cache check hashes for each
            bake</summary>
        </member>
        <member name="F:libsecondlife.AppearanceManager.DEFAULT_AVATAR_TEXTURE">
            <summary>Default avatar texture, used to detect when a custom
            texture is not set for a face</summary>
        </member>
        <member name="E:libsecondlife.AppearanceManager.OnAgentWearables">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.AppearanceManager.Finalize">
            <summary>
            If the appearance thread is running it is terminated here
            </summary>
        </member>
        <member name="M:libsecondlife.AppearanceManager.GetWearableAsset(libsecondlife.Wearable.WearableType)">
            <summary>
            Returns the assetID for a given WearableType
            </summary>
            <param name="type">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.AppearanceManager.SetPreviousAppearance">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.AppearanceManager.Attach(libsecondlife.InventoryItem,libsecondlife.ObjectManager.AttachmentPoint)">
            <summary>
            Add a single wearable to your outfit, replacing if nessesary.
            </summary>
            <param name="wearable">
            </param>
        </member>
        <member name="M:libsecondlife.AppearanceManager.RequestCachedBakes">
            <summary>
            Build hashes out of the texture assetIDs for each baking layer to
            ask the simulator whether it has cached copies of each baked texture
            </summary>
        </member>
        <member name="M:libsecondlife.AppearanceManager.RequestAgentWearables">
            <summary>
            Ask the server what textures our avatar is currently wearing
            </summary>
        </member>
        <member name="T:libsecondlife.AssetType">
            <summary>
            The different types of assets in Second Life
            </summary>
        </member>
        <member name="F:libsecondlife.AssetType.Unknown">
            <summary>Unknown asset type</summary>
        </member>
        <member name="F:libsecondlife.AssetType.Texture">
            <summary>Texture asset, stores in JPEG2000 J2C stream format</summary>
        </member>
        <member name="F:libsecondlife.AssetType.Sound">
            <summary>Sound asset</summary>
        </member>
        <member name="F:libsecondlife.AssetType.CallingCard">
            <summary>Calling card for another avatar</summary>
        </member>
        <member name="F:libsecondlife.AssetType.Landmark">
            <summary>Link to a location in world</summary>
        </member>
        <member name="F:libsecondlife.AssetType.Script">
            <summary>Legacy script asset, you should never see one of these</summary>
        </member>
        <member name="F:libsecondlife.AssetType.Clothing">
            <summary>Collection of textures and parameters that can be
            worn by an avatar</summary>
        </member>
        <member name="F:libsecondlife.AssetType.Object">
            <summary>Primitive that can contain textures, sounds,
            scripts and more</summary>
        </member>
        <member name="F:libsecondlife.AssetType.Notecard">
            <summary>Notecard asset</summary>
        </member>
        <member name="F:libsecondlife.AssetType.Folder">
            <summary>Holds a collection of inventory items</summary>
        </member>
        <member name="F:libsecondlife.AssetType.RootFolder">
            <summary>Root inventory folder</summary>
        </member>
        <member name="F:libsecondlife.AssetType.LSLText">
            <summary>Linden scripting language script</summary>
        </member>
        <member name="F:libsecondlife.AssetType.LSLBytecode">
            <summary>LSO bytecode for a script</summary>
        </member>
        <member name="F:libsecondlife.AssetType.TextureTGA">
            <summary>Uncompressed TGA texture</summary>
        </member>
        <member name="F:libsecondlife.AssetType.Bodypart">
            <summary>Collection of textures and shape parameters that can
            be worn</summary>
        </member>
        <member name="F:libsecondlife.AssetType.TrashFolder">
            <summary>Trash folder</summary>
        </member>
        <member name="F:libsecondlife.AssetType.SnapshotFolder">
            <summary>Snapshot folder</summary>
        </member>
        <member name="F:libsecondlife.AssetType.LostAndFoundFolder">
            <summary>Lost and found folder</summary>
        </member>
        <member name="F:libsecondlife.AssetType.SoundWAV">
            <summary>Uncompressed sound</summary>
        </member>
        <member name="F:libsecondlife.AssetType.ImageTGA">
            <summary>Uncompressed TGA non-square image, not to be used as a
            texture</summary>
        </member>
        <member name="F:libsecondlife.AssetType.ImageJPEG">
            <summary>Compressed JPEG non-square image, not to be used as a
            texture</summary>
        </member>
        <member name="F:libsecondlife.AssetType.Animation">
            <summary>Animation</summary>
        </member>
        <member name="F:libsecondlife.AssetType.Gesture">
            <summary>Sequence of animations, sounds, chat, and pauses</summary>
        </member>
        <member name="F:libsecondlife.AssetType.Simstate">
            <summary>Simstate file</summary>
        </member>
        <member name="T:libsecondlife.StatusCode">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.StatusCode.OK">
            <summary>OK</summary>
        </member>
        <member name="F:libsecondlife.StatusCode.Done">
            <summary>Transfer completed</summary>
        </member>
        <member name="F:libsecondlife.StatusCode.Skip">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.StatusCode.Abort">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.StatusCode.Error">
            <summary>Unknown error occurred</summary>
        </member>
        <member name="F:libsecondlife.StatusCode.UnknownSource">
            <summary>Equivalent to a 404 error</summary>
        </member>
        <member name="F:libsecondlife.StatusCode.InsufficientPermissiosn">
            <summary>Client does not have permission for that resource</summary>
        </member>
        <member name="F:libsecondlife.StatusCode.Unknown">
            <summary>Unknown status</summary>
        </member>
        <member name="T:libsecondlife.ChannelType">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ChannelType.Unknown">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ChannelType.Misc">
            <summary>Unknown</summary>
        </member>
        <member name="F:libsecondlife.ChannelType.Asset">
            <summary>Virtually all asset transfers use this channel</summary>
        </member>
        <member name="T:libsecondlife.SourceType">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.SourceType.Unknown">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.SourceType.File">
            <summary>Arbitrary system files off the server</summary>
        </member>
        <member name="F:libsecondlife.SourceType.Asset">
            <summary>Asset from the asset server</summary>
        </member>
        <member name="F:libsecondlife.SourceType.SimInventoryItem">
            <summary>Inventory item</summary>
        </member>
        <member name="F:libsecondlife.SourceType.SimEstate">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.TargetType">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.TargetType.Unknown">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.TargetType.File">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.TargetType.VFile">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.ImageType">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ImageType.Normal">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ImageType.Baked">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.Transfer">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.AssetDownload">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.ImageDownload">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.AssetUpload">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.AssetManager">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.AssetManager.#ctor(libsecondlife.SecondLife)">
            <summary>
            Default constructor
            </summary>
            <param name="client">A reference to the SecondLife client object</param>
        </member>
        <member name="T:libsecondlife.AssetManager.AssetReceivedCallback">
            <summary>
            </summary>
            <param name="asset">
            </param>
        </member>
        <member name="T:libsecondlife.AssetManager.ImageReceivedCallback">
            <summary>
            </summary>
            <param name="image">
            </param>
        </member>
        <member name="T:libsecondlife.AssetManager.AssetUploadedCallback">
            <summary>
            </summary>
            <param name="upload">
            </param>
        </member>
        <member name="T:libsecondlife.AssetManager.UploadProgressCallback">
            <summary>
            </summary>
            <param name="upload">
            </param>
        </member>
        <member name="E:libsecondlife.AssetManager.OnAssetReceived">
            <summary>
            </summary>
        </member>
        <member name="E:libsecondlife.AssetManager.OnImageReceived">
            <summary>
            </summary>
        </member>
        <member name="E:libsecondlife.AssetManager.OnAssetUploaded">
            <summary>
            </summary>
        </member>
        <member name="E:libsecondlife.AssetManager.OnUploadProgress">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.AssetManager.RequestAsset(libsecondlife.LLUUID,libsecondlife.AssetType,System.Boolean)">
            <summary>
            Request an asset download
            </summary>
            <param name="assetID">Asset UUID</param>
            <param name="type">Asset type, must be correct for the transfer to succeed</param>
            <param name="priority">Whether to give this transfer an elevated priority</param>
            <returns>The transaction ID generated for this transfer</returns>
        </member>
        <member name="M:libsecondlife.AssetManager.RequestInventoryAsset(libsecondlife.LLUUID,libsecondlife.LLUUID,libsecondlife.LLUUID,libsecondlife.LLUUID,libsecondlife.AssetType,System.Boolean)">
            <summary>
            </summary>
            <param name="assetID">Use LLUUID.Zero if you do not have the
            asset ID but have all the necessary permissions</param>
            <param name="itemID">The item ID of this asset in the inventory</param>
            <param name="taskID">Use LLUUID.Zero if you are not requesting an
            asset from an object inventory</param>
            <param name="ownerID">The owner of this asset</param>
            <param name="type">Asset type</param>
            <param name="priority">Whether to prioritize this asset download or not</param>
        </member>
        <member name="M:libsecondlife.AssetManager.RequestImage(libsecondlife.LLUUID,libsecondlife.ImageType,System.Single,System.Int32)">
            <summary>
            Initiate an image download. This is an asynchronous function
            </summary>
            <param name="imageID">The image to download</param>
            <param name="type">
            </param>
            <param name="priority">
            </param>
            <param name="discardLevel">
            </param>
        </member>
        <member name="M:libsecondlife.AssetManager.RequestUpload(libsecondlife.LLUUID@,libsecondlife.AssetType,System.Byte[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initiate an asset upload
            </summary>
            <param name="transactionID">The ID this asset will have if the
            upload succeeds</param>
            <param name="type">Asset type to upload this data as</param>
            <param name="data">Raw asset data to upload</param>
            <param name="tempFile">Whether this is a temporary file or not</param>
            <param name="storeLocal">Whether to store this asset on the local
            simulator or the grid-wide asset server</param>
            <param name="isPriority">Give this upload a higher priority</param>
            <returns>The transaction ID of this transfer</returns>
        </member>
        <member name="M:libsecondlife.AssetManager.ImageDataHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Handles the Image Data packet which includes the ID and Size of the image,
            along with the first block of data for the image. If the image is small enough
            there will be no additional packets
            </summary>
        </member>
        <member name="M:libsecondlife.AssetManager.ImagePacketHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Handles the remaining Image data that did not fit in the initial ImageData packet
            </summary>
        </member>
        <member name="M:libsecondlife.AssetManager.ImageNotInDatabaseHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            The requested image does not exist on the asset server
            </summary>
        </member>
        <member name="M:libsecondlife.Asset.Encode">
            <summary>
            Regenerates the <code>AssetData</code> byte array from the properties
            of the derived class.
            </summary>
        </member>
        <member name="M:libsecondlife.Asset.Decode">
            <summary>
            Decodes the AssetData, placing it in appropriate properties of the derived
            class.
            </summary>
        </member>
        <member name="T:libsecondlife.Avatar">
            <summary>
            Represents an avatar in Second Life (other than your own)
            </summary>
        </member>
        <member name="M:libsecondlife.Avatar.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:libsecondlife.Avatar.Statistics">
            <summary>
            Positive and negative ratings
            </summary>
        </member>
        <member name="F:libsecondlife.Avatar.Statistics.BehaviorPositive">
            <summary>Positive ratings for Behavior</summary>
        </member>
        <member name="F:libsecondlife.Avatar.Statistics.BehaviorNegative">
            <summary>Negative ratings for Behavior</summary>
        </member>
        <member name="F:libsecondlife.Avatar.Statistics.AppearancePositive">
            <summary>Positive ratings for Appearance</summary>
        </member>
        <member name="F:libsecondlife.Avatar.Statistics.AppearanceNegative">
            <summary>Negative ratings for Appearance</summary>
        </member>
        <member name="F:libsecondlife.Avatar.Statistics.BuildingPositive">
            <summary>Positive ratings for Building</summary>
        </member>
        <member name="F:libsecondlife.Avatar.Statistics.BuildingNegative">
            <summary>Negative ratings for Building</summary>
        </member>
        <member name="F:libsecondlife.Avatar.Statistics.GivenPositive">
            <summary>Positive ratings given by this avatar</summary>
        </member>
        <member name="F:libsecondlife.Avatar.Statistics.GivenNegative">
            <summary>Negative ratings given by this avatar</summary>
        </member>
        <member name="T:libsecondlife.Avatar.AvatarProperties">
            <summary>
            Avatar properties including about text, profile URL, image IDs and
            publishing settings
            </summary>
        </member>
        <member name="F:libsecondlife.Avatar.AvatarProperties.AllowPublish">
            <summary>Should this profile be published on the web</summary>
        </member>
        <member name="F:libsecondlife.Avatar.AvatarProperties.FirstLifeText">
            <summary>First Life about text</summary>
        </member>
        <member name="F:libsecondlife.Avatar.AvatarProperties.FirstLifeImage">
            <summary>First Life image ID</summary>
        </member>
        <member name="F:libsecondlife.Avatar.AvatarProperties.Partner">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Avatar.AvatarProperties.AboutText">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Avatar.AvatarProperties.BornOn">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Avatar.AvatarProperties.CharterMember">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Avatar.AvatarProperties.ProfileImage">
            <summary>Profile image ID</summary>
        </member>
        <member name="F:libsecondlife.Avatar.AvatarProperties.MaturePublish">
            <summary>Is this a mature profile</summary>
        </member>
        <member name="F:libsecondlife.Avatar.AvatarProperties.Identified">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Avatar.AvatarProperties.Transacted">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Avatar.AvatarProperties.ProfileURL">
            <summary>Web URL for this profile</summary>
        </member>
        <member name="T:libsecondlife.Avatar.Interests">
            <summary>
            Avatar interests including spoken languages, skills, and "want to"
            choices
            </summary>
        </member>
        <member name="F:libsecondlife.Avatar.Interests.LanguagesText">
            <summary>Languages profile field</summary>
        </member>
        <member name="F:libsecondlife.Avatar.Interests.SkillsMask">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Avatar.Interests.SkillsText">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Avatar.Interests.WantToMask">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Avatar.Interests.WantToText">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Avatar.Groups">
            <summary>Groups that this avatar is a member of</summary>
        </member>
        <member name="F:libsecondlife.Avatar.Online">
            <summary>Online status</summary>
        </member>
        <member name="F:libsecondlife.Avatar.ProfileStatistics">
            <summary>Positive and negative ratings</summary>
        </member>
        <member name="F:libsecondlife.Avatar.ProfileProperties">
            <summary>Avatar properties including about text, profile URL, image IDs and
            publishing settings</summary>
        </member>
        <member name="F:libsecondlife.Avatar.ProfileInterests">
            <summary>Avatar interests including spoken languages, skills, and "want to"
            choices</summary>
        </member>
        <member name="F:libsecondlife.Avatar.CurrentSim">
            <summary>Simulator the avatar is in</summary>
        </member>
        <member name="P:libsecondlife.Avatar.Name">
            <summary>Full name</summary>
        </member>
        <member name="P:libsecondlife.Avatar.GroupName">
            <summary>Active group</summary>
        </member>
        <member name="P:libsecondlife.Avatar.SittingOn">
            <summary>Gets the local ID of the prim the avatar is sitting on,
            zero if the avatar is not currently sitting</summary>
        </member>
        <member name="T:libsecondlife.AvatarManager">
            <summary>
            Retrieve friend status notifications, and retrieve avatar names and
            profiles
            </summary>
        </member>
        <member name="M:libsecondlife.AvatarManager.#ctor(libsecondlife.SecondLife)">
            <summary>
            Represents other avatars
            </summary>
            <param name="client">
            </param>
        </member>
        <member name="T:libsecondlife.AvatarManager.AvatarNamesCallback">
            <summary>
            Triggered when a UUIDNameReply is received
            </summary>
            <param name="names">
            </param>
        </member>
        <member name="T:libsecondlife.AvatarManager.AvatarInterestsCallback">
            <summary>
            Triggered when a response for avatar statistics (ratings) is returned
            </summary>
            <param name="avatarID">
            </param>
            <param name="statistics">
            </param>
            <summary>
            Triggered when a response for avatar interests is returned
            </summary>
            <param name="avatarID">
            </param>
            <param name="interests">
            </param>
        </member>
        <member name="T:libsecondlife.AvatarManager.AvatarPropertiesCallback">
            <summary>
            Triggered when avatar properties are received (AvatarPropertiesReply)
            </summary>
            <param name="avatarID">
            </param>
            <param name="properties">
            </param>
        </member>
        <member name="T:libsecondlife.AvatarManager.AvatarGroupsCallback">
            <summary>
            Triggered when an avatar group list is received (AvatarGroupsReply)
            </summary>
            <param name="avatarID">
            </param>
            <param name="groups">
            </param>
        </member>
        <member name="T:libsecondlife.AvatarManager.AvatarNameSearchCallback">
            <summary>
            Triggered when a name search reply is received (AvatarPickerReply)
            </summary>
            <param name="queryID">
            </param>
            <param name="avatars">
            </param>
        </member>
        <member name="T:libsecondlife.AvatarManager.PointAtCallback">
            <summary>
            </summary>
            <param name="sourceID">
            </param>
            <param name="targetID">
            </param>
            <param name="targetPos">
            </param>
            <param name="pointType">
            </param>
            <param name="duration">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="T:libsecondlife.AvatarManager.LookAtCallback">
            <summary>
            </summary>
            <param name="sourceID">
            </param>
            <param name="targetID">
            </param>
            <param name="targetPos">
            </param>
            <param name="lookType">
            </param>
            <param name="duration">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="T:libsecondlife.AvatarManager.EffectCallback">
            <summary>
            </summary>
            <param name="type">
            </param>
            <param name="sourceID">
            </param>
            <param name="targetID">
            </param>
            <param name="targetPos">
            </param>
            <param name="duration">
            </param>
            <param name="id">
            </param>
        </member>
        <member name="E:libsecondlife.AvatarManager.OnAvatarNames">
            <summary>
            </summary>
        </member>
        <member name="E:libsecondlife.AvatarManager.OnAvatarInterests">
            <summary>
            </summary>
            <summary>
            </summary>
        </member>
        <member name="E:libsecondlife.AvatarManager.OnAvatarProperties">
            <summary>
            </summary>
        </member>
        <member name="E:libsecondlife.AvatarManager.OnAvatarGroups">
            <summary>
            </summary>
        </member>
        <member name="E:libsecondlife.AvatarManager.OnAvatarNameSearch">
            <summary>
            </summary>
        </member>
        <member name="E:libsecondlife.AvatarManager.OnPointAt">
            <summary>
            </summary>
        </member>
        <member name="E:libsecondlife.AvatarManager.OnLookAt">
            <summary>
            </summary>
        </member>
        <member name="E:libsecondlife.AvatarManager.OnEffect">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.AvatarManager.RequestAvatarName(libsecondlife.LLUUID)">
            <summary>
            Request a single avatar name
            </summary>
            <param name="id">The avatar key to retrieve a name for</param>
        </member>
        <member name="M:libsecondlife.AvatarManager.RequestAvatarNames(System.Collections.Generic.List{libsecondlife.LLUUID})">
            <summary>
            Request a list of avatar names
            </summary>
            <param name="ids">The avatar keys to retrieve names for</param>
        </member>
        <member name="M:libsecondlife.AvatarManager.RequestAvatarProperties(libsecondlife.LLUUID)">
            <summary>
            Start a request for Avatar Properties
            </summary>
            <param name="avatarid">
            </param>
        </member>
        <member name="M:libsecondlife.AvatarManager.RequestAvatarNameSearch(System.String,libsecondlife.LLUUID)">
            <summary>
            Search for an avatar (first name, last name, and uuid)
            </summary>
            <param name="name">The name to search for</param>
            <param name="queryID">An ID to associate with this query</param>
        </member>
        <member name="M:libsecondlife.AvatarManager.AvatarNameHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Process an incoming UUIDNameReply Packet and insert Full Names into the Avatars Dictionary
            </summary>
            <param name="packet">Incoming Packet to process</param>
            <param name="simulator">Unused</param>
        </member>
        <member name="M:libsecondlife.AvatarManager.AvatarPropertiesHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Process incoming avatar properties (profile data)
            </summary>
            <param name="packet">
            </param>
            <param name="sim">
            </param>
        </member>
        <member name="M:libsecondlife.AvatarManager.AvatarInterestsHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Process incoming Avatar Interests information
            </summary>
        </member>
        <member name="M:libsecondlife.AvatarManager.ViewerEffectHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Process an incoming effect
            </summary>
        </member>
        <member name="T:libsecondlife.Baking.Baker">
            <summary>
            A set of textures that are layered on texture of each other and "baked"
            in to a single texture, for avatar appearances
            </summary>
        </member>
        <member name="M:libsecondlife.Baking.Baker.#ctor(libsecondlife.SecondLife,libsecondlife.AppearanceManager.BakeType,System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Single})">
            <summary>
            Default constructor
            </summary>
            <param name="client">Reference to the SecondLife client</param>
            <param name="totalLayers">Total number of layers this layer set is
            composed of</param>
            <param name="paramValues">Appearance parameters the drive the
            baking process</param>
            <param name="width">Width of the final baked image</param>
            <param name="height">Height of the final baked image</param>
        </member>
        <member name="F:libsecondlife.Baking.Baker.Client">
            <summary>Reference to the SecondLife client</summary>
        </member>
        <member name="F:libsecondlife.Baking.Baker.ParamValues">
            <summary>Appearance parameters the drive the baking process</summary>
        </member>
        <member name="F:libsecondlife.Baking.Baker.EncodedTextures">
            <summary>Wearable textures</summary>
        </member>
        <member name="F:libsecondlife.Baking.Baker.BakeWidth">
            <summary>Width of the final baked image and scratchpad</summary>
        </member>
        <member name="F:libsecondlife.Baking.Baker.BakeHeight">
            <summary>Height of the final baked image and scratchpad</summary>
        </member>
        <member name="F:libsecondlife.Baking.Baker.BakeType">
            <summary>Bake type</summary>
        </member>
        <member name="M:libsecondlife.Baking.Baker.AddTexture(libsecondlife.AppearanceManager.TextureIndex,System.Byte[])">
            <summary>
            Adds an image to this baking texture and potentially processes it, or
            stores it for processing later
            </summary>
            <param name="index">The baking texture index of the image to be added</param>
            <param name="jp2data">JPEG2000 compressed image to be added to the
            baking texture</param>
            <returns>True if this texture is completely baked and JPEG2000 data
            is available, otherwise false</returns>
        </member>
        <member name="T:libsecondlife.BitPack">
            <summary>
            Wrapper around a byte array that allows bit to be packed and unpacked
            one at a time or by a variable amount. Useful for very tightly packed
            data like LayerData packets
            </summary>
        </member>
        <member name="M:libsecondlife.BitPack.#ctor(System.Byte[],System.Int32)">
            <summary>
            Default constructor, initialize the bit packer / bit unpacker
            with a byte array and starting position
            </summary>
            <param name="data">Byte array to pack bits in to or unpack from</param>
            <param name="pos">Starting position in the byte array</param>
        </member>
        <member name="F:libsecondlife.BitPack.Data">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.BitPack.BytePos">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.BitPack.BitPos">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.BitPack.PackFloat(System.Single)">
            <summary>
            Pack a floating point value in to the data
            </summary>
            <param name="data">Floating point value to pack</param>
        </member>
        <member name="M:libsecondlife.BitPack.PackBits(System.Int32,System.Int32)">
            <summary>
            Pack part or all of an integer in to the data
            </summary>
            <param name="data">Integer containing the data to pack</param>
            <param name="totalCount">Number of bits of the integer to pack</param>
        </member>
        <member name="M:libsecondlife.BitPack.PackBits(System.UInt32,System.Int32)">
            <summary>
            Pack part or all of an unsigned integer in to the data
            </summary>
            <param name="data">Unsigned integer containing the data to pack</param>
            <param name="totalCount">Number of bits of the integer to pack</param>
        </member>
        <member name="M:libsecondlife.BitPack.PackFixed(System.Single,System.Boolean,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="data">
            </param>
            <param name="isSigned">
            </param>
            <param name="intBits">
            </param>
            <param name="fracBits">
            </param>
        </member>
        <member name="M:libsecondlife.BitPack.PackUUID(libsecondlife.LLUUID)">
            <summary>
            </summary>
            <param name="data">
            </param>
        </member>
        <member name="M:libsecondlife.BitPack.PackColor(libsecondlife.LLColor)">
            <summary>
            </summary>
            <param name="data">
            </param>
        </member>
        <member name="M:libsecondlife.BitPack.UnpackFloat">
            <summary>
            Unpacking a floating point value from the data
            </summary>
            <returns>Unpacked floating point value</returns>
        </member>
        <member name="M:libsecondlife.BitPack.UnpackBits(System.Int32)">
            <summary>
            Unpack a variable number of bits from the data in to integer format
            </summary>
            <param name="totalCount">Number of bits to unpack</param>
            <returns>An integer containing the unpacked bits</returns>
            <remarks>This function is only useful up to 32 bits</remarks>
        </member>
        <member name="M:libsecondlife.BitPack.UnpackUBits(System.Int32)">
            <summary>
            Unpack a variable number of bits from the data in to unsigned
            integer format
            </summary>
            <param name="totalCount">Number of bits to unpack</param>
            <returns>An unsigned integer containing the unpacked bits</returns>
            <remarks>This function is only useful up to 32 bits</remarks>
        </member>
        <member name="T:System.Collections.BlockingQueue">
            <summary>
            Same as Queue except Dequeue function blocks until there is an object to return.
            Note: This class does not need to be synchronized
            </summary>
        </member>
        <member name="M:System.Collections.BlockingQueue.#ctor(System.Collections.ICollection)">
            <summary>
            Create new BlockingQueue.
            </summary>
            <param name="col">The System.Collections.ICollection to copy elements from</param>
        </member>
        <member name="M:System.Collections.BlockingQueue.#ctor(System.Int32,System.Single)">
            <summary>
            Create new BlockingQueue.
            </summary>
            <param name="capacity">The initial number of elements that the queue can contain</param>
            <param name="growFactor">The factor by which the capacity of the queue is expanded</param>
        </member>
        <member name="M:System.Collections.BlockingQueue.#ctor(System.Int32)">
            <summary>
            Create new BlockingQueue.
            </summary>
            <param name="capacity">The initial number of elements that the queue can contain</param>
        </member>
        <member name="M:System.Collections.BlockingQueue.#ctor">
            <summary>
            Create new BlockingQueue.
            </summary>
        </member>
        <member name="P:System.Collections.BlockingQueue.Closed">
            <summary>
            Gets flag indicating if queue has been closed.
            </summary>
        </member>
        <member name="M:System.Collections.BlockingQueue.Finalize">
            <summary>
            BlockingQueue Destructor (Close queue, resume any waiting thread).
            </summary>
        </member>
        <member name="M:System.Collections.BlockingQueue.Clear">
            <summary>
            Remove all objects from the Queue.
            </summary>
        </member>
        <member name="M:System.Collections.BlockingQueue.Close">
            <summary>
            Remove all objects from the Queue, resume all dequeue threads.
            </summary>
        </member>
        <member name="M:System.Collections.BlockingQueue.Dequeue">
            <summary>
            Removes and returns the object at the beginning of the Queue.
            </summary>
            <returns>Object in queue.</returns>
        </member>
        <member name="M:System.Collections.BlockingQueue.Dequeue(System.TimeSpan)">
            <summary>
            Removes and returns the object at the beginning of the Queue.
            </summary>
            <param name="timeout">time to wait before returning</param>
            <returns>Object in queue.</returns>
        </member>
        <member name="M:System.Collections.BlockingQueue.Dequeue(System.Int32)">
            <summary>
            Removes and returns the object at the beginning of the Queue.
            </summary>
            <param name="timeout">time to wait before returning (in milliseconds)</param>
            <returns>Object in queue.</returns>
        </member>
        <member name="M:System.Collections.BlockingQueue.Enqueue(System.Object)">
            <summary>
            Adds an object to the end of the Queue.
            </summary>
            <param name="obj">Object to put in queue</param>
        </member>
        <member name="M:System.Collections.BlockingQueue.Open">
            <summary>
            Open Queue.
            </summary>
        </member>
        <member name="T:libsecondlife.Capabilities">
            <summary>
            Capabilities is the name of the bi-directional HTTP REST protocol that
            Second Life uses to communicate transactions such as teleporting or
            group messaging
            </summary>
        </member>
        <member name="M:libsecondlife.Capabilities.#ctor(libsecondlife.Simulator,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="client">
            </param>
            <param name="simulator">
            </param>
            <param name="seedcaps">
            </param>
        </member>
        <member name="T:libsecondlife.Capabilities.EventQueueCallback">
            <summary>
            Triggered when an event is received via the EventQueueGet
            capability
            </summary>
            <param name="message">Event name</param>
            <param name="body">Decoded event data</param>
            <param name="caps">The CAPS system that made the call</param>
        </member>
        <member name="T:libsecondlife.Capabilities.CapsResponseCallback">
            <summary>
            Triggered when an HTTP call in the queue is executed and a response
            is received
            </summary>
            <param name="body">Decoded response</param>
            <param name="request">Original capability request</param>
        </member>
        <member name="F:libsecondlife.Capabilities.Simulator">
            <summary>Reference to the simulator this system is connected to</summary>
        </member>
        <member name="P:libsecondlife.Capabilities.SeedCapsURI">
            <summary>Capabilities URI this system was initialized with</summary>
        </member>
        <member name="P:libsecondlife.Capabilities.IsEventQueueRunning">
            <summary>Whether the capabilities event queue is connected and
            listening for incoming events</summary>
        </member>
        <member name="T:libsecondlife.DirectoryManager">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.DirectoryManager.ClassifiedCategories">
            <summary>
            The different categories a classified ad can be placed in
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.ClassifiedCategories.Any">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.ClassifiedCategories.Shopping">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.ClassifiedCategories.LandRental">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.ClassifiedCategories.PropertyRental">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.ClassifiedCategories.SpecialAttraction">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.ClassifiedCategories.NewProducts">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.ClassifiedCategories.Employment">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.ClassifiedCategories.Wanted">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.ClassifiedCategories.Service">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.ClassifiedCategories.Personal">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.DirectoryManager.DirFindFlags">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirFindFlags.People">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirFindFlags.Online">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirFindFlags.Places">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirFindFlags.Events">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirFindFlags.Groups">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirFindFlags.DateEvents">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirFindFlags.AgentOwned">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirFindFlags.ForSale">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirFindFlags.GroupOwned">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirFindFlags.Auction">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirFindFlags.DwellSort">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirFindFlags.PgSimsOnly">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirFindFlags.PicturesOnly">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirFindFlags.PgEventsOnly">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirFindFlags.MatureSimsOnly">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirFindFlags.SortAsc">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirFindFlags.PricesSort">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirFindFlags.PerMeterSort">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirFindFlags.AreaSort">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirFindFlags.NameSort">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirFindFlags.LimitByPrice">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirFindFlags.LimitByArea">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.DirectoryManager.SearchTypeFlags">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.SearchTypeFlags.None">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.SearchTypeFlags.Auction">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.SearchTypeFlags.Newbie">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.SearchTypeFlags.Mainland">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.SearchTypeFlags.Estate">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.DirectoryManager.Classified">
            <summary>
            A classified ad in Second Life
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.Classified.ID">
            <summary>UUID for this ad, useful for looking up detailed
            information about it</summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.Classified.Name">
            <summary>The title of this classified ad</summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.Classified.Flags">
            <summary>Unknown</summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.Classified.CreationDate">
            <summary>Creation date of the ad</summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.Classified.ExpirationDate">
            <summary>Expiration date of the ad</summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.Classified.Price">
            <summary>Price that was paid for this ad</summary>
        </member>
        <member name="T:libsecondlife.DirectoryManager.DirectoryParcel">
            <summary>
            A parcel retrieved from the dataserver such as results from the
            "For-Sale" listings
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirectoryParcel.ID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirectoryParcel.Name">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirectoryParcel.ActualArea">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirectoryParcel.SalePrice">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirectoryParcel.Auction">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.DirectoryManager.DirectoryParcel.ForSale">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.DirectoryManager.ClassifiedReplyCallback">
            <summary>
            </summary>
            <param name="classifieds">
            </param>
        </member>
        <member name="T:libsecondlife.DirectoryManager.DirLandReplyCallback">
            <summary>
            </summary>
            <param name="dirParcels">
            </param>
        </member>
        <member name="T:libsecondlife.DirectoryManager.DirPeopleReplyCallback">
            <summary>
            </summary>
            <param name="matchedPeople">
            </param>
        </member>
        <member name="E:libsecondlife.DirectoryManager.OnClassifiedReply">
            <summary>
            </summary>
        </member>
        <member name="E:libsecondlife.DirectoryManager.OnDirLandReply">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.DirectoryManager.StartLandSearch(libsecondlife.DirectoryManager.SearchTypeFlags)">
            <summary>
            Starts a search for land sales using the directory
            </summary>
            <param name="typeFlags">What type of land to search for. Auction,
            estate, mainland, "first land", etc</param>
            <returns>A unique identifier that can identify packets associated
            with this query from other queries</returns>
            <remarks>The OnDirLandReply event handler must be registered before
            calling this function. There is no way to determine how many
            results will be returned, or how many times the callback will be
            fired other than you won't get more than 100 total parcels from
            each query.</remarks>
        </member>
        <member name="M:libsecondlife.DirectoryManager.StartLandSearch(libsecondlife.DirectoryManager.SearchTypeFlags,System.Int32,System.Int32,System.Int32)">
            <summary>
            Starts a search for land sales using the directory
            </summary>
            <param name="typeFlags">What type of land to search for. Auction,
            estate, mainland, "first land", etc</param>
            <param name="priceLimit">Maximum price to search for</param>
            <param name="areaLimit">Maximum area to search for</param>
            <param name="queryStart">Each request is limited to 100 parcels
            being returned. To get the first 100 parcels of a request use 0,
            from 100-199 use 1, 200-299 use 2, etc.</param>
            <returns>A unique identifier that can identify packets associated
            with this query from other queries</returns>
            <remarks>The OnDirLandReply event handler must be registered before
            calling this function. There is no way to determine how many
            results will be returned, or how many times the callback will be
            fired other than you won't get more than 100 total parcels from
            each query.</remarks>
        </member>
        <member name="M:libsecondlife.DirectoryManager.StartLandSearch(libsecondlife.DirectoryManager.DirFindFlags,libsecondlife.DirectoryManager.SearchTypeFlags,System.Int32,System.Int32,System.Int32)">
            <summary>
            Starts a search for land sales using the directory
            </summary>
            <param name="findFlags">A flags parameter that can modify the way
            search results are returned, for example changing the ordering of
            results or limiting based on price or area</param>
            <param name="typeFlags">What type of land to search for. Auction,
            estate, mainland, "first land", etc</param>
            <param name="priceLimit">Maximum price to search for, the
            DirFindFlags.LimitByPrice flag must be set</param>
            <param name="areaLimit">Maximum area to search for, the
            DirFindFlags.LimitByArea flag must be set</param>
            <param name="queryStart">Each request is limited to 100 parcels
            being returned. To get the first 100 parcels of a request use 0,
            from 100-199 use 100, 200-299 use 200, etc.</param>
            <returns>A unique identifier that can identify packets associated
            with this query from other queries</returns>
            <remarks>The OnDirLandReply event handler must be registered before
            calling this function. There is no way to determine how many
            results will be returned, or how many times the callback will be
            fired other than you won't get more than 100 total parcels from
            each query.</remarks>
        </member>
        <member name="T:libsecondlife.EstateTools">
            <summary>
            Estate level administration and utilities
            </summary>
        </member>
        <member name="M:libsecondlife.EstateTools.#ctor(libsecondlife.SecondLife)">
            <summary>
            Constructor for EstateTools class
            </summary>
            <param name="client">
            </param>
        </member>
        <member name="T:libsecondlife.EstateTools.EstateTask">
            <summary>Describes tasks returned in LandStatReply</summary>
        </member>
        <member name="T:libsecondlife.EstateTools.LandStatReportType">
            <summary>Used in the ReportType field of a LandStatRequest</summary>
        </member>
        <member name="T:libsecondlife.EstateTools.EstateAccessDelta">
            <summary>Used by EstateOwnerMessage packets</summary>
        </member>
        <member name="T:libsecondlife.EstateTools.GroundTextureRegion">
            <summary>Used by GroundTextureSettings</summary>
        </member>
        <member name="T:libsecondlife.EstateTools.GroundTextureSettings">
            <summary>Ground texture settings for each corner of the region</summary>
        </member>
        <member name="T:libsecondlife.EstateTools.GetTopCollidersReply">
            <summary>
            Triggered on incoming LandStatReply
            </summary>
            <param name="reportType">
            </param>
            <param name="requestFlags">
            </param>
            <param name="objectCount">
            </param>
            <param name="task">
            </param>
            <summary>
            Triggered on incoming LandStatReply when the report type is for "top colliders"
            </summary>
            <param name="objectCount">
            </param>
            <param name="Tasks">
            </param>
        </member>
        <member name="T:libsecondlife.EstateTools.GetTopScriptsReply">
            <summary>
            Triggered on incoming LandStatReply when the report type is for "top scripts"
            </summary>
            <param name="objectCount">
            </param>
            <param name="Tasks">
            </param>
        </member>
        <member name="E:libsecondlife.EstateTools.OnGetTopColliders">
            <summary>Callback for incoming LandStatReply packets</summary>
            <summary>Triggered upon a successful .GetTopColliders()</summary>
        </member>
        <member name="E:libsecondlife.EstateTools.OnGetTopScripts">
            <summary>Triggered upon a successful .GetTopScripts()</summary>
        </member>
        <member name="M:libsecondlife.EstateTools.LandStatRequest(System.Int32,libsecondlife.EstateTools.LandStatReportType,System.UInt32,System.String)">
            <summary>
            Requests estate information such as top scripts and colliders
            </summary>
            <param name="parcelLocalID">
            </param>
            <param name="reportType">
            </param>
            <param name="requestFlags">
            </param>
            <param name="filter">
            </param>
        </member>
        <member name="M:libsecondlife.EstateTools.GetTopScripts">
            <summary>Requests the "Top Scripts" list for the current region</summary>
        </member>
        <member name="M:libsecondlife.EstateTools.GetTopColliders">
            <summary>Requests the "Top Colliders" list for the current region</summary>
        </member>
        <member name="M:libsecondlife.EstateTools.EstateOwnerMessageHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            </summary>
            <param name="packet">
            </param>
            <param name="simulator">
            </param>
        </member>
        <member name="M:libsecondlife.EstateTools.LandStatReplyHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            </summary>
            <param name="packet">
            </param>
            <param name="simulator">
            </param>
        </member>
        <member name="M:libsecondlife.EstateTools.EstateOwnerMessage(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Used for setting and retrieving various estate panel settings
            </summary>
            <param name="method">EstateOwnerMessage Method field</param>
            <param name="listParams">List of parameters to include</param>
            <param name="createInvoice">Use LLUUID.Random() for Invoice field instead of LLUUID.Zero</param>
        </member>
        <member name="M:libsecondlife.EstateTools.KickUser(libsecondlife.LLUUID)">
            <summary>
            Kick an avatar from an estate
            </summary>
            <param name="prey">Key of Avatar to kick</param>
        </member>
        <member name="M:libsecondlife.EstateTools.BanUser(libsecondlife.LLUUID)">
            <summary>Ban an avatar from an estate</summary>
        </member>
        <member name="M:libsecondlife.EstateTools.UnbanUser(libsecondlife.LLUUID)">
            <summary>Unban an avatar from an estate</summary>
        </member>
        <member name="M:libsecondlife.EstateTools.EstateMessage(System.String)">
            <summary>
            Send a message dialog to everyone in an entire estate
            </summary>
            <param name="message">Message to send all users in the estate</param>
        </member>
        <member name="M:libsecondlife.EstateTools.SimulatorMessage(System.String)">
            <summary>
            Send a message dialog to everyone in a simulator
            </summary>
            <param name="message">Message to send all users in the simulator</param>
        </member>
        <member name="M:libsecondlife.EstateTools.TeleportHomeUser(libsecondlife.LLUUID)">
            <summary>
            Send an avatar back to their home location
            </summary>
            <param name="pest">Key of avatar to send home</param>
        </member>
        <member name="M:libsecondlife.EstateTools.RestartRegion">
            <summary>
            Begin the region restart process
            </summary>
            <param name="prey">
            </param>
        </member>
        <member name="M:libsecondlife.EstateTools.CancelRestart">
            <summary>
            Cancels a region restart
            </summary>
            <param name="prey">
            </param>
        </member>
        <member name="M:libsecondlife.EstateTools.SetRegionInfo(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Single,System.Boolean)">
            <summary>Estate panel "Region" tab settings</summary>
        </member>
        <member name="M:libsecondlife.EstateTools.SetRegionDebug(System.Boolean,System.Boolean,System.Boolean)">
            <summary>Estate panel "Debug" tab settings</summary>
        </member>
        <member name="T:libsecondlife.PacketEventDictionary">
            <summary>
            Registers, unregisters, and fires events generated by incoming packets
            </summary>
        </member>
        <member name="M:libsecondlife.PacketEventDictionary.#ctor(libsecondlife.SecondLife)">
            <summary>
            Default constructor
            </summary>
            <param name="client">
            </param>
        </member>
        <member name="T:libsecondlife.PacketEventDictionary.PacketCallbackWrapper">
            <summary>
            Object that is passed to worker threads in the ThreadPool for
            firing packet callbacks
            </summary>
        </member>
        <member name="F:libsecondlife.PacketEventDictionary.PacketCallbackWrapper.Callback">
            <summary>Callback to fire for this packet</summary>
        </member>
        <member name="F:libsecondlife.PacketEventDictionary.PacketCallbackWrapper.Simulator">
            <summary>Reference to the simulator that this packet came from</summary>
        </member>
        <member name="F:libsecondlife.PacketEventDictionary.PacketCallbackWrapper.Packet">
            <summary>The packet that needs to be processed</summary>
        </member>
        <member name="F:libsecondlife.PacketEventDictionary.Client">
            <summary>Reference to the SecondLife client</summary>
        </member>
        <member name="M:libsecondlife.PacketEventDictionary.RegisterEvent(libsecondlife.Packets.PacketType,libsecondlife.NetworkManager.PacketCallback)">
            <summary>
            Register an event handler
            </summary>
            <remarks>Use PacketType.Default to fire this event on every
            incoming packet</remarks>
            <param name="packetType">Packet type to register the handler for</param>
            <param name="eventHandler">Callback to be fired</param>
        </member>
        <member name="M:libsecondlife.PacketEventDictionary.UnregisterEvent(libsecondlife.Packets.PacketType,libsecondlife.NetworkManager.PacketCallback)">
            <summary>
            Unregister an event handler
            </summary>
            <param name="packetType">Packet type to unregister the handler for</param>
            <param name="eventHandler">Callback to be unregistered</param>
        </member>
        <member name="M:libsecondlife.PacketEventDictionary.RaiseEvent(libsecondlife.Packets.PacketType,libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Fire the events registered for this packet type synchronously
            </summary>
            <param name="packetType">Incoming packet type</param>
            <param name="packet">Incoming packet</param>
            <param name="simulator">Simulator this packet was received from</param>
        </member>
        <member name="M:libsecondlife.PacketEventDictionary.BeginRaiseEvent(libsecondlife.Packets.PacketType,libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Fire the events registered for this packet type asynchronously
            </summary>
            <param name="packetType">Incoming packet type</param>
            <param name="packet">Incoming packet</param>
            <param name="simulator">Simulator this packet was received from</param>
        </member>
        <member name="T:libsecondlife.CapsEventDictionary">
            <summary>
            Registers, unregisters, and fires events generated by the Capabilities
            event queue
            </summary>
        </member>
        <member name="M:libsecondlife.CapsEventDictionary.#ctor(libsecondlife.SecondLife)">
            <summary>
            Default constructor
            </summary>
            <param name="client">Reference to the SecondLife client</param>
        </member>
        <member name="T:libsecondlife.CapsEventDictionary.CapsCallbackWrapper">
            <summary>
            Object that is passed to worker threads in the ThreadPool for
            firing CAPS callbacks
            </summary>
        </member>
        <member name="F:libsecondlife.CapsEventDictionary.CapsCallbackWrapper.Callback">
            <summary>Callback to fire for this packet</summary>
        </member>
        <member name="F:libsecondlife.CapsEventDictionary.CapsCallbackWrapper.CapsEvent">
            <summary>Name of the CAPS event</summary>
        </member>
        <member name="F:libsecondlife.CapsEventDictionary.CapsCallbackWrapper.Body">
            <summary>Decoded body of the CAPS event</summary>
        </member>
        <member name="F:libsecondlife.CapsEventDictionary.CapsCallbackWrapper.EventQueue">
            <summary>Reference to the event queue that generated this event</summary>
        </member>
        <member name="F:libsecondlife.CapsEventDictionary.Client">
            <summary>Reference to the SecondLife client</summary>
        </member>
        <member name="M:libsecondlife.CapsEventDictionary.RegisterEvent(System.String,libsecondlife.Capabilities.EventQueueCallback)">
            <summary>
            Register an event handler
            </summary>
            <remarks>Use String.Empty to fire this event on every CAPS event</remarks>
            <param name="capsEvent">Capability event name to register the
            handler for</param>
            <param name="eventHandler">Callback to fire</param>
        </member>
        <member name="M:libsecondlife.CapsEventDictionary.UnregisterEvent(System.String,libsecondlife.Capabilities.EventQueueCallback)">
            <summary>
            </summary>
            <param name="capsEvent">Capability event name unregister the
            handler for</param>
            <param name="eventHandler">Callback to unregister</param>
        </member>
        <member name="M:libsecondlife.CapsEventDictionary.RaiseEvent(System.String,System.String,System.Collections.Hashtable,libsecondlife.CapsEventQueue)">
            <summary>
            Fire the events registered for this event type synchronously
            </summary>
            <param name="capsEvent">Capability name, or String.Empty for a
            default handler</param>
            <param name="eventName">Actual capability name</param>
            <param name="body">Decoded event body</param>
            <param name="eventQueue">Reference to the event queue that
            generated this event</param>
        </member>
        <member name="M:libsecondlife.CapsEventDictionary.BeginRaiseEvent(System.String,System.String,System.Collections.Hashtable,libsecondlife.CapsEventQueue)">
            <summary>
            Fire the events registered for this event type asynchronously
            </summary>
            <param name="capsEvent">Capability name, or String.Empty for a
            default handler</param>
            <param name="eventName">Actual capability name</param>
            <param name="body">Decoded event body</param>
            <param name="eventQueue">Reference to the event queue that
            generated this event</param>
        </member>
        <member name="T:libsecondlife.FriendsManager">
            <summary>
            This class is used to add and remove avatars from your friends list and to manage their permission.
            </summary>
        </member>
        <member name="M:libsecondlife.FriendsManager.#ctor(libsecondlife.SecondLife)">
            <summary>
            This constructor is intened to for use only the the libsecondlife framework
            </summary>
            <param name="client">
            </param>
        </member>
        <member name="F:libsecondlife.FriendsManager.RightsFlags.None">
            <summary>The avatar has no rights</summary>
        </member>
        <member name="F:libsecondlife.FriendsManager.RightsFlags.CanSeeOnline">
            <summary>The avatar can see the online status of the target avatar</summary>
        </member>
        <member name="F:libsecondlife.FriendsManager.RightsFlags.CanSeeOnMap">
            <summary>The avatar can see the location of the target avatar on the map</summary>
        </member>
        <member name="F:libsecondlife.FriendsManager.RightsFlags.CanModifyObjects">
            <summary>The avatar can modify the ojects of the target avatar </summary>
        </member>
        <member name="T:libsecondlife.FriendsManager.FriendInfo">
            <summary>
            This class holds information about an avatar in the friends list.  There are two ways
            to interface to this class.  The first is through the set of boolean properties.  This is the typical
            way clients of this class will use it.  The second interface is through two bitmap properties.  While
            the bitmap interface is public, it is intended for use the libsecondlife framework.
            </summary>
        </member>
        <member name="M:libsecondlife.FriendsManager.FriendInfo.#ctor(libsecondlife.LLUUID,libsecondlife.FriendsManager.RightsFlags,libsecondlife.FriendsManager.RightsFlags)">
            <summary>
            Used by the libsecondlife framework when building the initial list of friends
            at login time.  This constructor should not be called by consummer of this class.
            </summary>
            <param name="id">System ID of the avatar being prepesented</param>
            <param name="theirRights">Rights the friend has to see you online and to modify your objects</param>
            <param name="myRights">Rights you have to see your friend online and to modify their objects</param>
        </member>
        <member name="P:libsecondlife.FriendsManager.FriendInfo.UUID">
            <summary>
            System ID of the avatar
            </summary>
        </member>
        <member name="P:libsecondlife.FriendsManager.FriendInfo.Name">
            <summary>
            full name of the avatar
            </summary>
        </member>
        <member name="P:libsecondlife.FriendsManager.FriendInfo.IsOnline">
            <summary>
            True if the avatar is online
            </summary>
        </member>
        <member name="P:libsecondlife.FriendsManager.FriendInfo.CanSeeMeOnline">
            <summary>
            True if the friend can see if I am online
            </summary>
        </member>
        <member name="P:libsecondlife.FriendsManager.FriendInfo.CanSeeMeOnMap">
            <summary>
            True if the friend can see me on the map
            </summary>
        </member>
        <member name="P:libsecondlife.FriendsManager.FriendInfo.CanModifyMyObjects">
            <summary>
            True if the freind can modify my objects
            </summary>
        </member>
        <member name="P:libsecondlife.FriendsManager.FriendInfo.CanSeeThemOnline">
            <summary>
            True if I can see if my friend is online
            </summary>
        </member>
        <member name="P:libsecondlife.FriendsManager.FriendInfo.CanSeeThemOnMap">
            <summary>
            True if I can see if my friend is on the map
            </summary>
        </member>
        <member name="P:libsecondlife.FriendsManager.FriendInfo.CanModifyTheirObjects">
            <summary>
            True if I can modify my friend's objects
            </summary>
        </member>
        <member name="P:libsecondlife.FriendsManager.FriendInfo.TheirRightsFlags">
            <summary>
            My friend's rights represented as bitmapped flags
            </summary>
        </member>
        <member name="P:libsecondlife.FriendsManager.FriendInfo.MyRightsFlags">
            <summary>
            My rights represented as bitmapped flags
            </summary>
        </member>
        <member name="M:libsecondlife.FriendsManager.FriendInfo.ToString">
            <summary>
            This class represented as a string.
            </summary>
            <returns>A string reprentation of both my rights and my friend's righs</returns>
        </member>
        <member name="T:libsecondlife.FriendsManager.FriendOnlineEvent">
            <summary>
            Triggered when an avatar in your friends list comes online
            </summary>
            <param name="friend"> System ID of the avatar</param>
        </member>
        <member name="T:libsecondlife.FriendsManager.FriendOfflineEvent">
            <summary>
            Triggered when an avatar in your friends list goes offline
            </summary>
            <param name="friend"> System ID of the avatar</param>
        </member>
        <member name="T:libsecondlife.FriendsManager.FriendRightsEvent">
            <summary>
            Triggered in response to a call to the GrantRighs() method, or when a friend changes your rights
            </summary>
            <param name="friend"> System ID of the avatar you changed the right of</param>
        </member>
        <member name="T:libsecondlife.FriendsManager.FriendshipOfferedEvent">
            <summary>
            Triggered when someone offers you friendship
            </summary>
            <param name="agentID">System ID of the agent offering friendship</param>
            <param name="agentName">full name of the agent offereing friendship</param>
            <param name="IMSessionID">session ID need when accepting/declining the offer</param>
            <returns>Return true to accept the friendship, false to deny it</returns>
        </member>
        <member name="T:libsecondlife.FriendsManager.FriendshipResponseEvent">
            <summary>
            Trigger when your friendship offer has been excepted
            </summary>
            <param name="agentID">System ID of the avatar who accepted your friendship offer</param>
            <param name="agentName">Full name of the avatar who accepted your friendship offer</param>
            <param name="accepted">Whether the friendship request was accepted or declined</param>
        </member>
        <member name="M:libsecondlife.FriendsManager.FriendsList">
            <summary>
            Get a list of all the friends we are currently aware of
            </summary>
            <remarks>
            This function performs a shallow copy from the internal dictionary
            in FriendsManager. Avoid calling it multiple times when it is not
            necessary to as it can be expensive memory-wise
            </remarks>
        </member>
        <member name="M:libsecondlife.FriendsManager.PendingOffers">
            <summary>
            Dictionary of unanswered friendship offers
            </summary>
        </member>
        <member name="M:libsecondlife.FriendsManager.AcceptFriendship(libsecondlife.LLUUID,libsecondlife.LLUUID)">
            <summary>
            Accept a friendship request
            </summary>
            <param name="imSessionID">imSessionID of the friendship request message</param>
        </member>
        <member name="M:libsecondlife.FriendsManager.DeclineFriendship(libsecondlife.LLUUID,libsecondlife.LLUUID)">
            <summary>
            Decline a friendship request
            </summary>
            <param name="imSessionID">imSessionID of the friendship request message</param>
        </member>
        <member name="M:libsecondlife.FriendsManager.OfferFriendship(libsecondlife.LLUUID)">
            <summary>
            Offer friendship to an avatar.
            </summary>
            <param name="agentID">System ID of the avatar you are offering friendship to</param>
        </member>
        <member name="M:libsecondlife.FriendsManager.TerminateFriendship(libsecondlife.LLUUID)">
            <summary>
            Terminate a friendship with an avatar
            </summary>
            <param name="agentID">System ID of the avatar you are terminating the friendship with</param>
        </member>
        <member name="M:libsecondlife.FriendsManager.GrantRights(libsecondlife.LLUUID)">
            <summary>
            Change the rights of a friend avatar.  To use this routine, first change the right of the
            avatar stored in the item property.
            </summary>
            <param name="agentID">System ID of the avatar you are changing the rights of</param>
        </member>
        <member name="M:libsecondlife.FriendsManager.AddFriend(libsecondlife.LLUUID,libsecondlife.FriendsManager.RightsFlags,libsecondlife.FriendsManager.RightsFlags)">
            <summary>
            Adds a friend. Intended for use by the libsecondlife framework to build the
            initial list of friends from the buddy-list in the login reply XML
            </summary>
            <param name="agentID">ID of the agent being added to the list of friends</param>
            <param name="theirRights">rights the friend has</param>
            <param name="myRights">rights you have</param>
        </member>
        <member name="M:libsecondlife.FriendsManager.Network_OnConnect(System.Object)">
            <summary>
            Called when a connection to the SL server is established.  The list of friend avatars
            is populated from XML returned by the login server.  That list contains the avatar's id
            and right, but no names.  Here is where those names are requested.
            </summary>
            <param name="sender">
            </param>
        </member>
        <member name="M:libsecondlife.FriendsManager.Avatars_OnAvatarNames(System.Collections.Generic.Dictionary{libsecondlife.LLUUID,System.String})">
            <summary>
            This handles the asynchronous response of a RequestAvatarNames call.
            </summary>
            <param name="names">names cooresponding to the the list of IDs sent the the RequestAvatarNames call.</param>
        </member>
        <member name="M:libsecondlife.FriendsManager.OnlineNotificationHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Handle notifications sent when a friends has come online.
            </summary>
            <param name="packet">
            </param>
            <param name="simulator">
            </param>
        </member>
        <member name="M:libsecondlife.FriendsManager.OfflineNotificationHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Handle notifications sent when a friends has gone offline.
            </summary>
            <param name="packet">
            </param>
            <param name="simulator">
            </param>
        </member>
        <member name="M:libsecondlife.FriendsManager.ChangeUserRightsHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Handle notifications sent when a friend rights change.  This notification is also received
            when my own rights change.
            </summary>
            <param name="packet">
            </param>
            <param name="simulator">
            </param>
        </member>
        <member name="M:libsecondlife.FriendsManager.MainAvatar_InstantMessage(libsecondlife.LLUUID,System.String,libsecondlife.LLUUID,System.UInt32,libsecondlife.LLUUID,libsecondlife.LLVector3,libsecondlife.MainAvatar.InstantMessageDialog,System.Boolean,libsecondlife.LLUUID,System.DateTime,System.String,libsecondlife.MainAvatar.InstantMessageOnline,System.Byte[],libsecondlife.Simulator)">
            <summary>
            Handles relevant messages from the server encapsulated in instant messages.
            </summary>
            <param name="fromAgentID">
            </param>
            <param name="fromAgentName">
            </param>
            <param name="toAgentID">
            </param>
            <param name="parentEstateID">
            </param>
            <param name="regionID">
            </param>
            <param name="position">
            </param>
            <param name="dialog">
            </param>
            <param name="groupIM">
            </param>
            <param name="imSessionID">
            </param>
            <param name="timestamp">
            </param>
            <param name="message">
            </param>
            <param name="offline">
            </param>
            <param name="binaryBucket">
            </param>
            <param name="simulator">
            </param>
        </member>
        <member name="T:libsecondlife.GridRegion">
            <summary>
            Region information returned from the spaceserver, used for the world map
            </summary>
        </member>
        <member name="F:libsecondlife.GridRegion.X">
            <summary>Sim X position on World Map</summary>
        </member>
        <member name="F:libsecondlife.GridRegion.Y">
            <summary>Sim Y position on World Map</summary>
        </member>
        <member name="F:libsecondlife.GridRegion.Name">
            <summary>Sim Name (NOTE: In lowercase!)</summary>
        </member>
        <member name="F:libsecondlife.GridRegion.Access">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GridRegion.RegionFlags">
            <summary>Appears to always be zero (None)</summary>
        </member>
        <member name="F:libsecondlife.GridRegion.WaterHeight">
            <summary>Sim's defined Water Height</summary>
        </member>
        <member name="F:libsecondlife.GridRegion.Agents">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GridRegion.MapImageID">
            <summary>UUID of the World Map image</summary>
        </member>
        <member name="F:libsecondlife.GridRegion.RegionHandle">
            <summary>Unique identifier for this region, a combination of the X
            and Y position</summary>
        </member>
        <member name="M:libsecondlife.GridRegion.ToString">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.GridRegion.GetHashCode">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.GridRegion.Equals(System.Object)">
            <summary>
            </summary>
            <param name="obj">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:libsecondlife.GridManager">
            <summary>
            Manages grid-wide tasks such as the world map
            </summary>
        </member>
        <member name="M:libsecondlife.GridManager.#ctor(libsecondlife.SecondLife)">
            <summary>
            Constructor
            </summary>
            <param name="client">Instance of type SecondLife to associate with this GridManager instance</param>
        </member>
        <member name="T:libsecondlife.GridManager.MapLayerType">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GridManager.MapLayerType.Objects">
            <summary>Objects and terrain are shown</summary>
        </member>
        <member name="F:libsecondlife.GridManager.MapLayerType.Terrain">
            <summary>Only the terrain is shown, no objects</summary>
        </member>
        <member name="F:libsecondlife.GridManager.MapLayerType.LandForSale">
            <summary>Overlay showing land for sale and for auction</summary>
        </member>
        <member name="T:libsecondlife.GridManager.GridRegionCallback">
            <summary>
            </summary>
            <param name="region">
            </param>
        </member>
        <member name="F:libsecondlife.GridManager.Regions">
            <summary>A dictionary of all the regions, indexed by region ID</summary>
        </member>
        <member name="F:libsecondlife.GridManager.RegionsByHandle">
            <summary>A dictionary of all the regions, indexed by region handle</summary>
        </member>
        <member name="E:libsecondlife.GridManager.OnRegionAdd">
            <summary>
            Triggered when a new region is discovered through GridManager
            </summary>
        </member>
        <member name="P:libsecondlife.GridManager.SunPhase">
            <summary>Unknown</summary>
        </member>
        <member name="P:libsecondlife.GridManager.SunDirection">
            <summary>Current direction of the sun</summary>
        </member>
        <member name="P:libsecondlife.GridManager.SunAngVelocity">
            <summary>Current angular velocity of the sun</summary>
        </member>
        <member name="M:libsecondlife.GridManager.RequestMainlandSims(libsecondlife.GridManager.MapLayerType)">
            <summary>
            Request data for all mainland (Linden managed) simulators
            </summary>
        </member>
        <member name="M:libsecondlife.GridManager.GetGridRegion(System.String,libsecondlife.GridRegion@)">
            <summary>
            Get grid region information using the region name, this function
            will block until it can find the region or gives up
            </summary>
            <param name="name">Name of sim you're looking for</param>
            <param name="region">Will contain a GridRegion for the sim you're
            looking for if successful, otherwise an empty structure</param>
            <returns>True if the GridRegion was successfully fetched, otherwise
            false</returns>
            <example>bool success = GetGridRegion("Ahern", out myGridRegion);</example>
        </member>
        <member name="M:libsecondlife.GridManager.MapBlockReplyHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Populate Grid info based on data from MapBlockReplyPacket
            </summary>
            <param name="packet">Incoming MapBlockReplyPacket packet</param>
            <param name="simulator">Unused</param>
        </member>
        <member name="M:libsecondlife.GridManager.TimeMessageHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Get sim time from the appropriate packet
            </summary>
            <param name="packet">Incoming SimulatorViewerTimeMessagePacket from SL</param>
            <param name="simulator">Unused</param>
        </member>
        <member name="T:libsecondlife.GroupMember">
            <summary>
            Avatar group management
            </summary>
        </member>
        <member name="F:libsecondlife.GroupMember.ID">
            <summary>Key of Group Member</summary>
        </member>
        <member name="F:libsecondlife.GroupMember.Contribution">
            <summary>Total land contribution</summary>
        </member>
        <member name="F:libsecondlife.GroupMember.OnlineStatus">
            <summary>Online status information</summary>
        </member>
        <member name="F:libsecondlife.GroupMember.Powers">
            <summary>Abilities that the Group Member has</summary>
        </member>
        <member name="F:libsecondlife.GroupMember.Title">
            <summary>Current group title</summary>
        </member>
        <member name="F:libsecondlife.GroupMember.IsOwner">
            <summary>Is a group owner</summary>
        </member>
        <member name="T:libsecondlife.GroupRole">
            <summary>
            Role manager for a group
            </summary>
        </member>
        <member name="F:libsecondlife.GroupRole.ID">
            <summary>Key of Role</summary>
        </member>
        <member name="F:libsecondlife.GroupRole.Name">
            <summary>Name of Role</summary>
        </member>
        <member name="F:libsecondlife.GroupRole.Title">
            <summary>Group Title associated with Role</summary>
        </member>
        <member name="F:libsecondlife.GroupRole.Description">
            <summary>Description of Role</summary>
        </member>
        <member name="F:libsecondlife.GroupRole.Powers">
            <summary>Abilities Associated with Role</summary>
        </member>
        <member name="M:libsecondlife.GroupRole.ToString">
            <summary>
            Returns the role's title
            </summary>
            <returns>The role's title</returns>
        </member>
        <member name="T:libsecondlife.GroupTitle">
            <summary>
            Class to represent Group Title
            </summary>
        </member>
        <member name="F:libsecondlife.GroupTitle.Title">
            <summary>Group Title</summary>
        </member>
        <member name="F:libsecondlife.GroupTitle.Selected">
            <summary>Whether title is Active</summary>
        </member>
        <member name="T:libsecondlife.Group">
            <summary>
            Represents a group in Second Life
            </summary>
        </member>
        <member name="F:libsecondlife.Group.ID">
            <summary>Key of Group</summary>
        </member>
        <member name="F:libsecondlife.Group.InsigniaID">
            <summary>Key of Group Insignia</summary>
        </member>
        <member name="F:libsecondlife.Group.FounderID">
            <summary>Key of Group Founder</summary>
        </member>
        <member name="F:libsecondlife.Group.OwnerRole">
            <summary>Key of Group Role for Owners</summary>
        </member>
        <member name="F:libsecondlife.Group.Name">
            <summary>Name of Group</summary>
        </member>
        <member name="F:libsecondlife.Group.Charter">
            <summary>Text of Group Charter</summary>
        </member>
        <member name="F:libsecondlife.Group.MemberTitle">
            <summary>Title of "everyone" role</summary>
        </member>
        <member name="F:libsecondlife.Group.OpenEnrollment">
            <summary>Is the group open for enrolement to everyone</summary>
        </member>
        <member name="F:libsecondlife.Group.ShowInList">
            <summary>Will group show up in search</summary>
        </member>
        <member name="F:libsecondlife.Group.Powers">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Group.AcceptNotices">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Group.AllowPublish">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Group.MaturePublish">
            <summary>Is the group Mature</summary>
        </member>
        <member name="F:libsecondlife.Group.MembershipFee">
            <summary>Cost of group membership</summary>
        </member>
        <member name="F:libsecondlife.Group.Money">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Group.Contribution">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Group.GroupMembershipCount">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Group.GroupRolesCount">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.Group.ToString">
            <summary>
            Returns the name of the group
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:libsecondlife.GroupProfile">
            <summary>
            Profile of a group
            </summary>
        </member>
        <member name="F:libsecondlife.GroupProfile.ID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupProfile.InsigniaID">
            <summary>Key of Group Insignia</summary>
        </member>
        <member name="F:libsecondlife.GroupProfile.FounderID">
            <summary>Key of Group Founder</summary>
        </member>
        <member name="F:libsecondlife.GroupProfile.OwnerRole">
            <summary>Key of Group Role for Owners</summary>
        </member>
        <member name="F:libsecondlife.GroupProfile.Name">
            <summary>Name of Group</summary>
        </member>
        <member name="F:libsecondlife.GroupProfile.Charter">
            <summary>Text of Group Charter</summary>
        </member>
        <member name="F:libsecondlife.GroupProfile.MemberTitle">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupProfile.OpenEnrollment">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupProfile.ShowInList">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupProfile.Powers">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupProfile.AcceptNotices">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupProfile.AllowPublish">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupProfile.MaturePublish">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupProfile.MembershipFee">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupProfile.Money">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupProfile.Contribution">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupProfile.GroupMembershipCount">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupProfile.GroupRolesCount">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.Vote">
            <summary>
            A group Vote
            </summary>
        </member>
        <member name="F:libsecondlife.Vote.Candidate">
            <summary>Key of Avatar who created Vote</summary>
        </member>
        <member name="F:libsecondlife.Vote.VoteString">
            <summary>Text of the Vote proposal</summary>
        </member>
        <member name="F:libsecondlife.Vote.NumVotes">
            <summary>Total number of votes</summary>
        </member>
        <member name="T:libsecondlife.GroupAccountSummary">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountSummary.IntervalDays">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountSummary.CurrentInterval">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountSummary.StartDate">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountSummary.Balance">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountSummary.TotalCredits">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountSummary.TotalDebits">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountSummary.ObjectTaxCurrent">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountSummary.LightTaxCurrent">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountSummary.LandTaxCurrent">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountSummary.GroupTaxCurrent">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountSummary.ParcelDirFeeCurrent">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountSummary.ObjectTaxEstimate">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountSummary.LightTaxEstimate">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountSummary.LandTaxEstimate">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountSummary.GroupTaxEstimate">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountSummary.ParcelDirFeeEstimate">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountSummary.NonExemptMembers">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountSummary.LastTaxDate">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountSummary.TaxDate">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.GroupAccountDetails">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountDetails.IntervalDays">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountDetails.CurrentInterval">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountDetails.StartDate">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountDetails.HistoryItems">
            <summary>A list of description/amount pairs making up the account
            history</summary>
        </member>
        <member name="T:libsecondlife.GroupAccountTransactions">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountTransactions.IntervalDays">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountTransactions.CurrentInterval">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountTransactions.StartDate">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupAccountTransactions.Transactions">
            <summary>List of all the transactions for this group</summary>
        </member>
        <member name="T:libsecondlife.Transaction">
            <summary>
            A single transaction made by a group
            </summary>
        </member>
        <member name="F:libsecondlife.Transaction.Time">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Transaction.User">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Transaction.Type">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Transaction.Item">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Transaction.Amount">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.GroupNotice">
            <summary>
            Struct representing a group notice
            </summary>
        </member>
        <member name="F:libsecondlife.GroupNotice.Subject">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupNotice.Message">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupNotice.AttachmentID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupNotice.OwnerID">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.GroupNotice.SerializeAttachment">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:libsecondlife.GroupRoleUpdate">
            <summary>
            Role update flags
            </summary>
        </member>
        <member name="T:libsecondlife.GroupRolePowers">
            <summary>
            Group role powers flags
            </summary>
        </member>
        <member name="T:libsecondlife.GroupManager">
            <summary>
            Handles all network traffic related to reading and writing group
            information
            </summary>
        </member>
        <member name="M:libsecondlife.GroupManager.#ctor(libsecondlife.SecondLife)">
            <summary>
            </summary>
            <param name="client">
            </param>
        </member>
        <member name="T:libsecondlife.GroupManager.CurrentGroupsCallback">
            <summary>
            Callback for the list of groups the avatar is currently a member of
            </summary>
            <param name="groups">
            </param>
        </member>
        <member name="T:libsecondlife.GroupManager.GroupProfileCallback">
            <summary>
            Callback for the profile of a group
            </summary>
            <param name="group">
            </param>
        </member>
        <member name="T:libsecondlife.GroupManager.GroupMembersCallback">
            <summary>
            Callback for the member list of a group
            </summary>
            <param name="members">
            </param>
        </member>
        <member name="T:libsecondlife.GroupManager.GroupRolesCallback">
            <summary>
            Callback for the role list of a group
            </summary>
            <param name="roles">
            </param>
        </member>
        <member name="T:libsecondlife.GroupManager.GroupRolesMembersCallback">
            <summary>
            Callback for a pairing of roles to members
            </summary>
            <param name="rolesMembers">
            </param>
        </member>
        <member name="T:libsecondlife.GroupManager.GroupTitlesCallback">
            <summary>
            Callback for the title list of a group
            </summary>
            <param name="titles">
            </param>
        </member>
        <member name="T:libsecondlife.GroupManager.GroupAccountSummaryCallback">
            <summary>
            </summary>
            <param name="summary">
            </param>
        </member>
        <member name="T:libsecondlife.GroupManager.GroupAccountDetailsCallback">
            <summary>
            </summary>
            <param name="details">
            </param>
        </member>
        <member name="T:libsecondlife.GroupManager.GroupAccountTransactionsCallback">
            <summary>
            </summary>
            <param name="transactions">
            </param>
        </member>
        <member name="F:libsecondlife.GroupManager.Client">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.GroupManager.GroupMembersCaches">
            <summary>A list of all the lists of group members, indexed by the request ID</summary>
        </member>
        <member name="F:libsecondlife.GroupManager.GroupRolesCaches">
            <summary>A list of all the lists of group roles, indexed by the request ID</summary>
        </member>
        <member name="F:libsecondlife.GroupManager.GroupRolesMembersCaches">
            <summary>A list of all the role to member mappings</summary>
        </member>
        <member name="E:libsecondlife.GroupManager.OnCurrentGroups">
            <summary>
            </summary>
        </member>
        <member name="E:libsecondlife.GroupManager.OnGroupProfile">
            <summary>
            </summary>
        </member>
        <member name="E:libsecondlife.GroupManager.OnGroupMembers">
            <summary>
            </summary>
        </member>
        <member name="E:libsecondlife.GroupManager.OnGroupRoles">
            <summary>
            </summary>
        </member>
        <member name="E:libsecondlife.GroupManager.OnGroupRolesMembers">
            <summary>
            </summary>
        </member>
        <member name="E:libsecondlife.GroupManager.OnGroupTitles">
            <summary>
            </summary>
        </member>
        <member name="E:libsecondlife.GroupManager.OnGroupAccountSummary">
            <summary>
            </summary>
        </member>
        <member name="E:libsecondlife.GroupManager.OnGroupAccountDetails">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.GroupManager.BeginGetCurrentGroups">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.GroupManager.BeginGetGroupProfile(libsecondlife.LLUUID)">
            <summary>
            </summary>
            <param name="group">
            </param>
        </member>
        <member name="M:libsecondlife.GroupManager.BeginGetGroupMembers(libsecondlife.LLUUID)">
            <summary>
            </summary>
            <param name="group">
            </param>
        </member>
        <member name="M:libsecondlife.GroupManager.BeginGetGroupRoles(libsecondlife.LLUUID)">
            <summary>
            </summary>
            <param name="group">
            </param>
        </member>
        <member name="M:libsecondlife.GroupManager.BeginGetGroupRoleMembers(libsecondlife.LLUUID)">
            <summary>
            </summary>
            <param name="group">
            </param>
        </member>
        <member name="M:libsecondlife.GroupManager.BeginGetGroupTitles(libsecondlife.LLUUID)">
            <summary>
            </summary>
            <param name="group">
            </param>
        </member>
        <member name="M:libsecondlife.GroupManager.BeginGetGroupAccountSummary(libsecondlife.LLUUID,System.Int32,System.Int32)">
            <summary>
            Begin to get the group account summary
            </summary>
            <param name="group">The group's ID</param>
            <param name="intervalDays">How long of an interval</param>
            <param name="currentInterval">Which interval (0 for current, 1 for last)</param>
        </member>
        <member name="M:libsecondlife.GroupManager.Invite(libsecondlife.LLUUID,System.Collections.Generic.List{libsecondlife.LLUUID},libsecondlife.LLUUID)">
            <summary>
            Invites a user to a group
            </summary>
            <param name="group">The group to invite to.</param>
            <param name="roles">A list of roles to invite a person to</param>
            <param name="personkey">Key of person to invite</param>
        </member>
        <member name="M:libsecondlife.GroupManager.CreateGroup(libsecondlife.Group)">
            <summary>
            Create a new group. This method automaticaly deducts the group creation feild
            </summary>
            <param name="group">Group struct containing the new group info</param>
        </member>
        <member name="M:libsecondlife.GroupManager.UpdateGroup(libsecondlife.LLUUID,libsecondlife.Group)">
            <summary>
            Update a group's profile and other information
            </summary>
            <param name="group">Group struct to update</param>
        </member>
        <member name="M:libsecondlife.GroupManager.EjectUser(libsecondlife.LLUUID,libsecondlife.LLUUID)">
            <summary>
            Eject a user from a group
            </summary>
            <param name="group">Group to eject the user from</param>
            <param name="member">Avatar's key to eject</param>
        </member>
        <member name="M:libsecondlife.GroupManager.UpdateRole(libsecondlife.LLUUID,libsecondlife.GroupRole)">
            <summary>
            Update role information
            </summary>
            <param name="group">Group to update</param>
            <param name="role">Role to update</param>
        </member>
        <member name="M:libsecondlife.GroupManager.CreateRole(libsecondlife.LLUUID,libsecondlife.GroupRole)">
            <summary>
            Create a new role
            </summary>
            <param name="group">Group to update</param>
            <param name="role">Role to create</param>
        </member>
        <member name="M:libsecondlife.GroupManager.RemoveFromRole(libsecondlife.LLUUID,libsecondlife.LLUUID,libsecondlife.LLUUID)">
            <summary>
            Remove an avatar from a role
            </summary>
            <param name="group">Group to update</param>
            <param name="role">Role to be removed from</param>
            <param name="member">Avatar to remove</param>
        </member>
        <member name="M:libsecondlife.GroupManager.AddToRole(libsecondlife.LLUUID,libsecondlife.LLUUID,libsecondlife.LLUUID)">
            <summary>
            Assign an avatar to a role
            </summary>
            <param name="group">Group to update</param>
            <param name="role">Role to assign to</param>
            <param name="member">Avatar to assign</param>
        </member>
        <member name="M:libsecondlife.GroupManager.SendGroupNotice(libsecondlife.LLUUID,libsecondlife.GroupNotice)">
            <summary>
            </summary>
            <param name="group">
            </param>
            <param name="notice">
            </param>
        </member>
        <member name="M:libsecondlife.GroupManager.StartProposal(libsecondlife.LLUUID,libsecondlife.GroupProposal)">
            <summary>
            Start a group proposal (vote)
            </summary>
            <param name="group">The group to send it to</param>
            <param name="prop">The proposal to start</param>
        </member>
        <member name="T:libsecondlife.Helpers">
            <summary>
            Static helper functions and global variables
            </summary>
        </member>
        <member name="T:libsecondlife.Helpers.LogLevel">
            <summary>
            Passed to SecondLife.Log() to identify the severity of a log entry
            </summary>
        </member>
        <member name="F:libsecondlife.Helpers.LogLevel.Info">
            <summary>Non-noisy useful information, may be helpful in
            debugging a problem</summary>
        </member>
        <member name="F:libsecondlife.Helpers.LogLevel.Warning">
            <summary>A non-critical error occurred. A warning will not
            prevent the rest of libsecondlife from operating as usual,
            although it may be indicative of an underlying issue</summary>
        </member>
        <member name="F:libsecondlife.Helpers.LogLevel.Error">
            <summary>A critical error has occurred. Generally this will
            be followed by the network layer shutting down, although the
            stability of libsecondlife after an error is uncertain</summary>
        </member>
        <member name="F:libsecondlife.Helpers.LogLevel.Debug">
            <summary>Used for internal testing, this logging level can
            generate very noisy (long and/or repetitive) messages. Don't
            pass this to the Log() function, use DebugLog() instead.
            </summary>
        </member>
        <member name="F:libsecondlife.Helpers.MSG_APPENDED_ACKS">
            <summary>This header flag signals that ACKs are appended to the packet</summary>
        </member>
        <member name="F:libsecondlife.Helpers.MSG_RESENT">
            <summary>This header flag signals that this packet has been sent before</summary>
        </member>
        <member name="F:libsecondlife.Helpers.MSG_RELIABLE">
            <summary>This header flags signals that an ACK is expected for this packet</summary>
        </member>
        <member name="F:libsecondlife.Helpers.MSG_ZEROCODED">
            <summary>This header flag signals that the message is compressed using zerocoding</summary>
        </member>
        <member name="F:libsecondlife.Helpers.DEG_TO_RAD">
            <summary>Used for converting degrees to radians</summary>
        </member>
        <member name="F:libsecondlife.Helpers.RAD_TO_DEG">
            <summary>Used for converting radians to degrees</summary>
        </member>
        <member name="F:libsecondlife.Helpers.MD5Builder">
            <summary>Provide a single instance of the MD5 class to avoid making
            duplicate copies</summary>
        </member>
        <member name="F:libsecondlife.Helpers.EnUsCulture">
            <summary>Provide a single instance of the CultureInfo class to
            help parsing in situations where Second Life assumes an en-us
            culture</summary>
        </member>
        <member name="M:libsecondlife.Helpers.TEOffsetShort(System.Single)">
            <summary>
            </summary>
            <param name="offset">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.Helpers.TEOffsetFloat(System.Byte[],System.Int32)">
            <summary>
            </summary>
            <param name="bytes">
            </param>
            <param name="pos">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.Helpers.TERotationShort(System.Single)">
            <summary>
            </summary>
            <param name="rotation">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.Helpers.TERotationFloat(System.Byte[],System.Int32)">
            <summary>
            </summary>
            <param name="bytes">
            </param>
            <param name="pos">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.Helpers.UIntToHexString(System.UInt32)">
            <summary>
            Converts an unsigned integer to a hexadecimal string
            </summary>
            <param name="i">An unsigned integer to convert to a string</param>
            <returns>A hexadecimal string 10 characters long</returns>
            <example>0x7fffffff</example>
        </member>
        <member name="M:libsecondlife.Helpers.UIntsToLong(System.UInt32,System.UInt32)">
            <summary>
            Packs to 32-bit unsigned integers in to a 64-bit unsigned integer
            </summary>
            <param name="a">The left-hand (or X) value</param>
            <param name="b">The right-hand (or Y) value</param>
            <returns>A 64-bit integer containing the two 32-bit input values</returns>
        </member>
        <member name="M:libsecondlife.Helpers.GlobalPosToRegionHandle(System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Given an X/Y location in absolute (grid-relative) terms, a region
            handle is returned along with the local X/Y location in that region
            </summary>
            <param name="globalX">The absolute X location, a number such as
            255360.35</param>
            <param name="globalY">The absolute Y location, a number such as
            255360.35</param>
            <param name="localX">The sim-local X position of the global X
            position, a value from 0.0 to 256.0</param>
            <param name="localY">The sim-local Y position of the global Y
            position, a value from 0.0 to 256.0</param>
            <returns>A 64-bit region handle that can be used to teleport to</returns>
        </member>
        <member name="M:libsecondlife.Helpers.LongToUInts(System.UInt64,System.UInt32@,System.UInt32@)">
            <summary>
            Unpacks two 32-bit unsigned integers from a 64-bit unsigned integer
            </summary>
            <param name="a">The 64-bit input integer</param>
            <param name="b">The left-hand (or X) output value</param>
            <param name="c">The right-hand (or Y) output value</param>
        </member>
        <member name="M:libsecondlife.Helpers.IntToBytes(System.Int32)">
            <summary>
            Convert an integer to a byte array in little endian format
            </summary>
            <param name="x">The integer to convert</param>
            <returns>A four byte little endian array</returns>
        </member>
        <member name="M:libsecondlife.Helpers.BytesToUInt16(System.Byte[],System.Int32)">
            <summary>
            Convert the first two bytes starting at the given position in
            little endian ordering to an unsigned short
            </summary>
            <param name="bytes">Byte array containing the ushort</param>
            <param name="pos">Position to start reading the ushort from</param>
            <returns>An unsigned short, will be zero if a ushort can't be read
            at the given position</returns>
        </member>
        <member name="M:libsecondlife.Helpers.BytesToUInt(System.Byte[],System.Int32)">
            <summary>
            Convert the first four bytes starting at the given position in
            little endian ordering to an unsigned integer
            </summary>
            <param name="bytes">Byte array containing the uint</param>
            <param name="pos">Position to start reading the uint from</param>
            <returns>An unsigned integer, will be zero if a uint can't be read
            at the given position</returns>
        </member>
        <member name="M:libsecondlife.Helpers.BytesToUInt(System.Byte[])">
            <summary>
            Convert the first four bytes of the given array in little endian
            ordering to an unsigned integer
            </summary>
            <param name="bytes">An array four bytes or longer</param>
            <returns>An unsigned integer, will be zero if the array contains
            less than four bytes</returns>
        </member>
        <member name="M:libsecondlife.Helpers.BytesToUIntBig(System.Byte[],System.Int32)">
            <summary>
            Convert the first four bytes starting at the given position in
            big endian ordering to an unsigned integer
            </summary>
            <param name="bytes">Byte array containing the uint</param>
            <param name="pos">Position to start reading the uint from</param>
            <returns>An unsigned integer, will be zero if a uint can't be read
            at the given position</returns>
        </member>
        <member name="M:libsecondlife.Helpers.BytesToUIntBig(System.Byte[])">
            <summary>
            Convert the first four bytes of the given array in big endian
            ordering to an unsigned integer
            </summary>
            <param name="bytes">An array four bytes or longer</param>
            <returns>An unsigned integer, will be zero if the array contains
            less than four bytes</returns>
        </member>
        <member name="M:libsecondlife.Helpers.BytesToUInt64(System.Byte[])">
            <summary>
            Convert the first eight bytes of the given array in little endian
            ordering to an unsigned 64-bit integer
            </summary>
            <param name="bytes">An array eight bytes or longer</param>
            <returns>An unsigned 64-bit integer, will be zero if the array
            contains less than eight bytes</returns>
        </member>
        <member name="M:libsecondlife.Helpers.BytesToFloat(System.Byte[],System.Int32)">
            <summary>
            </summary>
            <param name="bytes">
            </param>
            <param name="pos">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.Helpers.FloatToBytes(System.Single)">
            <summary>
            Convert a floating point value to four bytes in little endian
            ordering
            </summary>
            <param name="value">A floating point value</param>
            <returns>A four byte array containing the value in little endian
            ordering</returns>
        </member>
        <member name="M:libsecondlife.Helpers.FloatToTerseString(System.Single)">
            <summary>
            Converts a floating point number to a terse string format used for
            transmitting numbers in wearable asset files
            </summary>
            <param name="val">Floating point number to convert to a string</param>
            <returns>A terse string representation of the input number</returns>
        </member>
        <member name="M:libsecondlife.Helpers.FloatToByte(System.Single,System.Single,System.Single)">
            <summary>
            Convert a float value to a byte given a minimum and maximum range
            </summary>
            <param name="val">Value to convert to a byte</param>
            <param name="lower">Minimum value range</param>
            <param name="upper">Maximum value range</param>
            <returns>A single byte representing the original float value</returns>
        </member>
        <member name="M:libsecondlife.Helpers.ByteToFloat(System.Byte[],System.Int32,System.Single,System.Single)">
            <summary>
            Convert a byte to a float value given a minimum and maximum range
            </summary>
            <param name="bytes">Byte array to get the byte from</param>
            <param name="pos">Position in the byte array the desired byte is at</param>
            <param name="lower">Minimum value range</param>
            <param name="upper">Maximum value range</param>
            <returns>A float value inclusively between lower and upper</returns>
        </member>
        <member name="M:libsecondlife.Helpers.ByteToFloat(System.Byte,System.Single,System.Single)">
            <summary>
            Convert a byte to a float value given a minimum and maximum range
            </summary>
            <param name="val">Byte to convert to a float value</param>
            <param name="lower">Minimum value range</param>
            <param name="upper">Maximum value range</param>
            <returns>A float value inclusively between lower and upper</returns>
        </member>
        <member name="M:libsecondlife.Helpers.UInt16ToFloat(System.Byte[],System.Int32,System.Single,System.Single)">
            <summary>
            </summary>
            <param name="bytes">
            </param>
            <param name="pos">
            </param>
            <param name="lower">
            </param>
            <param name="upper">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.Helpers.UInt16ToFloat(System.UInt16,System.Single,System.Single)">
            <summary>
            </summary>
            <param name="val">
            </param>
            <param name="lower">
            </param>
            <param name="upper">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.Helpers.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamp a given value between a range
            </summary>
            <param name="val">Value to clamp</param>
            <param name="lower">Minimum allowable value</param>
            <param name="upper">Maximum allowable value</param>
            <returns>A value inclusively between lower and upper</returns>
        </member>
        <member name="M:libsecondlife.Helpers.FieldToUTF8String(System.Byte[])">
            <summary>
            Convert a variable length UTF8 byte array to a string
            </summary>
            <param name="bytes">The UTF8 encoded byte array to convert</param>
            <returns>The decoded string</returns>
        </member>
        <member name="M:libsecondlife.Helpers.FieldToString(System.Text.StringBuilder,System.Byte[])">
            <summary>
            Convert a variable length field (byte array) to a string
            </summary>
            <remarks>If the byte array has unprintable characters in it, a
            hex dump will be written instead</remarks>
            <param name="output">The StringBuilder object to write to</param>
            <param name="bytes">The byte array to convert to a string</param>
        </member>
        <member name="M:libsecondlife.Helpers.FieldToString(System.Text.StringBuilder,System.Byte[],System.String)">
            <summary>
            Convert a variable length field (byte array) to a string, with a
            field name prepended to each line of the output
            </summary>
            <remarks>If the byte array has unprintable characters in it, a
            hex dump will be written instead</remarks>
            <param name="output">The StringBuilder object to write to</param>
            <param name="bytes">The byte array to convert to a string</param>
            <param name="fieldName">A field name to prepend to each line of output</param>
        </member>
        <member name="M:libsecondlife.Helpers.FieldToHexString(System.Byte[],System.String)">
            <summary>
            Converts a byte array to a string containing hexadecimal characters
            </summary>
            <param name="bytes">The byte array to convert to a string</param>
            <param name="fieldName">The name of the field to prepend to each
            line of the string</param>
            <returns>A string containing hexadecimal characters on multiple
            lines. Each line is prepended with the field name</returns>
        </member>
        <member name="M:libsecondlife.Helpers.StringToField(System.String)">
            <summary>
            Convert a string to a UTF8 encoded byte array
            </summary>
            <param name="str">The string to convert</param>
            <returns>A null-terminated UTF8 byte array</returns>
        </member>
        <member name="M:libsecondlife.Helpers.GetUnixTime">
            <summary>
            Gets a unix timestamp for the current time
            </summary>
            <returns>An unsigned integer representing a unix timestamp for now</returns>
        </member>
        <member name="M:libsecondlife.Helpers.UnixTimeToDateTime(System.UInt32)">
            <summary>
            Convert a UNIX timestamp to a native DateTime object
            </summary>
            <param name="timestamp">An unsigned integer representing a UNIX
            timestamp</param>
            <returns>A DateTime object containing the same time specified in
            the given timestamp</returns>
        </member>
        <member name="M:libsecondlife.Helpers.DateTimeToUnixTime(System.DateTime)">
            <summary>
            Convert a native DateTime object to a UNIX timestamp
            </summary>
            <param name="time">A DateTime object you want to convert to a
            timestamp</param>
            <returns>An unsigned integer representing a UNIX timestamp</returns>
        </member>
        <member name="M:libsecondlife.Helpers.Axis2Rot(libsecondlife.LLVector3)">
            <summary>
            Converts a vector style rotation to a quaternion
            </summary>
            <param name="a">Axis rotation, such as 0,0,90 for 90 degrees to the right</param>
            <returns>A quaternion representing the axes of the supplied vector</returns>
        </member>
        <member name="M:libsecondlife.Helpers.VecDist(libsecondlife.LLVector3,libsecondlife.LLVector3)">
            <summary>
            Calculates the distance between two vectors
            </summary>
        </member>
        <member name="M:libsecondlife.Helpers.VecMag(libsecondlife.LLVector3)">
            <summary>
            Calculate the magnitude of the supplied vector
            </summary>
        </member>
        <member name="M:libsecondlife.Helpers.RotMag(libsecondlife.LLQuaternion)">
            <summary>
            Calculate the magnitude of the supplied quaternion
            </summary>
        </member>
        <member name="M:libsecondlife.Helpers.VecNorm(libsecondlife.LLVector3)">
            <summary>
            Return the supplied vector in normalized form
            </summary>
        </member>
        <member name="M:libsecondlife.Helpers.RotBetween(libsecondlife.LLVector3,libsecondlife.LLVector3)">
            <summary>
            Calculate the rotation between two vectors
            </summary>
            <param name="a">Directional vector, such as 1,0,0 for the forward face</param>
            <param name="b">Target vector - normalize first with VecNorm</param>
        </member>
        <member name="M:libsecondlife.Helpers.ZeroDecode(System.Byte[],System.Int32,System.Byte[])">
            <summary>
            Decode a zerocoded byte array, used to decompress packets marked
            with the zerocoded flag
            </summary>
            <remarks>Any time a zero is encountered, the next byte is a count
            of how many zeroes to expand. One zero is encoded with 0x00 0x01,
            two zeroes is 0x00 0x02, three zeroes is 0x00 0x03, etc. The
            first four bytes are copied directly to the output buffer.
            </remarks>
            <param name="src">The byte array to decode</param>
            <param name="srclen">The length of the byte array to decode. This
            would be the length of the packet up to (but not including) any
            appended ACKs</param>
            <param name="dest">The output byte array to decode to</param>
            <returns>The length of the output buffer</returns>
        </member>
        <member name="M:libsecondlife.Helpers.ZeroDecodeCommand(System.Byte[],System.Byte[])">
            <summary>
            Decode enough of a byte array to get the packet ID.  Data before and
            after the packet ID is undefined.
            </summary>
            <param name="src">The byte array to decode</param>
            <param name="dest">The output byte array to encode to</param>
        </member>
        <member name="M:libsecondlife.Helpers.ZeroEncode(System.Byte[],System.Int32,System.Byte[])">
            <summary>
            Encode a byte array with zerocoding. Used to compress packets marked
            with the zerocoded flag. Any zeroes in the array are compressed down
            to a single zero byte followed by a count of how many zeroes to expand
            out. A single zero becomes 0x00 0x01, two zeroes becomes 0x00 0x02,
            three zeroes becomes 0x00 0x03, etc. The first four bytes are copied
            directly to the output buffer.
            </summary>
            <param name="src">The byte array to encode</param>
            <param name="srclen">The length of the byte array to encode</param>
            <param name="dest">The output byte array to encode to</param>
            <returns>The length of the output buffer</returns>
        </member>
        <member name="M:libsecondlife.Helpers.InventoryCRC(System.Int32,System.Byte,System.SByte,System.SByte,libsecondlife.LLUUID,libsecondlife.LLUUID,System.Int32,libsecondlife.LLUUID,libsecondlife.LLUUID,libsecondlife.LLUUID,libsecondlife.LLUUID,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Calculates the CRC (cyclic redundancy check) needed to upload inventory.
            </summary>
            <param name="creationDate">Creation date</param>
            <param name="saleType">Sale type</param>
            <param name="invType">Inventory type</param>
            <param name="type">Type</param>
            <param name="assetID">Asset ID</param>
            <param name="groupID">Group ID</param>
            <param name="salePrice">Sale price</param>
            <param name="ownerID">Owner ID</param>
            <param name="creatorID">Creator ID</param>
            <param name="itemID">Item ID</param>
            <param name="folderID">Folder ID</param>
            <param name="everyoneMask">Everyone mask (permissions)</param>
            <param name="flags">Flags</param>
            <param name="nextOwnerMask">Next owner mask (permissions)</param>
            <param name="groupMask">Group mask (permissions)</param>
            <param name="ownerMask">Owner mask (permisions)</param>
            <returns>The calculated CRC</returns>
        </member>
        <member name="M:libsecondlife.Helpers.MD5(System.String)">
            <summary>
            Calculate the MD5 hash of a given string
            </summary>
            <param name="password">The password to hash</param>
            <returns>An MD5 hash in string format, with $1$ prepended</returns>
        </member>
        <member name="M:libsecondlife.Helpers.GetResourceStream(System.String)">
            <summary>
            Attempts to load a file embedded in the assembly
            </summary>
            <param name="resourceName">The filename of the resource to load</param>
            <returns>A Stream for the requested file, or null if the resource
            was not successfully loaded</returns>
        </member>
        <member name="M:libsecondlife.Helpers.GetResourceStream(System.String,System.String)">
            <summary>
            Attempts to load a file either embedded in the assembly or found in
            a given search path
            </summary>
            <param name="resourceName">The filename of the resource to load</param>
            <param name="searchPath">An optional path that will be searched if
            the asset is not found embedded in the assembly</param>
            <returns>A Stream for the requested file, or null if the resource
            was not successfully loaded</returns>
        </member>
        <member name="T:libsecondlife.HttpRequestState">
            <summary>
            Stores the current state of an HTTP request
            </summary>
        </member>
        <member name="F:libsecondlife.HttpBase.BUFFER_SIZE">
            <summary>Buffer size for reading incoming responses</summary>
        </member>
        <member name="F:libsecondlife.HttpBase.HTTP_TIMEOUT">
            <summary>A default timeout for HTTP connections</summary>
        </member>
        <member name="T:libsecondlife.Inventory">
            <summary>
            Responsible for maintaining inventory structure. Inventory constructs nodes
            and manages node children as is necessary to maintain a coherant hirarchy.
            Other classes should not manipulate or create InventoryNodes explicitly. When
            A node's parent changes (when a folder is moved, for example) simply pass
            Inventory the updated InventoryFolder and it will make the appropriate changes
            to its internal representation.
            </summary>
        </member>
        <member name="T:libsecondlife.Inventory.InventoryObjectUpdated">
            <summary>
            Delegate to use for the OnInventoryObjectUpdated event.
            </summary>
            <param name="oldObject">The state of the InventoryObject before the update occured.</param>
            <param name="newObject">The state of the InventoryObject after the update occured.</param>
        </member>
        <member name="T:libsecondlife.Inventory.InventoryObjectRemoved">
            <summary>
            Delegate to use for the OnInventoryObjectRemoved event.
            </summary>
            <param name="obj">The InventoryObject that was removed.</param>
        </member>
        <member name="F:libsecondlife.Inventory.RootFolder">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Inventory.RootNode">
            <summary>
            </summary>
        </member>
        <member name="E:libsecondlife.Inventory.OnInventoryObjectUpdated">
            <summary>
            Called when an InventoryObject's state is changed.
            </summary>
        </member>
        <member name="E:libsecondlife.Inventory.OnInventoryObjectRemoved">
            <summary>
            Called when an item or folder is removed from inventory.
            </summary>
        </member>
        <member name="P:libsecondlife.Inventory.Item(libsecondlife.LLUUID)">
            <summary>
            By using the bracket operator on this class, the program can get the
            InventoryObject designated by the specified uuid. If the value for the corresponding
            UUID is null, the call is equivelant to a call to <code>RemoveNodeFor(this[uuid])</code>.
            If the value is non-null, it is equivelant to a call to <code>UpdateNodeFor(value)</code>,
            the uuid parameter is ignored.
            </summary>
            <param name="uuid">The UUID of the InventoryObject to get or set, ignored if set to non-null value.</param>
            <returns>The InventoryObject corresponding to <code>uuid</code>.</returns>
        </member>
        <member name="M:libsecondlife.Inventory.GetContents(libsecondlife.LLUUID)">
            <summary>
            Returns the contents of the specified folder.
            </summary>
            <param name="folder">A folder's UUID.</param>
            <returns>The contents of the folder corresponding to <code>folder</code>.</returns>
            <exception cref="T:libsecondlife.InventoryException">When <code>folder</code> does not exist in the inventory.</exception>
        </member>
        <member name="M:libsecondlife.Inventory.UpdateNodeFor(libsecondlife.InventoryBase)">
            <summary>
            Updates the state of the InventoryNode and inventory data structure that
            is responsible for the InventoryObject. If the item was previously not added to inventory,
            it adds the item, and updates structure accordingly. If it was, it updates the
            InventoryNode, changing the parent node if <code>item.parentUUID</code> does
            not match <code>node.Parent.Data.UUID</code>.
            You can not set the inventory root folder using this method.
            </summary>
            <param name="item">The InventoryObject to store.</param>
        </member>
        <member name="M:libsecondlife.Inventory.RemoveNodeFor(libsecondlife.InventoryBase)">
            <summary>
            Removes the InventoryObject and all related node data from Inventory.
            </summary>
            <param name="item">The InventoryObject to remove.</param>
        </member>
        <member name="M:libsecondlife.Inventory.Contains(libsecondlife.LLUUID)">
            <summary>
            Used to find out if Inventory contains the InventoryObject
            specified by <code>uuid</code>.
            </summary>
            <param name="uuid">The LLUUID to check.</param>
            <returns>true if inventory contains uuid, false otherwise</returns>
        </member>
        <member name="T:libsecondlife.InventoryException">
            <summary>
            A rudimentary Exception subclass, so exceptions thrown by the Inventory class
            can be easily identified and caught.
            </summary>
        </member>
        <member name="F:libsecondlife.InventorySortOrder.ByName">
            <summary>Sort by name</summary>
        </member>
        <member name="F:libsecondlife.InventorySortOrder.ByDate">
            <summary>Sort by date</summary>
        </member>
        <member name="F:libsecondlife.InventorySortOrder.FoldersByName">
            <summary>Sort folders by name, regardless of whether items are
            sorted by name or date</summary>
        </member>
        <member name="F:libsecondlife.InventorySortOrder.SystemFoldersToTop">
            <summary>Place system folders at the top</summary>
        </member>
        <member name="F:libsecondlife.InventoryItem.CreationDate">
            <summary>Time and date this inventory item was created, stored as
            UTC (Coordinated Universal Time)</summary>
        </member>
        <member name="F:libsecondlife.InventoryManager.NewFolderNames">
            <summary>Partial mapping of AssetTypes to folder names</summary>
        </member>
        <member name="M:libsecondlife.InventoryManager.BeginFindObjects(libsecondlife.LLUUID,System.String,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Starts a search for any items whose names match the regex within
            the spacified folder.
            </summary>
            <remarks>Use the AsyncWaitHandle of the returned value to run the search synchronously.</remarks>
            <param name="baseFolder">The UUID of the folder to look in.</param>
            <param name="regex">The regex that results match.</param>
            <param name="recurse">Recurse into and search inside subfolders of baseFolder.</param>
            <param name="refresh">Re-download the contents of baseFolder (and its subdirectories, if recursing)</param>
            <param name="callback">The AsyncCallback to call when the search is complete.</param>
            <param name="asyncState">An object that will be passed back to the caller.</param>
            <returns>An IAsyncResult that represents this find operation, and can be passed to EndFindObjects.</returns>
        </member>
        <member name="M:libsecondlife.InventoryManager.FindFolderForType(libsecondlife.AssetType)">
            <summary>
            Returns the UUID of the folder (category) that defaults to
            containing 'type'. The folder is not necessarily only for that
            type
            </summary>
            <remarks>This will create a new inventory folder on the fly if
            one does not exist</remarks>
            <param name="type">
            </param>
            <returns>The UUID of the desired or newly created folder, or
            LLUUID.Zero on failure</returns>
        </member>
        <member name="M:libsecondlife.InventoryManager.FetchInventory(System.Collections.Generic.List{libsecondlife.LLUUID})">
            <summary>
            If you have a list of inventory item IDs (from a cached inventory, perhaps)
            you can use this function to request an update from the server for those items.
            </summary>
            <param name="itemIDs">A list of LLUUIDs of the items to request.</param>
        </member>
        <member name="M:libsecondlife.InventoryManager.UpdateCreateInventoryItemHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            UpdateCreateInventoryItem packets are received when a new inventory item
            is created. This may occur when an object that's rezzed in world is
            taken into inventory, when an item is created using the CreateInventoryItem
            packet, or when an object is purchased.
            </summary>
        </member>
        <member name="M:libsecondlife.InventoryNode.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.InventoryNode.#ctor(libsecondlife.InventoryBase)">
            <summary>
            </summary>
            <param name="data">
            </param>
        </member>
        <member name="P:libsecondlife.InventoryNode.Data">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.InventoryNode.Parent">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.InventoryNode.Nodes">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.InventoryNode.ToString">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:libsecondlife.LLObject">
            <summary>
            Base class for primitives and avatars
            </summary>
        </member>
        <member name="T:libsecondlife.LLObject.ObjectFlags">
            <summary>
            Primary parameters for primitives such as Physics Enabled or Phantom
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.None">
            <summary>None of the primary flags are enabled</summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.Physics">
            <summary>Whether physics are enabled for this object</summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.CreateSelected">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.ObjectModify">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.ObjectCopy">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.ObjectAnyOwner">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.ObjectYouOwner">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.Scripted">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.Touch">
            <summary>Whether this object contains an active touch script</summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.ObjectMove">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.Money">
            <summary>Whether this object can receive payments</summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.Phantom">
            <summary>Whether this object is phantom (no collisions)</summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.InventoryEmpty">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.JointHinge">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.JointP2P">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.JointLP2P">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.JointWheel">
            <summary>Deprecated</summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.AllowInventoryDrop">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.ObjectTransfer">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.ObjectGroupOwned">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.ObjectYouOfficer">
            <summary>Deprecated</summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.CameraDecoupled">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.AnimSource">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.CameraSource">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.CastShadows">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.ObjectOwnerModify">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.TemporaryOnRez">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.Temporary">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectFlags.ZlibCompressed">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.LLObject.MaterialType">
            <summary>
            Material type for a primitive
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.MaterialType.Stone">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.MaterialType.Metal">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.MaterialType.Glass">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.MaterialType.Wood">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.MaterialType.Flesh">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.MaterialType.Plastic">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.MaterialType.Rubber">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.MaterialType.Light">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.LLObject.ObjectData">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectData.PathTwistBegin">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectData.PathEnd">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectData.ProfileBegin">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectData.PathRadiusOffset">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectData.PathSkew">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectData.ProfileCurve">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectData.PathScaleX">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectData.PathScaleY">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectData.Material">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectData.PathShearX">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectData.PathShearY">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectData.PathTaperX">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectData.PathTaperY">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectData.ProfileEnd">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectData.PathBegin">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectData.PathCurve">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectData.PathTwist">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectData.ProfileHollow">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectData.PathRevolutions">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectData.State">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectData.PCode">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.LLObject.ObjectProperties">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.ObjectID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.CreatorID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.OwnerID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.GroupID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.CreationDate">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.BaseMask">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.OwnerMask">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.GroupMask">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.EveryoneMask">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.NextOwnerMask">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.OwnershipCost">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.SaleType">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.SalePrice">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.AggregatePerms">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.AggregatePermTextures">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.AggregatePermTexturesOwner">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.Category">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.InventorySerial">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.ItemID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.FolderID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.FromTaskID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.LastOwnerID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.Name">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.Description">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.TouchName">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.SitName">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectProperties.TextureIDs">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.LLObject.ObjectPropertiesFamily">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.LLObject.ObjectPropertiesFamily.RequestFlagsType">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectPropertiesFamily.RequestFlagsType.None">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectPropertiesFamily.RequestFlagsType.BugReportRequest">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectPropertiesFamily.RequestFlagsType.ComplaintReportRequest">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectPropertiesFamily.RequestFlags">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectPropertiesFamily.ObjectID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectPropertiesFamily.OwnerID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectPropertiesFamily.GroupID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectPropertiesFamily.BaseMask">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectPropertiesFamily.OwnerMask">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectPropertiesFamily.GroupMask">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectPropertiesFamily.EveryoneMask">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectPropertiesFamily.NextOwnerMask">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectPropertiesFamily.OwnershipCost">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectPropertiesFamily.SaleType">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectPropertiesFamily.SalePrice">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectPropertiesFamily.Category">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectPropertiesFamily.LastOwnerID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectPropertiesFamily.Name">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ObjectPropertiesFamily.Description">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.LLObject.Bumpiness">
            <summary>
            The type of bump-mapping applied to a face
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Bumpiness.None">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Bumpiness.Brightness">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Bumpiness.Darkness">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Bumpiness.Woodgrain">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Bumpiness.Bark">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Bumpiness.Bricks">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Bumpiness.Checker">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Bumpiness.Concrete">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Bumpiness.Crustytile">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Bumpiness.Cutstone">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Bumpiness.Discs">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Bumpiness.Gravel">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Bumpiness.Petridish">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Bumpiness.Siding">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Bumpiness.Stonetile">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Bumpiness.Stucco">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Bumpiness.Suction">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Bumpiness.Weave">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.LLObject.Shininess">
            <summary>
            The level of shininess applied to a face
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Shininess.None">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Shininess.Low">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Shininess.Medium">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Shininess.High">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.LLObject.Mapping">
            <summary>
            The texture mapping style used for a face
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Mapping.Default">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Mapping.Planar">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.LLObject.TextureAttributes">
            <summary>
            Flags in the TextureEntry block that describe which properties are
            set
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.TextureAttributes.None">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.TextureAttributes.TextureID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.TextureAttributes.RGBA">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.TextureAttributes.RepeatU">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.TextureAttributes.RepeatV">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.TextureAttributes.OffsetU">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.TextureAttributes.OffsetV">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.TextureAttributes.Rotation">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.TextureAttributes.Material">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.TextureAttributes.Media">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.TextureAttributes.All">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.LLObject.TextureEntry2">
            <summary>
            Represents all of the texturable faces for an object
            </summary>
            <remarks>Objects in Second Life have infinite faces, with each face
            using the properties of the default face unless set otherwise. So if
            you have a TextureEntry with a default texture uuid of X, and face 72
            has a texture UUID of Y, every face would be textured with X except for
            face 72 that uses Y. In practice however, primitives utilize a maximum
            of nine faces and avatars utilize</remarks>
        </member>
        <member name="M:libsecondlife.LLObject.TextureEntry2.#ctor(libsecondlife.LLUUID)">
            <summary>
            Default constructor, DefaultTexture will be null
            </summary>
            <summary>
            Constructor that takes a default texture UUID
            </summary>
            <param name="defaultTextureID">Texture UUID to use as the default texture</param>
        </member>
        <member name="M:libsecondlife.LLObject.TextureEntry2.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Constructor that creates the TextureEntry class from a byte array
            </summary>
            <param name="data">Byte array containing the TextureEntry field</param>
            <param name="pos">Starting position of the TextureEntry field in
            the byte array</param>
            <param name="length">Length of the TextureEntry field, in bytes</param>
        </member>
        <member name="F:libsecondlife.LLObject.TextureEntry2.DefaultTexture">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.TextureEntry2.FaceTextures">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.LLObject.TextureEntry2.CreateFace(System.UInt32)">
            <summary>
            This will either create a new face if a custom face for the given
            index is not defined, or return the custom face for that index if
            it already exists
            </summary>
            <param name="index">The index number of the face to create or
            retrieve</param>
            <returns>A TextureEntryFace containing all the properties for that
            face</returns>
        </member>
        <member name="M:libsecondlife.LLObject.TextureEntry2.ToBytes">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLObject.TextureEntry2.ToString">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:libsecondlife.LLObject.TextureEntry">
            <summary>
            Represents all of the texturable faces for an object
            </summary>
            <remarks>Objects in Second Life have infinite faces, with each face
            using the properties of the default face unless set otherwise. So if
            you have a TextureEntry with a default texture uuid of X, and face 72
            has a texture UUID of Y, every face would be textured with X except for
            face 72 that uses Y. In practice however, primitives utilize a maximum
            of nine faces and avatars utilize</remarks>
        </member>
        <member name="M:libsecondlife.LLObject.TextureEntry.#ctor">
            <summary>
            Default constructor, DefaultTexture will be null
            </summary>
        </member>
        <member name="M:libsecondlife.LLObject.TextureEntry.#ctor(libsecondlife.LLUUID)">
            <summary>
            Constructor that takes a default texture UUID
            </summary>
            <param name="defaultTextureID">Texture UUID to use as the default texture</param>
        </member>
        <member name="M:libsecondlife.LLObject.TextureEntry.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Constructor that creates the TextureEntry class from a byte array
            </summary>
            <param name="data">Byte array containing the TextureEntry field</param>
            <param name="pos">Starting position of the TextureEntry field in
            the byte array</param>
            <param name="length">Length of the TextureEntry field, in bytes</param>
        </member>
        <member name="F:libsecondlife.LLObject.TextureEntry.DefaultTexture">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.TextureEntry.FaceTextures">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.LLObject.TextureEntry.GetFace(System.UInt32)">
            <summary>
            Returns the TextureEntryFace that is applied to the specified
            index. If custom attributes are not set for this face that
            would be the default texture for this TextureEntry. Do not
            modify the returned TextureEntryFace, it will have undefined
            results. Use CreateFace() to get a TextureEntryFace that is
            safe for writing
            </summary>
            <param name="index">The index number of the face to retrieve</param>
            <returns>A TextureEntryFace containing all the properties for that
            face, suitable for read-only operations</returns>
        </member>
        <member name="M:libsecondlife.LLObject.TextureEntry.FaceExists(System.UInt32)">
            <summary>
            Check whether a custom face is defined for a particular index
            </summary>
            <param name="index">The index to check whether a custom face is
            defined for</param>
            <returns>True if this face has it's own TextureEntryFace, otherwise
            false</returns>
        </member>
        <member name="M:libsecondlife.LLObject.TextureEntry.CreateFace(System.UInt32)">
            <summary>
            This will either create a new face if a custom face for the given
            index is not defined, or return the custom face for that index if
            it already exists
            </summary>
            <param name="index">The index number of the face to create or
            retrieve</param>
            <returns>A TextureEntryFace containing all the properties for that
            face</returns>
        </member>
        <member name="M:libsecondlife.LLObject.TextureEntry.ToBytes">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:libsecondlife.LLObject.TextureEntryFace">
            <summary>
            A single textured face. Don't instantiate this class yourself, use the
            methods in TextureEntry
            </summary>
        </member>
        <member name="M:libsecondlife.LLObject.TextureEntryFace.#ctor(libsecondlife.LLObject.TextureEntryFace)">
            <summary>
            Contains the definition for individual faces
            </summary>
            <param name="defaultTexture">
            </param>
        </member>
        <member name="P:libsecondlife.LLObject.TextureEntryFace.RGBA">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.LLObject.TextureEntryFace.RepeatU">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.LLObject.TextureEntryFace.RepeatV">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.LLObject.TextureEntryFace.OffsetU">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.LLObject.TextureEntryFace.OffsetV">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.LLObject.TextureEntryFace.Rotation">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.LLObject.TextureEntryFace.Bump">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.LLObject.TextureEntryFace.MediaFlags">
            <summary>In the future this will specify whether a webpage is
            attached to this face</summary>
        </member>
        <member name="P:libsecondlife.LLObject.TextureEntryFace.TextureID">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.LLObject.TextureEntryFace.ToString">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="F:libsecondlife.LLObject.ID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.GroupID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.LocalID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.ParentID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.RegionHandle">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Flags">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.GenericData">
            <summary>Unknown</summary>
        </member>
        <member name="F:libsecondlife.LLObject.Position">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Scale">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Rotation">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Velocity">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.AngularVelocity">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Acceleration">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.CollisionPlane">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Textures">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Properties">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.PropertiesFamily">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.NameValues">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLObject.Data">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.LLObject.Equals(System.Object)">
            <summary>
            </summary>
            <param name="obj">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLObject.GetHashCode">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLObject.PathScaleByte(System.Single)">
            <summary>
            </summary>
            <param name="pathScale">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLObject.PathScaleFloat(System.Byte)">
            <summary>
            </summary>
            <param name="pathScale">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLObject.PathShearByte(System.Single)">
            <summary>
            </summary>
            <param name="pathShear">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLObject.PathShearFloat(System.Byte)">
            <summary>
            </summary>
            <param name="pathShear">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLObject.ProfileBeginUInt16(System.Single)">
            <summary>
            </summary>
            <param name="profileBegin">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLObject.ProfileBeginFloat(System.UInt16)">
            <summary>
            </summary>
            <param name="profileBegin">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLObject.ProfileEndUInt16(System.Single)">
            <summary>
            </summary>
            <param name="profileEnd">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLObject.ProfileEndFloat(System.UInt16)">
            <summary>
            </summary>
            <param name="profileEnd">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLObject.ProfileHollowUInt16(System.Single)">
            <summary>
            </summary>
            <param name="profileHollow">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLObject.ProfileHollowFloat(System.UInt16)">
            <summary>
            </summary>
            <param name="profileHollow">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLObject.PathBeginUInt16(System.Single)">
            <summary>
            </summary>
            <param name="pathBegin">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLObject.PathBeginFloat(System.UInt16)">
            <summary>
            </summary>
            <param name="pathBegin">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLObject.PathEndUInt16(System.Single)">
            <summary>
            </summary>
            <param name="pathEnd">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLObject.PathEndFloat(System.UInt16)">
            <summary>
            </summary>
            <param name="pathEnd">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLObject.PathRadiusOffsetByte(System.Single)">
            <summary>
            </summary>
            <param name="pathRadiusOffset">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLObject.PathRadiusOffsetFloat(System.SByte)">
            <summary>
            </summary>
            <param name="pathRadiusOffset">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLObject.PathRevolutionsByte(System.Single)">
            <summary>
            </summary>
            <param name="pathRevolutions">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLObject.PathRevolutionsFloat(System.Byte)">
            <summary>
            </summary>
            <param name="pathRevolutions">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLObject.PathSkewByte(System.Single)">
            <summary>
            </summary>
            <param name="pathSkew">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLObject.PathSkewFloat(System.SByte)">
            <summary>
            </summary>
            <param name="pathSkew">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLObject.PathTaperByte(System.Single)">
            <summary>
            </summary>
            <param name="pathTaper">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLObject.PathTaperFloat(System.SByte)">
            <summary>
            </summary>
            <param name="pathTaper">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:libsecondlife.LLSD">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.LLSD.LLSDParseException">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.LLSD.LLSDSerializeException">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.LLSD.LLSDDeserialize(System.Byte[])">
            <summary>
            </summary>
            <param name="b">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLSD.LLSDDeserialize(System.IO.Stream)">
            <summary>
            </summary>
            <param name="st">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLSD.LLSDSerialize(System.Object)">
            <summary>
            </summary>
            <param name="obj">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLSD.LLSDWriteOne(System.Xml.XmlTextWriter,System.Object)">
            <summary>
            </summary>
            <param name="writer">
            </param>
            <param name="obj">
            </param>
        </member>
        <member name="M:libsecondlife.LLSD.LLSDParseOne(System.Xml.XmlTextReader)">
            <summary>
            </summary>
            <param name="reader">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLSD.LLSDParseMap(System.Xml.XmlTextReader)">
            <summary>
            </summary>
            <param name="reader">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLSD.LLSDParseArray(System.Xml.XmlTextReader)">
            <summary>
            </summary>
            <param name="reader">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLSD.GetSpaces(System.Int32)">
            <summary>
            </summary>
            <param name="count">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLSD.LLSDDump(System.Object,System.Int32)">
            <summary>
            </summary>
            <param name="obj">
            </param>
            <param name="indent">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLSD.SkipWS(System.Xml.XmlTextReader)">
            <summary>
            </summary>
            <param name="reader">
            </param>
        </member>
        <member name="T:libsecondlife.NetworkManager">
            <summary>
            NetworkManager is responsible for managing the network layer of
            libsecondlife. It tracks all the server connections, serializes
            outgoing traffic and deserializes incoming traffic, and provides
            instances of delegates for network-related events.
            </summary>
        </member>
        <member name="M:libsecondlife.NetworkManager.#ctor(libsecondlife.SecondLife)">
            <summary>
            Default constructor
            </summary>
            <param name="client">Reference to the SecondLife client</param>
        </member>
        <member name="T:libsecondlife.NetworkManager.LoginParams">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.LoginParams.URI">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.LoginParams.Timeout">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.LoginParams.MethodName">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.LoginParams.FirstName">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.LoginParams.LastName">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.LoginParams.Password">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.LoginParams.Start">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.LoginParams.Channel">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.LoginParams.Version">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.LoginParams.Platform">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.LoginParams.MAC">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.LoginParams.ViewerDigest">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.LoginParams.UserAgent">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.LoginParams.Author">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.LoginParams.Options">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.NetworkManager.LoginStatus">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.LoginStatus.Failed">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.LoginStatus.None">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.LoginStatus.ConnectingToLogin">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.LoginStatus.ReadingResponse">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.LoginStatus.ConnectingToSim">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.LoginStatus.Redirecting">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.LoginStatus.Success">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.NetworkManager.IncomingPacket">
            <summary>
            Holds a simulator reference and a packet, these structs are put in
            the packet inbox for decoding
            </summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.IncomingPacket.Simulator">
            <summary>Reference to the simulator that this packet came from</summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.IncomingPacket.Packet">
            <summary>The packet that needs to be processed</summary>
        </member>
        <member name="T:libsecondlife.NetworkManager.DisconnectType">
            <summary>
            Explains why a simulator or the grid disconnected from us
            </summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.DisconnectType.ClientInitiated">
            <summary>The client requested the logout or simulator disconnect</summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.DisconnectType.ServerInitiated">
            <summary>The server notified us that it is disconnecting</summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.DisconnectType.NetworkTimeout">
            <summary>Either a socket was closed or network traffic timed out</summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.DisconnectType.SimShutdown">
            <summary>The last active simulator shut down</summary>
        </member>
        <member name="T:libsecondlife.NetworkManager.LoginReplyCallback">
            <summary>
            </summary>
            <param name="loginSuccess">
            </param>
            <param name="redirect">
            </param>
            <param name="simIP">
            </param>
            <param name="simPort">
            </param>
            <param name="regionX">
            </param>
            <param name="regionY">
            </param>
            <param name="reason">
            </param>
            <param name="message">
            </param>
        </member>
        <member name="T:libsecondlife.NetworkManager.LoginCallback">
            <summary>
            </summary>
            <param name="login">
            </param>
            <param name="message">
            </param>
        </member>
        <member name="T:libsecondlife.NetworkManager.LoginResponseCallback">
            <summary>
            </summary>
            <param name="loginSuccess">
            </param>
            <param name="redirect">
            </param>
            <param name="replyData">
            </param>
        </member>
        <member name="T:libsecondlife.NetworkManager.PacketCallback">
            <summary>
            Coupled with RegisterCallback(), this is triggered whenever a packet
            of a registered type is received
            </summary>
            <param name="packet">
            </param>
            <param name="simulator">
            </param>
        </member>
        <member name="T:libsecondlife.NetworkManager.ConnectedCallback">
            <summary>
            Assigned by the OnConnected event. Raised when login was a success
            </summary>
            <param name="sender">Reference to the SecondLife class that called the event</param>
        </member>
        <member name="T:libsecondlife.NetworkManager.LogoutCallback">
            <summary>
            Assigned by the OnLogoutReply callback. Raised upone receipt of a LogoutReply packet during logout process.
            </summary>
            <param name="inventoryItems">
            </param>
        </member>
        <member name="T:libsecondlife.NetworkManager.SimConnectedCallback">
            <summary>
            Triggered when a new connection to a simulator is established
            </summary>
            <param name="simulator">The simulator that is being connected to</param>
        </member>
        <member name="T:libsecondlife.NetworkManager.SimDisconnectedCallback">
            <summary>
            Triggered when a simulator other than the simulator that is currently
            being occupied disconnects for whatever reason
            </summary>
            <param name="simulator">The simulator that disconnected, which will become a null
            reference after the callback is finished</param>
            <param name="reason">Enumeration explaining the reason for the disconnect</param>
        </member>
        <member name="T:libsecondlife.NetworkManager.DisconnectedCallback">
            <summary>
            Triggered when we are logged out of the grid due to a simulator request,
            client request, network timeout, or any other cause
            </summary>
            <param name="reason">Enumeration explaining the reason for the disconnect</param>
            <param name="message">If we were logged out by the simulator, this
            is a message explaining why</param>
        </member>
        <member name="T:libsecondlife.NetworkManager.CurrentSimChangedCallback">
            <summary>
            Triggered when CurrentSim changes
            </summary>
            <param name="PreviousSimulator">A reference to the old value of CurrentSim</param>
        </member>
        <member name="F:libsecondlife.NetworkManager.LoginSeedCapability">
            <summary>Seed CAPS URL returned from the login server</summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.AgentID">
            <summary>The permanent UUID for the logged in avatar</summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.SessionID">
            <summary>Temporary UUID assigned to this session, used for
            verifying our identity in packets</summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.SecureSessionID">
            <summary>Shared secret UUID that is never sent over the wire</summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.CircuitCode">
            <summary>Uniquely identifier associated with our connections to
            simulators</summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.CurrentSim">
            <summary>The simulator that the logged in avatar is currently
            occupying</summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.Simulators">
            <summary>All of the simulators we are currently connected to</summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.CapsEvents">
            <summary>Handlers for incoming capability events</summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.PacketEvents">
            <summary>Handlers for incoming packets</summary>
        </member>
        <member name="F:libsecondlife.NetworkManager.PacketInbox">
            <summary>Incoming packets that are awaiting handling</summary>
        </member>
        <member name="E:libsecondlife.NetworkManager.OnLoginReply">
            <summary>Called when a reply is received from the login server, the
            login sequence will block until this event returns</summary>
        </member>
        <member name="E:libsecondlife.NetworkManager.OnLogin">
            <summary>Called any time the login status changes, will eventually
            return LoginStatus.Success or LoginStatus.Failure</summary>
        </member>
        <member name="E:libsecondlife.NetworkManager.OnLoginResponse">
            <summary>Called when a reply is received from the login server, the
            login sequence will block until this event returns</summary>
        </member>
        <member name="E:libsecondlife.NetworkManager.OnConnected">
            <summary>
            Event raised when the client was able to connected successfully.
            </summary>
            <remarks>Uses the ConnectedCallback delegate.</remarks>
        </member>
        <member name="E:libsecondlife.NetworkManager.OnLogoutReply">
            <summary>
            Event raised when a logout is confirmed by the simulator
            </summary>
        </member>
        <member name="E:libsecondlife.NetworkManager.OnSimConnected">
            <summary>
            Event raised when a connection to a simulator is established
            </summary>
        </member>
        <member name="E:libsecondlife.NetworkManager.OnSimDisconnected">
            <summary>
            An event for the connection to a simulator other than the currently
            occupied one disconnecting
            </summary>
        </member>
        <member name="E:libsecondlife.NetworkManager.OnDisconnected">
            <summary>
            An event for being logged out either through client request, server
            forced, or network error
            </summary>
        </member>
        <member name="E:libsecondlife.NetworkManager.OnCurrentSimChanged">
            <summary>
            An event for when CurrentSim changes
            </summary>
        </member>
        <member name="P:libsecondlife.NetworkManager.LoginStatusCode">
            <summary>Current state of logging in</summary>
        </member>
        <member name="P:libsecondlife.NetworkManager.LoginErrorKey">
            <summary>Upon login failure, contains a short string key for the
            type of login error that occurred</summary>
        </member>
        <member name="P:libsecondlife.NetworkManager.RawLoginReply">
            <summary>The raw XML-RPC reply from the login server, exactly as it
            was received (minus the HTTP header)</summary>
        </member>
        <member name="P:libsecondlife.NetworkManager.LoginMessage">
            <summary>During login this contains a descriptive version of
            LoginStatusCode. After a successful login this will contain the
            message of the day, and after a failed login a descriptive error
            message will be returned</summary>
        </member>
        <member name="P:libsecondlife.NetworkManager.Connected">
            <summary>
            Shows whether the network layer is logged in to the grid or not
            </summary>
        </member>
        <member name="M:libsecondlife.NetworkManager.DefaultLoginParams(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            </summary>
            <param name="firstName">Account first name</param>
            <param name="lastName">Account last name</param>
            <param name="password">Account password</param>
            <param name="userAgent">Client application name and version</param>
            <param name="author">Client application author</param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.NetworkManager.Login(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Simplified login that takes the most common and required fields
            </summary>
            <param name="firstName">Account first name</param>
            <param name="lastName">Account last name</param>
            <param name="password">Account password</param>
            <param name="userAgent">Client application name and version</param>
            <param name="author">Client application author</param>
            <returns>Whether the login was successful or not. On failure the
            LoginErrorKey string will contain the error code and LoginMessage
            will contain a description of the error</returns>
        </member>
        <member name="M:libsecondlife.NetworkManager.Login(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Simplified login that takes the most common fields along with a
            starting location URI, and can accept an MD5 string instead of a
            plaintext password
            </summary>
            <param name="firstName">Account first name</param>
            <param name="lastName">Account last name</param>
            <param name="password">Account password or MD5 hash of the password
            such as $1$1682a1e45e9f957dcdf0bb56eb43319c</param>
            <param name="userAgent">Client application name and version</param>
            <param name="start">Starting location URI that can be built with
            StartLocation()</param>
            <param name="author">Client application author</param>
            <returns>Whether the login was successful or not. On failure the
            LoginErrorKey string will contain the error code and LoginMessage
            will contain a description of the error</returns>
        </member>
        <member name="M:libsecondlife.NetworkManager.Login(libsecondlife.NetworkManager.LoginParams)">
            <summary>
            Login that takes a struct of all the values that will be passed to
            the login server
            </summary>
            <param name="loginParams">The values that will be passed to the login
            server, all fields must be set even if they are String.Empty</param>
            <returns>Whether the login was successful or not. On failure the
            LoginErrorKey string will contain the error code and LoginMessage
            will contain a description of the error</returns>
        </member>
        <member name="M:libsecondlife.NetworkManager.StartLocation(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Build a start location URI for passing to the Login function
            </summary>
            <param name="sim">Name of the simulator to start in</param>
            <param name="x">X coordinate to start at</param>
            <param name="y">Y coordinate to start at</param>
            <param name="z">Z coordinate to start at</param>
            <returns>String with a URI that can be used to login to a specified
            location</returns>
        </member>
        <member name="M:libsecondlife.NetworkManager.RegisterCallback(libsecondlife.Packets.PacketType,libsecondlife.NetworkManager.PacketCallback)">
            <summary>
            Register an event handler for a packet. This is a low level event
            interface and should only be used if you are doing something not
            supported in libsecondlife
            </summary>
            <param name="type">Packet type to trigger events for</param>
            <param name="callback">Callback to fire when a packet of this type
            is received</param>
        </member>
        <member name="M:libsecondlife.NetworkManager.UnregisterCallback(libsecondlife.Packets.PacketType,libsecondlife.NetworkManager.PacketCallback)">
            <summary>
            Unregister an event handler for a packet. This is a low level event
            interface and should only be used if you are doing something not
            supported in libsecondlife
            </summary>
            <param name="type">Packet type this callback is registered with</param>
            <param name="callback">Callback to stop firing events for</param>
        </member>
        <member name="M:libsecondlife.NetworkManager.RegisterEventCallback(System.String,libsecondlife.Capabilities.EventQueueCallback)">
            <summary>
            Register a CAPS event handler. This is a low level event interface
            and should only be used if you are doing something not supported in
            libsecondlife
            </summary>
            <param name="eventName">Name of the CAPS event to register a handler for</param>
            <param name="callback">Callback to fire when a CAPS event is received</param>
        </member>
        <member name="M:libsecondlife.NetworkManager.UnregisterEventCallback(System.String,libsecondlife.Capabilities.EventQueueCallback)">
            <summary>
            Unregister a CAPS event handler. This is a low level event interface
            and should only be used if you are doing something not supported in
            libsecondlife
            </summary>
            <param name="capsEvent">Name of the CAPS event this callback is
            registered with</param>
            <param name="callback">Callback to stop firing events for</param>
        </member>
        <member name="M:libsecondlife.NetworkManager.SendPacket(libsecondlife.Packets.Packet)">
            <summary>
            Send a packet to the simulator the avatar is currently occupying
            </summary>
            <param name="packet">Packet to send</param>
        </member>
        <member name="M:libsecondlife.NetworkManager.SendPacket(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Send a packet to a specified simulator
            </summary>
            <param name="packet">Packet to send</param>
            <param name="simulator">Simulator to send the packet to</param>
        </member>
        <member name="M:libsecondlife.NetworkManager.SendPacket(System.Byte[],System.Boolean)">
            <summary>
            Send a raw byte array as a packet to the current simulator
            </summary>
            <param name="payload">Byte array containing a packet</param>
            <param name="setSequence">Whether to set the second, third, and fourth
            bytes of the payload to the current sequence number</param>
        </member>
        <member name="M:libsecondlife.NetworkManager.SendPacket(System.Byte[],libsecondlife.Simulator,System.Boolean)">
            <summary>
            Send a raw byte array as a packet to the specified simulator
            </summary>
            <param name="payload">Byte array containing a packet</param>
            <param name="simulator">Simulator to send the packet to</param>
            <param name="setSequence">Whether to set the second, third, and fourth
            bytes of the payload to the current sequence number</param>
        </member>
        <member name="M:libsecondlife.NetworkManager.Connect(System.Net.IPAddress,System.UInt16,System.UInt64,System.Boolean,System.String)">
            <summary>
            Connect to a simulator
            </summary>
            <param name="ip">IP address to connect to</param>
            <param name="port">Port to connect to</param>
            <param name="handle">Handle for this simulator, to identify its
            location in the grid</param>
            <param name="setDefault">Whether to set CurrentSim to this new
            connection, use this if the avatar is moving in to this simulator</param>
            <param name="seedcaps">URL of the capabilities server to use for
            this sim connection</param>
            <returns>A Simulator object on success, otherwise null</returns>
        </member>
        <member name="M:libsecondlife.NetworkManager.Logout">
            <summary>
            Initiate a blocking logout request. This will return when the logout
            handshake has completed or when Settings.LOGOUT_TIMEOUT has expired
            and a LogoutDemand packet has been sent
            </summary>
        </member>
        <member name="M:libsecondlife.NetworkManager.RequestLogout">
            <summary>
            Initiate the logout process (three step process!)
            </summary>
        </member>
        <member name="M:libsecondlife.NetworkManager.ForceLogout">
            <summary>
            Uses a LogoutDemand packet to force initiate a logout
            </summary>
        </member>
        <member name="M:libsecondlife.NetworkManager.DisconnectSim(libsecondlife.Simulator)">
            <summary>
            </summary>
            <param name="sim">
            </param>
        </member>
        <member name="M:libsecondlife.NetworkManager.FinalizeLogout">
            <summary>
            Finalize the logout procedure. Close down sockets, etc.
            </summary>
        </member>
        <member name="M:libsecondlife.NetworkManager.Shutdown(libsecondlife.NetworkManager.DisconnectType)">
            <summary>
            Shutdown will disconnect all the sims except for the current sim
            first, and then kill the connection to CurrentSim.
            </summary>
        </member>
        <member name="M:libsecondlife.NetworkManager.LogoutTimer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Triggered if a LogoutReply is not received
            </summary>
        </member>
        <member name="M:libsecondlife.NetworkManager.LogoutReplyHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Called to deal with LogoutReply packet and fires off callback
            </summary>
            <param name="packet">Full packet of type LogoutReplyPacket</param>
            <param name="simulator">
            </param>
        </member>
        <member name="T:libsecondlife.MainAvatar">
            <summary>
            Class to hold Client Avatar's data
            </summary>
        </member>
        <member name="M:libsecondlife.MainAvatar.#ctor(libsecondlife.SecondLife)">
            <summary>
            Constructor, setup callbacks for packets related to our avatar
            </summary>
            <param name="client">
            </param>
        </member>
        <member name="T:libsecondlife.MainAvatar.ControlFlags">
            <summary>
            Used to specify movement actions for your agent
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.NONE">
            <summary>Empty flag</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_AT_POS">
            <summary>Move Forward (SL Keybinding: W/Up Arrow)</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_AT_NEG">
            <summary>Move Backward (SL Keybinding: S/Down Arrow)</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_LEFT_POS">
            <summary>Move Left (SL Keybinding: Shift-(A/Left Arrow))</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_LEFT_NEG">
            <summary>Move Right (SL Keybinding: Shift-(D/Right Arrow))</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_UP_POS">
            <summary>Not Flying: Jump/Flying: Move Up (SL Keybinding: E)</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_UP_NEG">
            <summary>Not Flying: Croutch/Flying: Move Down (SL Keybinding: C)</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_PITCH_POS">
            <summary>Unused</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_PITCH_NEG">
            <summary>Unused</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_YAW_POS">
            <summary>Unused</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_YAW_NEG">
            <summary>Unused</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_FAST_AT">
            <summary>ORed with AGENT_CONTROL_AT_* if the keyboard is being used</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_FAST_LEFT">
            <summary>ORed with AGENT_CONTROL_LEFT_* if the keyboard is being used</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_FAST_UP">
            <summary>ORed with AGENT_CONTROL_UP_* if the keyboard is being used</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_FLY">
            <summary>Fly</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_STOP">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_FINISH_ANIM">
            <summary>Finish our current animation</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_STAND_UP">
            <summary>Stand up from the ground or a prim seat</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_SIT_ON_GROUND">
            <summary>Sit on the ground at our current location</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_MOUSELOOK">
            <summary>Whether mouselook is currently enabled</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_NUDGE_AT_POS">
            <summary>Legacy, used if a key was pressed for less than a certain amount of time</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_NUDGE_AT_NEG">
            <summary>Legacy, used if a key was pressed for less than a certain amount of time</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_NUDGE_LEFT_POS">
            <summary>Legacy, used if a key was pressed for less than a certain amount of time</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_NUDGE_LEFT_NEG">
            <summary>Legacy, used if a key was pressed for less than a certain amount of time</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_NUDGE_UP_POS">
            <summary>Legacy, used if a key was pressed for less than a certain amount of time</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_NUDGE_UP_NEG">
            <summary>Legacy, used if a key was pressed for less than a certain amount of time</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_TURN_LEFT">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_TURN_RIGHT">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_AWAY">
            <summary>Set when the avatar is idled or set to away. Note that the away animation is
            activated separately from setting this flag</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_LBUTTON_DOWN">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_LBUTTON_UP">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_ML_LBUTTON_DOWN">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ControlFlags.AGENT_CONTROL_ML_LBUTTON_UP">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.MainAvatar.AgentFlags">
            <summary>
            Currently only used to hide your group title
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.AgentFlags.None">
            <summary>No flags set</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.AgentFlags.HideTitle">
            <summary>Hide your group title</summary>
        </member>
        <member name="T:libsecondlife.MainAvatar.AgentState">
            <summary>
            Action state of the avatar, which can currently be typing and
            editing
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.AgentState.None">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.AgentState.Typing">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.AgentState.Editing">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.MainAvatar.ScriptPermission">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ScriptPermission.None">
            <summary>Placeholder for empty values, shouldn't ever see this</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ScriptPermission.Debit">
            <summary>Script wants to take money from you</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ScriptPermission.TakeControls">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ScriptPermission.RemapControls">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ScriptPermission.TriggerAnimation">
            <summary>Script wants to trigger avatar animations</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ScriptPermission.Attach">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ScriptPermission.ReleaseOwnership">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ScriptPermission.ChangeLinks">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ScriptPermission.ChangeJoints">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ScriptPermission.ChangePermissions">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ScriptPermission.TrackCamera">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ScriptPermission.ControlCamera">
            <summary>Script wants to control your camera</summary>
        </member>
        <member name="T:libsecondlife.MainAvatar.TeleportStatus">
            <summary>
            Current teleport status
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.TeleportStatus.None">
            <summary>Unknown status</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.TeleportStatus.Start">
            <summary>Teleport initialized</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.TeleportStatus.Progress">
            <summary>Teleport in progress</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.TeleportStatus.Failed">
            <summary>Teleport failed</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.TeleportStatus.Finished">
            <summary>Teleport completed</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.TeleportStatus.Cancelled">
            <summary>Teleport cancelled</summary>
        </member>
        <member name="T:libsecondlife.MainAvatar.InstantMessageDialog">
            <summary>
            Special commands used in Instant Messages
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.MessageFromAgent">
            <summary>Indicates a regular IM from another agent</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.MessageBox">
            <summary>Simple notification box with an OK button</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.MessageBoxCountdown">
            <summary>Used to show a countdown notification with an OK
            button, deprecated now</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.GroupInvitation">
            <summary>You've been invited to join a group.</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.InventoryOffered">
            <summary>Inventory offer</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.InventoryAccepted">
            <summary>Accepted inventory offer</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.InventoryDeclined">
            <summary>Declined inventory offer</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.GroupVote">
            <summary>Group vote</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.DeprecatedGroupMessage">
            <summary>A message to everyone in the agent's group, no longer
            used</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.TaskInventoryOffered">
            <summary>An object is offering its inventory</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.TaskInventoryAccepted">
            <summary>Accept an inventory offer from an object</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.TaskInventoryDeclined">
            <summary>Decline an inventory offer from an object</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.NewUserDefault">
            <summary>Unknown</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.SessionAdd">
            <summary>Start a session, or add users to a session</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.SessionOfflineAdd">
            <summary>Start a session, but don't prune offline users</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.SessionGroupStart">
            <summary>Start a session with your group</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.SessionCardlessStart">
            <summary>Start a session without a calling card (finder or objects)</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.SessionSend">
            <summary>Send a message to a session</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.SessionDrop">
            <summary>Leave a session</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.MessageFromObject">
            <summary>Indicates that the IM is from an object</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.BusyAutoResponse">
            <summary>sent an IM to a busy user, this is the auto response</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.ConsoleAndChatHistory">
            <summary>Shows the message in the console and chat history</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.RequestTeleport">
            <summary>IM Types used for luring your friends</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.AcceptTeleport">
            <summary>Response sent to the agent which inititiated a teleport invitation</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.DenyTeleport">
            <summary>Response sent to the agent which inititiated a teleport invitation</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.GodLikeRequestTeleport">
            <summary>Only useful if you have Linden permissions</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.CurrentlyUnused">
            <summary>A placeholder type for future expansion, currently not
            used</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.DeprecatedGroupElection">
            <summary>Notification of a new group election, this is
            deprecated</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.GotoUrl">
            <summary>IM to tell the user to go to an URL</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.Session911Start">
            <summary>IM for help</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.Lure911">
            <summary>IM sent automatically on call for help, sends a lure
            to each Helper reached</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.FromTaskAsAlert">
            <summary>Like an IM but won't go to email</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.GroupNotice">
            <summary>IM from a group officer to all group members</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.GroupNoticeInventoryAccepted">
            <summary>Unknown</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.GroupNoticeInventoryDeclined">
            <summary>Unknown</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.GroupInvitationAccept">
            <summary>Accept a group invitation</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.GroupInvitationDecline">
            <summary>Decline a group invitation</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.GroupNoticeRequested">
            <summary>Unknown</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.FriendshipOffered">
            <summary>An avatar is offering you friendship</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.FriendshipAccepted">
            <summary>An avatar has accepted your friendship offer</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.FriendshipDeclined">
            <summary>An avatar has declined your friendship offer</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.StartTyping">
            <summary>Indicates that a user has started typing</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageDialog.StopTyping">
            <summary>Indicates that a user has stopped typing</summary>
        </member>
        <member name="T:libsecondlife.MainAvatar.InstantMessageOnline">
            <summary>
            Flag in Instant Messages, whether the IM should be delivered to
            offline avatars as well
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageOnline.Online">
            <summary>Only deliver to online avatars</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InstantMessageOnline.Offline">
            <summary>If the avatar is offline the message will be held until
            they login next, and possibly forwarded to their e-mail account</summary>
        </member>
        <member name="T:libsecondlife.MainAvatar.ChatType">
            <summary>
            Conversion type to denote Chat Packet types in an easier-to-understand format
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ChatType.Whisper">
            <summary>Whisper (5m radius)</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ChatType.Normal">
            <summary>Normal chat (10/20m radius), what the official viewer typically sends</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ChatType.Shout">
            <summary>Shouting! (100m radius)</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ChatType.Say">
            <summary>Say chat (10/20m radius) - The official viewer will
            print "[4:15] You say, hey" instead of "[4:15] You: hey"</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ChatType.StartTyping">
            <summary>Event message when an Avatar has begun to type</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ChatType.StopTyping">
            <summary>Event message when an Avatar has stopped typing</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ChatType.Debug">
            <summary>Unknown</summary>
        </member>
        <member name="T:libsecondlife.MainAvatar.ChatSourceType">
            <summary>
            Identifies the source of a chat message
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ChatSourceType.System">
            <summary>Chat from the grid or simulator</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ChatSourceType.Agent">
            <summary>Chat from another avatar</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ChatSourceType.Object">
            <summary>Chat from an object</summary>
        </member>
        <member name="T:libsecondlife.MainAvatar.ChatAudibleLevel">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ChatAudibleLevel.Not">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ChatAudibleLevel.Barely">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ChatAudibleLevel.Fully">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.MainAvatar.EffectType">
            <summary>
            Effect type used in ViewerEffect packets
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.EffectType.Text">
            <summary>Place floating text above an object</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.EffectType.Icon">
            <summary>Unknown, probably places an icon above an object</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.EffectType.Connector">
            <summary>Unknown</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.EffectType.FlexibleObject">
            <summary>Unknown</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.EffectType.AnimalControls">
            <summary>Unknown</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.EffectType.AnimationObject">
            <summary>Unknown</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.EffectType.Cloth">
            <summary>Unknown</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.EffectType.Beam">
            <summary>Project a beam from a source to a destination, such as
            the one used when editing an object</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.EffectType.Glow">
            <summary>Not implemented yet</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.EffectType.Point">
            <summary>Unknown</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.EffectType.Trail">
            <summary>Unknown</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.EffectType.Sphere">
            <summary>Create a swirl of particles around an object</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.EffectType.Spiral">
            <summary>Unknown</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.EffectType.Edit">
            <summary>Unknown</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.EffectType.LookAt">
            <summary>Cause an avatar to look at an object</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.EffectType.PointAt">
            <summary>Cause an avatar to point at an object</summary>
        </member>
        <member name="T:libsecondlife.MainAvatar.LookAtType">
            <summary>
            The action an avatar is doing when looking at something, used in
            ViewerEffect packets for the LookAt effect
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.LookAtType.None">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.LookAtType.Idle">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.LookAtType.AutoListen">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.LookAtType.FreeLook">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.LookAtType.Respond">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.LookAtType.Hover">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.LookAtType.Conversation">
            <summary>Deprecated</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.LookAtType.Select">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.LookAtType.Focus">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.LookAtType.Mouselook">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.LookAtType.Clear">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.MainAvatar.PointAtType">
            <summary>
            The action an avatar is doing when pointing at something, used in
            ViewerEffect packets for the PointAt effect
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.PointAtType.None">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.PointAtType.Select">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.PointAtType.Grab">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.PointAtType.Clear">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.MainAvatar.TeleportFlags">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.TeleportFlags.Default">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.TeleportFlags.SetHomeToTarget">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.TeleportFlags.SetLastToTarget">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.TeleportFlags.ViaLure">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.TeleportFlags.ViaLandmark">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.TeleportFlags.ViaLocation">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.TeleportFlags.ViaHome">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.TeleportFlags.ViaTelehub">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.TeleportFlags.ViaLogin">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.TeleportFlags.ViaGodlikeLure">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.TeleportFlags.Godlike">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.TeleportFlags.NineOneOne">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.TeleportFlags.DisableCancel">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.TeleportFlags.ViaRegionID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.TeleportFlags.IsFlying">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.MainAvatar.TeleportLureFlags">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.TeleportLureFlags.NormalLure">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.TeleportLureFlags.GodlikeLure">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.TeleportLureFlags.GodlikePursuit">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.MainAvatar.MainAvatarStatus">
            <summary>
            Holds current camera and control key status
            </summary>
        </member>
        <member name="M:libsecondlife.MainAvatar.MainAvatarStatus.#ctor(libsecondlife.SecondLife)">
            <summary>Constructor for class MainAvatarStatus</summary>
        </member>
        <member name="T:libsecondlife.MainAvatar.MainAvatarStatus.CameraStatus">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.MainAvatarStatus.CameraStatus.BodyRotation">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.MainAvatarStatus.CameraStatus.HeadRotation">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.MainAvatarStatus.CameraStatus.CameraAtAxis">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.MainAvatarStatus.CameraStatus.CameraCenter">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.MainAvatarStatus.CameraStatus.CameraLeftAxis">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.MainAvatarStatus.CameraStatus.CameraUpAxis">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.MainAvatarStatus.CameraStatus.Far">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.MainAvatarStatus.CameraStatus.LastBodyRotation">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.MainAvatarStatus.CameraStatus.LastHeadRotation">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.MainAvatarStatus.CameraStatus.LastCameraAtAxis">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.MainAvatarStatus.CameraStatus.LastCameraCenter">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.MainAvatarStatus.CameraStatus.LastCameraLeftAxis">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.MainAvatarStatus.CameraStatus.LastCameraUpAxis">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.MainAvatarStatus.CameraStatus.LastFar">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.MainAvatarStatus.UpdateTimer">
            <summary>Timer for sending AgentUpdate packets, disabled by
            default</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.MainAvatarStatus.Camera">
            <summary>Holds camera flags</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.MainAvatarStatus.Flags">
            <summary>Currently only used for hiding your group title</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.MainAvatarStatus.State">
            <summary>Action state of the avatar, which can currently be
            typing and editing</summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.AtPos">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.AtNeg">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.LeftPos">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.LeftNeg">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.UpPos">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.UpNeg">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.PitchPos">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.PitchNeg">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.YawPos">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.YawNeg">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.FastAt">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.FastLeft">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.FastUp">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.Fly">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.Stop">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.FinishAnim">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.StandUp">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.SitOnGround">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.Mouselook">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.NudgeAtPos">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.NudgeAtNeg">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.NudgeLeftPos">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.NudgeLeftNeg">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.NudgeUpPos">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.NudgeUpNeg">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.TurnLeft">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.TurnRight">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.Away">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.LButtonDown">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.LButtonUp">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.MLButtonDown">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.MLButtonUp">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.AlwaysRun">
            <summary>
            Returns "always run" value, or changes it by sending a SetAlwaysRunPacket
            </summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.MainAvatarStatus.AgentControls">
            <summary>The current value of the agent control flags</summary>
        </member>
        <member name="M:libsecondlife.MainAvatar.MainAvatarStatus.UpdateFromHeading(System.Double,System.Boolean)">
            <summary>
            Send an AgentUpdate with the camera set at the current agent
            position and pointing towards the heading specified
            </summary>
            <param name="heading">Camera rotation in radians</param>
            <param name="reliable">Whether to send the AgentUpdate reliable
            or not</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.MainAvatarStatus.SendUpdate">
            <summary>
            Send new AgentUpdate packet to update our current camera
            position and rotation
            </summary>
        </member>
        <member name="M:libsecondlife.MainAvatar.MainAvatarStatus.SendUpdate(System.Boolean)">
            <summary>
            Send new AgentUpdate packet to update our current camera
            position and rotation
            </summary>
            <param name="reliable">Whether to require server acknowledgement
            of this packet</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.MainAvatarStatus.SendUpdate(System.Boolean,libsecondlife.Simulator)">
            <summary>
            Send new AgentUpdate packet to update our current camera
            position and rotation
            </summary>
            <param name="reliable">Whether to require server acknowledgement
            of this packet</param>
            <param name="simulator">Simulator to send the update to</param>
        </member>
        <member name="T:libsecondlife.MainAvatar.ChatCallback">
            <summary>
            Triggered on incoming chat messages
            </summary>
            <param name="message">Text of chat message</param>
            <param name="audible">Audible level of this chat message</param>
            <param name="type">Type of chat (whisper, shout, status, etc.)</param>
            <param name="sourceType">Source of the chat message</param>
            <param name="fromName">Name of the sending object</param>
            <param name="id">
            </param>
            <param name="ownerid">
            </param>
            <param name="position">
            </param>
        </member>
        <member name="T:libsecondlife.MainAvatar.ScriptDialogCallback">
            <summary>
            Triggered when a script pops up a dialog box
            </summary>
            <param name="message">The dialog box message</param>
            <param name="objectName">Name of the object that sent the dialog</param>
            <param name="imageID">Image to be displayed in the dialog</param>
            <param name="objectID">ID of the object that sent the dialog</param>
            <param name="firstName">First name of the object owner</param>
            <param name="lastName">Last name of the object owner</param>
            <param name="chatChannel">Chat channel that the object is communicating on</param>
            <param name="buttons">List of button labels</param>
        </member>
        <member name="T:libsecondlife.MainAvatar.ScriptQuestionCallback">
            <summary>
            Triggered when a script asks for permissions
            </summary>
            <param name="taskID">Task ID of the script requesting permissions</param>
            <param name="itemID">ID of the object containing the script</param>
            <param name="objectName">Name of the object containing the script</param>
            <param name="objectOwner">Name of the object's owner</param>
            <param name="questions">Bitwise value representing the requested permissions</param>
        </member>
        <member name="T:libsecondlife.MainAvatar.BalanceCallback">
            <summary>
            Triggered when the L$ account balance for this avatar changes
            </summary>
            <param name="balance">The new account balance</param>
        </member>
        <member name="T:libsecondlife.MainAvatar.MoneyBalanceReplyCallback">
            <summary>
            Triggered on Money Balance Reply
            </summary>
            <param name="transactionID">ID provided in Request Money Balance, or auto-generated by system events</param>
            <param name="transactionSuccess">Was the transaction successful</param>
            <param name="balance">Current balance</param>
            <param name="metersCredit">
            </param>
            <param name="metersCommitted">
            </param>
            <param name="description">
            </param>
        </member>
        <member name="T:libsecondlife.MainAvatar.InstantMessageCallback">
            <summary>
            Triggered on incoming instant messages
            </summary>
            <param name="fromAgentID">Key of sender</param>
            <param name="fromAgentName">Name of sender</param>
            <param name="toAgentID">Key of destination Avatar</param>
            <param name="parentEstateID">ID of originating Estate</param>
            <param name="regionID">Key of originating Region</param>
            <param name="position">Coordinates in originating Region</param>
            <param name="dialog">
            </param>
            <param name="groupIM">Group IM session toggle</param>
            <param name="imSessionID">Key of IM Session</param>
            <param name="timestamp">Timestamp of message</param>
            <param name="message">Text of message</param>
            <param name="offline">Enum of whether this message is held for
            offline avatars</param>
            <param name="binaryBucket">Context specific packed data</param>
            <param name="simulator">Simulator where this IM was received from</param>
        </member>
        <member name="T:libsecondlife.MainAvatar.TeleportCallback">
            <summary>
            Triggered for any status updates of a teleport (progress, failed, succeeded)
            </summary>
            <param name="message">A message about the current teleport status</param>
            <param name="status">The current status of the teleport</param>
            <param name="flags">Various flags describing the teleport</param>
        </member>
        <member name="T:libsecondlife.MainAvatar.JoinGroupCallback">
            <summary>
            Reply to a request to join a group, informs whether it was successful or not
            </summary>
            <param name="groupID">The group we attempted to join</param>
            <param name="success">Whether we joined the group or not</param>
        </member>
        <member name="T:libsecondlife.MainAvatar.LeaveGroupCallback">
            <summary>
            Reply to a request to leave a group, informs whether it was successful or not
            </summary>
            <param name="groupID">The group we attempted to leave</param>
            <param name="success">Whether we left the group or not</param>
        </member>
        <member name="T:libsecondlife.MainAvatar.GroupDroppedCallback">
            <summary>
            Informs the avatar that it is no longer a member of a group
            </summary>
            <param name="groupID">The group we are no longer a member of</param>
        </member>
        <member name="T:libsecondlife.MainAvatar.ActiveGroupChangedCallback">
            <summary>
            Informs the avatar that the active group has changed
            </summary>
            <param name="groupID">The group that is now the active group</param>
        </member>
        <member name="F:libsecondlife.MainAvatar.ID">
            <summary>Your (client) avatar UUID</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.LocalID">
            <summary>Your (client) avatar ID, local to the current region/sim</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.FirstName">
            <summary>Avatar First Name (i.e. Philip)</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.LastName">
            <summary>Avatar Last Name (i.e. Linden)</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.StartLocation">
            <summary>Where the avatar started at login. Can be "last", "home"
            or a login URI</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.AgentAccess">
            <summary>The access level of this agent, usually M or PG</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.ProfileStatistics">
            <summary>Positive and negative ratings</summary>
            <remarks>This information is read-only and any changes will not be
            reflected on the server</remarks>
        </member>
        <member name="F:libsecondlife.MainAvatar.ProfileProperties">
            <summary>Avatar properties including about text, profile URL, image IDs and
            publishing settings</summary>
            <remarks>If you change fields in this struct, the changes will not
            be reflected on the server until you call SetAvatarInformation</remarks>
        </member>
        <member name="F:libsecondlife.MainAvatar.ProfileInterests">
            <summary>Avatar interests including spoken languages, skills, and "want to"
            choices</summary>
            <remarks>If you change fields in this struct, the changes will not
            be reflected on the server until you call SetAvatarInformation</remarks>
        </member>
        <member name="F:libsecondlife.MainAvatar.Position">
            <summary>Current position of avatar</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.Rotation">
            <summary>Current rotation of avatar</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.CollisionPlane">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.Velocity">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.Acceleration">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.AngularVelocity">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.LookAt">
            <summary>The point the avatar is currently looking at
            (may not stay updated)</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.HomePosition">
            <summary>Position avatar client will goto when login to 'home' or during
            teleport request to 'home' region.</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.HomeLookAt">
            <summary>LookAt point saved/restored with HomePosition</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.Status">
            <summary>Used for camera and control key state tracking</summary>
        </member>
        <member name="F:libsecondlife.MainAvatar.InventoryRootFolderUUID">
            <summary>The UUID of your root inventory folder</summary>
        </member>
        <member name="E:libsecondlife.MainAvatar.OnChat">
            <summary>Callback for incoming chat packets</summary>
        </member>
        <member name="E:libsecondlife.MainAvatar.OnScriptDialog">
            <summary>Callback for pop-up dialogs from scripts</summary>
        </member>
        <member name="E:libsecondlife.MainAvatar.OnScriptQuestion">
            <summary>Callback for pop-up dialogs regarding permissions</summary>
        </member>
        <member name="E:libsecondlife.MainAvatar.OnInstantMessage">
            <summary>Callback for incoming IMs</summary>
        </member>
        <member name="E:libsecondlife.MainAvatar.OnTeleport">
            <summary>Callback for Teleport request update</summary>
        </member>
        <member name="E:libsecondlife.MainAvatar.OnBalanceUpdated">
            <summary>Callback for incoming change in L$ balance</summary>
        </member>
        <member name="E:libsecondlife.MainAvatar.OnMoneyBalanceReplyReceived">
            <summary>Callback for incoming Money Balance Replies</summary>
        </member>
        <member name="E:libsecondlife.MainAvatar.OnJoinGroup">
            <summary>Callback reply for an attempt to join a group</summary>
        </member>
        <member name="E:libsecondlife.MainAvatar.OnLeaveGroup">
            <summary>Callback reply for an attempt to leave a group</summary>
        </member>
        <member name="E:libsecondlife.MainAvatar.OnGroupDropped">
            <summary>Callback for informing the avatar that it is no longer a member of a group</summary>
        </member>
        <member name="E:libsecondlife.MainAvatar.OnActiveGroupChanged">
            <summary>Callback reply for the current group changing</summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.Health">
            <summary>Gets the health of the agent</summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.Balance">
            <summary>Gets the current balance of the agent</summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.SittingOn">
            <summary>Gets the local ID of the prim the avatar is sitting on,
            zero if the avatar is not currently sitting</summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.ActiveGroup">
            <summary>Gets the UUID of the active group.</summary>
        </member>
        <member name="P:libsecondlife.MainAvatar.TeleportMessage">
            <summary>Current status message for teleporting</summary>
        </member>
        <member name="M:libsecondlife.MainAvatar.InstantMessage(libsecondlife.LLUUID,System.String)">
            <summary>
            Send an Instant Message
            </summary>
            <param name="target">Target of the Instant Message</param>
            <param name="message">Text message being sent</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.InstantMessage(libsecondlife.LLUUID,System.String,libsecondlife.LLUUID)">
            <summary>
            Send an Instant Message
            </summary>
            <param name="target">Target of the Instant Message</param>
            <param name="message">Text message being sent</param>
            <param name="imSessionID">IM session ID (to differentiate between IM windows)</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.InstantMessage(System.String,libsecondlife.LLUUID,System.String,libsecondlife.LLUUID,libsecondlife.LLUUID[])">
            <summary>
            Send an Instant Message
            </summary>
            <param name="fromName">The name this IM will show up as being from</param>
            <param name="target">Key of Avatar</param>
            <param name="message">Text message being sent</param>
            <param name="imSessionID">IM session ID (to differentiate between IM windows)</param>
            <param name="conferenceIDs">
            </param>
        </member>
        <member name="M:libsecondlife.MainAvatar.InstantMessage(System.String,libsecondlife.LLUUID,System.String,libsecondlife.LLUUID,libsecondlife.MainAvatar.InstantMessageDialog,libsecondlife.MainAvatar.InstantMessageOnline,libsecondlife.LLVector3,libsecondlife.LLUUID,System.Byte[])">
            <summary>
            Send an Instant Message
            </summary>
            <param name="fromName">The name this IM will show up as being from</param>
            <param name="target">Key of Avatar</param>
            <param name="message">Text message being sent</param>
            <param name="imSessionID">IM session ID (to differentiate between IM windows)</param>
            <param name="dialog">Type of instant message to send</param>
            <param name="offline">Whether to IM offline avatars as well</param>
            <param name="position">
            </param>
            <param name="regionID">
            </param>
            <param name="binaryBucket">Packed binary data that is specific to
            the dialog type</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.InstantMessageGroup(libsecondlife.LLUUID,System.String)">
            <summary>
            Send an Instant Message to a group
            </summary>
            <param name="groupUUID">Key of Group</param>
            <param name="message">Text Message being sent.</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.InstantMessageGroup(System.String,libsecondlife.LLUUID,System.String)">
            <summary>
            Send an Instant Message to a group
            </summary>
            <param name="fromName">The name this IM will show up as being from</param>
            <param name="groupUUID">Key of the group</param>
            <param name="message">Text message being sent</param>
            <remarks>This does not appear to function with groups the agent is not in</remarks>
        </member>
        <member name="M:libsecondlife.MainAvatar.PointAtEffect(libsecondlife.LLUUID,libsecondlife.LLUUID,libsecondlife.LLVector3d,libsecondlife.MainAvatar.PointAtType)">
            <summary>
            </summary>
            <param name="sourceAvatar">
            </param>
            <param name="targetObject">
            </param>
            <param name="globalOffset">
            </param>
            <param name="type">
            </param>
        </member>
        <member name="M:libsecondlife.MainAvatar.LookAtEffect(libsecondlife.LLUUID,libsecondlife.LLUUID,libsecondlife.LLVector3d,libsecondlife.MainAvatar.LookAtType)">
            <summary>
            </summary>
            <param name="sourceAvatar">
            </param>
            <param name="targetObject">
            </param>
            <param name="globalOffset">
            </param>
            <param name="type">
            </param>
        </member>
        <member name="M:libsecondlife.MainAvatar.BeamEffect(libsecondlife.LLUUID,libsecondlife.LLUUID,libsecondlife.LLVector3d,libsecondlife.LLColor,System.Single)">
            <summary>
            </summary>
            <param name="sourceAvatar">
            </param>
            <param name="targetObject">
            </param>
            <param name="globalOffset">
            </param>
            <param name="color">
            </param>
            <param name="duration">
            </param>
        </member>
        <member name="M:libsecondlife.MainAvatar.SetAvatarInformation">
            <summary>
            Synchronize the local profile and interests information to the server
            </summary>
        </member>
        <member name="M:libsecondlife.MainAvatar.Chat(System.String,System.Int32,libsecondlife.MainAvatar.ChatType)">
            <summary>
            Send a chat message
            </summary>
            <param name="message">The Message you're sending out.</param>
            <param name="channel">Channel number (0 would be default 'Say' message, other numbers
            denote the equivalent of /# in normal client).</param>
            <param name="type">Chat Type, see above.</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.SetHeightWidth(System.UInt16,System.UInt16)">
            <summary>
            Set the height and the width of the client window. This is used
            by the server to build a virtual camera frustum for our avatar
            </summary>
            <param name="height">New height of the viewer window</param>
            <param name="width">New width of the viewer window</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.RequestSit(libsecondlife.LLUUID,libsecondlife.LLVector3)">
            <summary>
            Sends a request to sit on the specified object
            </summary>
            <param name="targetID">LLUUID of the object to sit on</param>
            <param name="offset">Sit at offset</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.RequestMuteList">
            <summary>
            Request the list of muted things for this avatar
            </summary>
        </member>
        <member name="M:libsecondlife.MainAvatar.RequestBalance">
            <summary>
            Request the current L$ balance
            </summary>
        </member>
        <member name="M:libsecondlife.MainAvatar.SetHome">
            <summary>
            Sets home location
            </summary>
        </member>
        <member name="M:libsecondlife.MainAvatar.GoHome">
            <summary>
            Teleports the avatar home
            </summary>
        </member>
        <member name="M:libsecondlife.MainAvatar.Sit">
            <summary>
            Follows a call to RequestSit() to actually sit on the object
            </summary>
        </member>
        <member name="M:libsecondlife.MainAvatar.SitOnGround">
            <summary>
            Does a "ground sit" at the avatar's current position
            </summary>
        </member>
        <member name="M:libsecondlife.MainAvatar.StartCrouch">
            <summary>
            Starts crouching (begin holding the crouch key)
            </summary>
        </member>
        <member name="M:libsecondlife.MainAvatar.StopCrouch">
            <summary>
            Finishes crouching (releases the crouch key)
            </summary>
        </member>
        <member name="M:libsecondlife.MainAvatar.StartJump">
            <summary>
            Starts a jump (begin holding the jump key)
            </summary>
        </member>
        <member name="M:libsecondlife.MainAvatar.StopJump">
            <summary>
            Finishes a jump (release the jump key)
            </summary>
        </member>
        <member name="M:libsecondlife.MainAvatar.GiveMoney(libsecondlife.LLUUID,System.Int32,System.String)">
            <summary>
            Give Money to destination Avatar
            </summary>
            <param name="target">UUID of the Target Avatar</param>
            <param name="amount">Amount in L$</param>
            <param name="description">Reason (optional normally)</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.GiveMoney(libsecondlife.LLUUID,System.Int32,System.String,System.Int32)">
            <summary>
            Give Money to destionation Object or Avatar
            </summary>
            <param name="target">UUID of the Target Object/Avatar</param>
            <param name="amount">Amount in L$</param>
            <param name="description">Reason (Optional normally)</param>
            <param name="transactiontype">The type of transaction.  Currently only 5001 is
            documented for Av-&gt;Av money transfers.</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.AnimationStart(libsecondlife.LLUUID)">
            <summary>
            Send an AgentAnimation packet that toggles a single animation on
            </summary>
            <param name="animation">The animation to start playing</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.AnimationStop(libsecondlife.LLUUID)">
            <summary>
            Send an AgentAnimation packet that toggles a single animation off
            </summary>
            <param name="animation">The animation to stop playing</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.Animate(System.Collections.Generic.Dictionary{libsecondlife.LLUUID,System.Boolean})">
            <summary>
            Send an AgentAnimation packet that will toggle animations on or off
            </summary>
            <param name="animations">A list of animation UUIDs, and whether to
            turn that animation on or off</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.AutoPilot(System.UInt64,System.UInt64,System.Single)">
            <summary>
            Use the autopilot sim function to move the avatar to a new position
            </summary>
            <remarks>The z value is currently not handled properly by the simulator</remarks>
            <param name="globalX">Integer value for the global X coordinate to move to</param>
            <param name="globalY">Integer value for the global Y coordinate to move to</param>
            <param name="z">Floating-point value for the Z coordinate to move to</param>
            <example>AutoPilot(252620, 247078, 20.2674);</example>
        </member>
        <member name="M:libsecondlife.MainAvatar.AutoPilotLocal(System.Int32,System.Int32,System.Single)">
            <summary>
            Use the autopilot sim function to move the avatar to a new position
            </summary>
            <remarks>The z value is currently not handled properly by the simulator</remarks>
            <param name="localX">Integer value for the local X coordinate to move to</param>
            <param name="localY">Integer value for the local Y coordinate to move to</param>
            <param name="z">Floating-point value for the Z coordinate to move to</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.AutoPilotCancel">
            <summary>Cancels autopilot sim function</summary>
            <remarks>Not certain if this is how it is really done</remarks>
        </member>
        <member name="M:libsecondlife.MainAvatar.Stand">
            <summary>Stands up from sitting on a prim or the ground</summary>
        </member>
        <member name="M:libsecondlife.MainAvatar.Teleport(libsecondlife.LLUUID)">
            <summary>Attempt teleport to specified LLUUID</summary>
        </member>
        <member name="M:libsecondlife.MainAvatar.Teleport(System.String,libsecondlife.LLVector3)">
            <summary>
            Attempt to look up a simulator name and teleport to the discovered
            destination
            </summary>
            <param name="simName">Region name to look up</param>
            <param name="position">Position to teleport to</param>
            <returns>True if the lookup and teleport were successful, otherwise
            false</returns>
        </member>
        <member name="M:libsecondlife.MainAvatar.Teleport(System.String,libsecondlife.LLVector3,libsecondlife.LLVector3)">
            <summary>
            Attempt to look up a simulator name and teleport to the discovered
            destination
            </summary>
            <param name="simName">Region name to look up</param>
            <param name="position">Position to teleport to</param>
            <param name="lookAt">Target to look at</param>
            <returns>True if the lookup and teleport were successful, otherwise
            false</returns>
        </member>
        <member name="M:libsecondlife.MainAvatar.Teleport(System.UInt64,libsecondlife.LLVector3)">
            <summary>
            Start a teleport process
            </summary>
            <param name="regionHandle">
            </param>
            <param name="position">Position for Teleport</param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.MainAvatar.Teleport(System.UInt64,libsecondlife.LLVector3,libsecondlife.LLVector3)">
            <summary>
            Start a teleport process
            </summary>
            <param name="regionHandle">
            </param>
            <param name="position">Position for Teleport</param>
            <param name="lookAt">Target to look at</param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.MainAvatar.RequestTeleport(System.UInt64,libsecondlife.LLVector3)">
            <summary>
            Start a teleport process
            </summary>
            <param name="regionHandle">
            </param>
            <param name="position">Position for Teleport</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.RequestTeleport(System.UInt64,libsecondlife.LLVector3,libsecondlife.LLVector3)">
            <summary>
            Start a teleport process
            </summary>
            <param name="regionHandle">
            </param>
            <param name="position">Position for Teleport</param>
            <param name="lookAt">Target to look at</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.TeleportLureRespond(libsecondlife.LLUUID,System.Boolean)">
            <summary>
            Respond to a teleport lure by either accepting it and initiating
            the teleport, or denying it
            </summary>
            <param name="requesterID">UUID of the avatar requesting the teleport</param>
            <param name="accept">Accept the teleport request or deny it</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.Grab(System.UInt32)">
            <summary>
            Grabs an object
            </summary>
            <param name="objectLocalID">Local ID of Object to grab</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.GrabUpdate(libsecondlife.LLUUID,libsecondlife.LLVector3)">
            <summary>
            Drags on an object
            </summary>
            <param name="objectID">Strangely, LLUID instead of local ID</param>
            <param name="grabPosition">Drag target in region coordinates</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.DeGrab(System.UInt32)">
            <summary>
            Releases a grabbed object
            </summary>
        </member>
        <member name="M:libsecondlife.MainAvatar.Touch(System.UInt32)">
            <summary>
            Touches an object
            </summary>
        </member>
        <member name="M:libsecondlife.MainAvatar.TurnToward(libsecondlife.LLVector3)">
            <summary>
            Rotates body toward target position
            </summary>
            <param name="target">Region coordinates to turn toward</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.RequestJoinGroup(libsecondlife.LLUUID)">
            <summary>
            Request to join a group. If there is an enrollment fee it will
            automatically be deducted from your balance
            </summary>
            <param name="groupID">The group to attempt to join</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.RequestLeaveGroup(libsecondlife.LLUUID)">
            <summary>
            Request to leave a group
            </summary>
            <param name="groupID">The group to attempt to leave</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.ActivateGroup(libsecondlife.LLUUID)">
            <summary>
            Set our current active group
            </summary>
            <param name="groupID">The group we are a member of that we want to
            activate</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.CompleteAgentMovement(libsecondlife.Simulator)">
            <summary>
            Move an agent in to a simulator. This packet is the last packet
            needed to complete the transition in to a new simulator
            </summary>
            <param name="simulator">
            </param>
        </member>
        <member name="M:libsecondlife.MainAvatar.SetGroupContribution(libsecondlife.LLUUID,System.Int32)">
            <summary>
            Set this avatar's tier contribution
            </summary>
            <param name="group">Group to change tier in</param>
            <param name="contribution">amount of tier to donate</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.ChangeTitle(libsecondlife.LLUUID,libsecondlife.LLUUID)">
            <summary>
            Change the role that determines your active title
            </summary>
            <param name="group">Group to use</param>
            <param name="role">Role to change to</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.UpdateCamera(libsecondlife.MainAvatar.ControlFlags,libsecondlife.LLVector3,libsecondlife.LLVector3,libsecondlife.LLVector3,libsecondlife.LLVector3,libsecondlife.LLQuaternion,libsecondlife.LLQuaternion,System.Single,libsecondlife.MainAvatar.AgentFlags,libsecondlife.MainAvatar.AgentState,System.Boolean)">
            <summary>
            Sends camera and action updates to the server including the
            position and orientation of our camera, and a ControlFlags field
            specifying our current movement actions
            </summary>
            <param name="controlFlags">
            </param>
            <param name="position">
            </param>
            <param name="forwardAxis">
            </param>
            <param name="leftAxis">
            </param>
            <param name="upAxis">
            </param>
            <param name="bodyRotation">
            </param>
            <param name="headRotation">
            </param>
            <param name="farClip">
            </param>
            <param name="reliable">
            </param>
        </member>
        <member name="M:libsecondlife.MainAvatar.ScriptQuestionReply(libsecondlife.Simulator,libsecondlife.LLUUID,libsecondlife.LLUUID,libsecondlife.MainAvatar.ScriptPermission)">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="itemID">
            </param>
            <param name="taskID">
            </param>
            <param name="permissions">
            </param>
        </member>
        <member name="M:libsecondlife.MainAvatar.InstantMessageHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Take an incoming ImprovedInstantMessage packet, auto-parse, and if
            OnInstantMessage is defined call that with the appropriate arguments
            </summary>
            <param name="packet">Incoming ImprovedInstantMessagePacket</param>
            <param name="simulator">Unused</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.ChatHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Take an incoming Chat packet, auto-parse, and if OnChat is defined call
            that with the appropriate arguments.
            </summary>
            <param name="packet">Incoming ChatFromSimulatorPacket</param>
            <param name="simulator">Unused</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.ScriptDialogHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Used for parsing llDialog's
            </summary>
            <param name="packet">Incoming ScriptDialog packet</param>
            <param name="simulator">Unused</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.ScriptQuestionHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Used for parsing llRequestPermissions dialogs
            </summary>
            <param name="packet">Incoming ScriptDialog packet</param>
            <param name="simulator">Unused</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.MovementCompleteHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Update client's Position, LookAt and region handle from incoming packet
            </summary>
            <param name="packet">Incoming AgentMovementCompletePacket</param>
            <param name="simulator">Unused</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.HealthHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Update Client Avatar's health via incoming packet
            </summary>
            <param name="packet">Incoming HealthMessagePacket</param>
            <param name="simulator">Unused</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.BalanceHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Update Client Avatar's L$ balance from incoming packet
            </summary>
            <param name="packet">Incoming MoneyBalanceReplyPacket</param>
            <param name="simulator">Unused</param>
        </member>
        <member name="M:libsecondlife.MainAvatar.TeleportHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Handler for teleport Requests
            </summary>
            <param name="packet">Incoming TeleportHandler packet</param>
            <param name="simulator">Simulator sending teleport information</param>
        </member>
        <member name="T:libsecondlife.NameValue">
            <summary>
            A Name Value pair with additional settings, used in the protocol
            primarily to transmit avatar names and active group in object packets
            </summary>
        </member>
        <member name="M:libsecondlife.NameValue.#ctor(System.String,libsecondlife.NameValue.ValueType,libsecondlife.NameValue.ClassType,libsecondlife.NameValue.SendtoType,System.Object)">
            <summary>
            Constructor that takes all the fields as parameters
            </summary>
            <param name="name">
            </param>
            <param name="valueType">
            </param>
            <param name="classType">
            </param>
            <param name="sendtoType">
            </param>
            <param name="value">
            </param>
        </member>
        <member name="M:libsecondlife.NameValue.#ctor(System.String)">
            <summary>
            Constructor that takes a single line from a NameValue field
            </summary>
            <param name="data">
            </param>
        </member>
        <member name="T:libsecondlife.NameValue.ValueType">
            <summary>Type of the value</summary>
        </member>
        <member name="F:libsecondlife.NameValue.ValueType.Unknown">
            <summary>Unknown</summary>
        </member>
        <member name="F:libsecondlife.NameValue.ValueType.String">
            <summary>String value</summary>
        </member>
        <member name="F:libsecondlife.NameValue.ValueType.F32">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NameValue.ValueType.S32">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NameValue.ValueType.VEC3">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NameValue.ValueType.U32">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NameValue.ValueType.CAMERA">
            <summary>Deprecated</summary>
        </member>
        <member name="F:libsecondlife.NameValue.ValueType.Asset">
            <summary>String value, but designated as an asset</summary>
        </member>
        <member name="F:libsecondlife.NameValue.ValueType.U64">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.NameValue.ClassType">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NameValue.ClassType.Unknown">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NameValue.ClassType.ReadOnly">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NameValue.ClassType.ReadWrite">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NameValue.ClassType.Callback">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.NameValue.SendtoType">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NameValue.SendtoType.Unknown">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NameValue.SendtoType.Sim">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NameValue.SendtoType.DataSim">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NameValue.SendtoType.SimViewer">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NameValue.SendtoType.DataSimViewer">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NameValue.Name">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NameValue.Type">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NameValue.Class">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NameValue.Sendto">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.NameValue.Value">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.NotConnectedException">
            <summary>
            This exception is thrown whenever a network operation is attempted
            without a network connection.
            </summary>
        </member>
        <member name="T:libsecondlife.SaleType">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.SaleType.Not">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.SaleType.Original">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.SaleType.Copy">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.SaleType.Contents">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.ObjectUpdate">
            <summary>
            Contains the variables sent in an object update packet for objects.
            Used to track position and movement of prims and avatars
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectUpdate.Avatar">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectUpdate.CollisionPlane">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectUpdate.State">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectUpdate.LocalID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectUpdate.Position">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectUpdate.Velocity">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectUpdate.Acceleration">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectUpdate.Rotation">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectUpdate.AngularVelocity">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectUpdate.Textures">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.ObjectManager">
            <summary>
            Handles all network traffic related to prims and avatar positions and
            movement.
            </summary>
        </member>
        <member name="M:libsecondlife.ObjectManager.#ctor(libsecondlife.SecondLife)">
            <summary>
            Instantiates a new ObjectManager class. This class should only be accessed
            through SecondLife.Objects, client applications should never create their own
            </summary>
            <param name="client">A reference to the client</param>
        </member>
        <member name="M:libsecondlife.ObjectManager.#ctor(libsecondlife.SecondLife,System.Boolean)">
            <summary>
            Instantiates a new ObjectManager class. This class should only be
            accessed through SecondLife.Objects, client applications should
            never create their own
            </summary>
            <param name="client">A reference to the client</param>
            <param name="registerCallbacks">If false, the ObjectManager won't
            register any packet callbacks and won't decode incoming object
            packets</param>
        </member>
        <member name="T:libsecondlife.ObjectManager.PCode">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.PCode.None">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.PCode.Prim">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.PCode.Avatar">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.PCode.Grass">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.PCode.NewTree">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.PCode.ParticleSystem">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.PCode.Tree">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.ObjectManager.AttachmentPoint">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.Default">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.Chest">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.Skull">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.LeftShoulder">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.RightShoulder">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.LeftHand">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.RightHand">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.LeftFoot">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.RightFoot">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.Spine">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.Pelvis">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.Mouth">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.Chin">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.LeftEar">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.RightEar">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.LeftEyeball">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.RightEyeball">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.Nose">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.RightUpperArm">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.RightForearm">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.LeftUpperArm">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.LeftForearm">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.RightHip">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.RightUpperLeg">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.RightLowerLeg">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.LeftHip">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.LeftUpperLeg">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.LeftLowerLeg">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.Stomach">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.LeftPec">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.RightPec">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.HUDCenter2">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.HUDTopRight">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.HUDTop">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.HUDTopLeft">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.HUDCenter">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.HUDBottomLeft">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.HUDBottom">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.AttachmentPoint.HUDBottomRight">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.ObjectManager.CompressedFlags">
            <summary>
            Bitflag field for ObjectUpdateCompressed data blocks, describing
            which options are present for each object
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.CompressedFlags.ScratchPad">
            <summary>Hasn't been spotted in the wild yet</summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.CompressedFlags.Tree">
            <summary>This may be incorrect</summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.CompressedFlags.HasText">
            <summary>Whether the object has floating text ala llSetText</summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.CompressedFlags.HasParticles">
            <summary>Whether the object has an active particle system</summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.CompressedFlags.HasSound">
            <summary>Whether the object has sound attached to it</summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.CompressedFlags.HasParent">
            <summary>Whether the object is attached to a root object or not</summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.CompressedFlags.TextureAnimation">
            <summary>Whether the object has texture animation settings</summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.CompressedFlags.HasAngularVelocity">
            <summary>Whether the object has an angular velocity</summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.CompressedFlags.HasNameValues">
            <summary>Whether the object has a name value pairs string</summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.CompressedFlags.MediaURL">
            <summary>Whether the object has a Media URL set</summary>
        </member>
        <member name="T:libsecondlife.ObjectManager.Tree">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Tree.Pine1">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Tree.Oak">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Tree.TropicalBush1">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Tree.Palm1">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Tree.Dogwood">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Tree.TropicalBush2">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Tree.Palm2">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Tree.Cypress1">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Tree.Cypress2">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Tree.Pine2">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Tree.Plumeria">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Tree.WinterPine1">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Tree.WinterAspen">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Tree.WinterPine2">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Tree.Eucalyptus">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Tree.Fern">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Tree.Eelgrass">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Tree.SeaSword">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Tree.Kelp1">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Tree.BeachGrass1">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Tree.Kelp2">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.ObjectManager.Grass">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Grass.Grass0">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Grass.Grass1">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Grass.Grass2">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Grass.Grass3">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Grass.Grass4">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.Grass.Undergrowth1">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.ObjectManager.ClickAction">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.ClickAction.Touch">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.ClickAction.Sit">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ObjectManager.ClickAction.Buy">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.ObjectManager.NewPrimCallback">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="prim">
            </param>
            <param name="regionHandle">
            </param>
            <param name="timeDilation">
            </param>
        </member>
        <member name="T:libsecondlife.ObjectManager.NewAttachmentCallback">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="prim">
            </param>
            <param name="regionHandle">
            </param>
            <param name="timeDilation">
            </param>
        </member>
        <member name="T:libsecondlife.ObjectManager.ObjectPropertiesCallback">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="properties">
            </param>
        </member>
        <member name="T:libsecondlife.ObjectManager.ObjectPropertiesFamilyCallback">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="properties">
            </param>
        </member>
        <member name="T:libsecondlife.ObjectManager.NewAvatarCallback">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="avatar">
            </param>
            <param name="regionHandle">
            </param>
            <param name="timeDilation">
            </param>
        </member>
        <member name="T:libsecondlife.ObjectManager.NewFoliageCallback">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="foliage">
            </param>
            <param name="regionHandle">
            </param>
            <param name="timeDilation">
            </param>
        </member>
        <member name="T:libsecondlife.ObjectManager.ObjectUpdatedCallback">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="update">
            </param>
            <param name="regionHandle">
            </param>
            <param name="timeDilation">
            </param>
        </member>
        <member name="T:libsecondlife.ObjectManager.KillObjectCallback">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="objectID">
            </param>
        </member>
        <member name="T:libsecondlife.ObjectManager.AvatarSitChanged">
            <summary>
            Called whenever the client avatar sits down or stands up
            </summary>
            <param name="simulator">Simulator the packet was received from</param>
            <param name="sittingOn">The local ID of the object that is being sat
            on. If this is zero the avatar is not sitting on an object</param>
        </member>
        <member name="F:libsecondlife.ObjectManager.Client">
            <summary>
            Reference to the SecondLife client
            </summary>
        </member>
        <member name="E:libsecondlife.ObjectManager.OnNewPrim">
            <summary>
            This event will be raised for every ObjectUpdate block that
            contains a prim that isn't attached to an avatar.
            </summary>
            <remarks>Depending on the circumstances a client could
            receive two or more of these events for the same object, if you
            or the object left the current sim and returned for example. Client
            applications are responsible for tracking and storing objects.
            </remarks>
        </member>
        <member name="E:libsecondlife.ObjectManager.OnNewAttachment">
            <summary>
            This event will be raised for every ObjectUpdate block that
            contains an avatar attachment.
            </summary>
            <remarks>Depending on the circumstances a client could
            receive two or more of these events for the same object, if you
            or the object left the current sim and returned for example. Client
            applications are responsible for tracking and storing objects.
            </remarks>
        </member>
        <member name="E:libsecondlife.ObjectManager.OnNewAvatar">
            <summary>
            This event will be raised for every ObjectUpdate block that
            contains a new avatar.
            </summary>
            <remarks>Depending on the circumstances a client
            could receive two or more of these events for the same avatar, if
            you or the other avatar left the current sim and returned for
            example. Client applications are responsible for tracking and
            storing objects.
            </remarks>
        </member>
        <member name="E:libsecondlife.ObjectManager.OnNewFoliage">
            <summary>
            This event will be raised for every ObjectUpdate block that
            contains a new tree or grass patch.
            </summary>
            <remarks>Depending on the circumstances a client could
            receive two or more of these events for the same object, if you
            or the object left the current sim and returned for example. Client
            applications are responsible for tracking and storing objects.
            </remarks>
        </member>
        <member name="E:libsecondlife.ObjectManager.OnObjectUpdated">
            <summary>
            This event will be raised when a terse object update packet is
            received, containing the updated position, rotation, and
            movement-related vectors
            </summary>
        </member>
        <member name="E:libsecondlife.ObjectManager.OnAvatarSitChanged">
            <summary>
            This event will be raised when the main avatar sits on an
            object or stands up, with a local ID of the current seat or
            zero.
            </summary>
        </member>
        <member name="E:libsecondlife.ObjectManager.OnObjectKilled">
            <summary>
            This event will be raised when an object is removed from a
            simulator.
            </summary>
        </member>
        <member name="E:libsecondlife.ObjectManager.OnObjectProperties">
            <summary>
            This event will be raised when an objects properties are received
            from the simulator
            </summary>
        </member>
        <member name="E:libsecondlife.ObjectManager.OnObjectPropertiesFamily">
            <summary>
            Thie event will be raised when an objects properties family
            information is recieved from the simulator. ObjectPropertiesFamily
            is a subset of the fields found in ObjectProperties
            </summary>
        </member>
        <member name="M:libsecondlife.ObjectManager.RequestObject(libsecondlife.Simulator,System.UInt32)">
            <summary>
            Request object information from the sim, primarily used for stale
            or missing cache entries
            </summary>
            <param name="simulator">The simulator containing the object you're
            looking for</param>
            <param name="localID">The local ID of the object</param>
        </member>
        <member name="M:libsecondlife.ObjectManager.RequestObjects(libsecondlife.Simulator,System.Collections.Generic.List{System.UInt32})">
            <summary>
            Request object information for multiple objects all contained in
            the same sim, primarily used for stale or missing cache entries
            </summary>
            <param name="simulator">The simulator containing the object you're
            looking for</param>
            <param name="localIDs">A list of local IDs of the objects</param>
        </member>
        <member name="M:libsecondlife.ObjectManager.BuyObject(libsecondlife.Simulator,System.UInt32,libsecondlife.SaleType,System.Int32,libsecondlife.LLUUID,libsecondlife.LLUUID)">
            <summary>
            Attempt to purchase an original object, a copy, or the contents of
            an object
            </summary>
            <param name="simulator">Simulator where the object resides</param>
            <param name="localID">Sim-local ID of the object</param>
            <param name="saleType">Whether the original, a copy, or the object
            contents are on sale. This is used for verification, if the this
            sale type is not valid for the object the purchase will fail</param>
            <param name="price">Price of the object. This is used for
            verification, if it does not match the actual price the purchase
            will fail</param>
            <param name="groupID">Group ID that will be associated with the new
            purchase</param>
            <param name="categoryID">Inventory folder UUID where the purchase
            should go</param>
            <example>BuyObject(Client.Network.CurrentSim, 500, SaleType.Copy,
            100, LLUUID.Zero, Client.Self.InventoryRootFolderUUID);</example>
        </member>
        <member name="M:libsecondlife.ObjectManager.SelectObject(libsecondlife.Simulator,System.UInt32)">
            <summary>
            Select an object. This will trigger the simulator to send us back
            an ObjectProperties packet so we can get the full information for
            this object
            </summary>
            <param name="simulator">Simulator where the object resides</param>
            <param name="localID">Sim-local ID of the object to select</param>
        </member>
        <member name="M:libsecondlife.ObjectManager.SelectObjects(libsecondlife.Simulator,System.UInt32[])">
            <summary>
            Select multiple objects. This will trigger the simulator to send us
            back ObjectProperties for each object
            </summary>
            <param name="simulator">
            </param>
            <param name="localIDs">
            </param>
        </member>
        <member name="M:libsecondlife.ObjectManager.ClickObject(libsecondlife.Simulator,System.UInt32)">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="localID">
            </param>
        </member>
        <member name="M:libsecondlife.ObjectManager.AddPrim(libsecondlife.Simulator,libsecondlife.LLObject.ObjectData,libsecondlife.LLUUID,libsecondlife.LLVector3,libsecondlife.LLVector3,libsecondlife.LLQuaternion)">
            <summary>
            Create, or "rez" a new prim object in a simulator
            </summary>
            <param name="simulator">The target simulator</param>
            <param name="prim">Data describing the prim object to rez</param>
            <param name="groupID">Group ID that this prim is set to, or LLUUID.Zero</param>
            <param name="position">An approximation of the position at which to rez the prim</param>
            <param name="scale">Scale vector to size this prim</param>
            <param name="rotation">Rotation quaternion to rotate this prim</param>
            <remarks>Due to the way client prim rezzing is done on the server,
            the requested position for an object is only close to where the prim
            actually ends up. If you desire exact placement you'll need to
            follow up by moving the object after it has been created. This
            function will not set textures, light and flexible data, or other
            extended primitive properties</remarks>
        </member>
        <member name="M:libsecondlife.ObjectManager.AddTree(libsecondlife.Simulator,libsecondlife.LLVector3,libsecondlife.LLQuaternion,libsecondlife.LLVector3,libsecondlife.ObjectManager.Tree,libsecondlife.LLUUID,System.Boolean)">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="scale">
            </param>
            <param name="rotation">
            </param>
            <param name="position">
            </param>
            <param name="treeType">
            </param>
            <param name="groupOwner">
            </param>
            <param name="newTree">
            </param>
        </member>
        <member name="M:libsecondlife.ObjectManager.AddGrass(libsecondlife.Simulator,libsecondlife.LLVector3,libsecondlife.LLQuaternion,libsecondlife.LLVector3,libsecondlife.ObjectManager.Grass,libsecondlife.LLUUID)">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="scale">
            </param>
            <param name="rotation">
            </param>
            <param name="position">
            </param>
            <param name="grassType">
            </param>
            <param name="groupOwner">
            </param>
        </member>
        <member name="M:libsecondlife.ObjectManager.SetTextures(libsecondlife.Simulator,System.UInt32,libsecondlife.LLObject.TextureEntry)">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="localID">
            </param>
            <param name="textures">
            </param>
        </member>
        <member name="M:libsecondlife.ObjectManager.SetTextures(libsecondlife.Simulator,System.UInt32,libsecondlife.LLObject.TextureEntry,System.String)">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="localID">
            </param>
            <param name="textures">
            </param>
            <param name="mediaUrl">
            </param>
        </member>
        <member name="M:libsecondlife.ObjectManager.SetLight(libsecondlife.Simulator,System.UInt32,libsecondlife.Primitive.LightData)">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="localID">
            </param>
            <param name="light">
            </param>
        </member>
        <member name="M:libsecondlife.ObjectManager.SetFlexible(libsecondlife.Simulator,System.UInt32,libsecondlife.Primitive.FlexibleData)">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="localID">
            </param>
            <param name="flexible">
            </param>
        </member>
        <member name="M:libsecondlife.ObjectManager.LinkPrims(libsecondlife.Simulator,System.Collections.Generic.List{System.UInt32})">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="localIDs">
            </param>
        </member>
        <member name="M:libsecondlife.ObjectManager.SetRotation(libsecondlife.Simulator,System.UInt32,libsecondlife.LLQuaternion)">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="localID">
            </param>
            <param name="rotation">
            </param>
        </member>
        <member name="M:libsecondlife.ObjectManager.SetName(libsecondlife.Simulator,System.UInt32,System.String)">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="localID">
            </param>
            <param name="name">
            </param>
        </member>
        <member name="M:libsecondlife.ObjectManager.SetNames(libsecondlife.Simulator,System.UInt32[],System.String[])">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="localIDs">
            </param>
            <param name="names">
            </param>
        </member>
        <member name="M:libsecondlife.ObjectManager.SetDescription(libsecondlife.Simulator,System.UInt32,System.String)">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="localID">
            </param>
            <param name="description">
            </param>
        </member>
        <member name="M:libsecondlife.ObjectManager.SetDescriptions(libsecondlife.Simulator,System.UInt32[],System.String[])">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="localIDs">
            </param>
            <param name="descriptions">
            </param>
        </member>
        <member name="M:libsecondlife.ObjectManager.AttachObject(libsecondlife.Simulator,System.UInt32,libsecondlife.ObjectManager.AttachmentPoint,libsecondlife.LLQuaternion)">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="localID">
            </param>
            <param name="attachPoint">
            </param>
            <param name="rotation">
            </param>
        </member>
        <member name="M:libsecondlife.ObjectManager.DetachObjects(libsecondlife.Simulator,System.Collections.Generic.List{System.UInt32})">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="localIDs">
            </param>
        </member>
        <member name="M:libsecondlife.ObjectManager.SetPosition(libsecondlife.Simulator,System.UInt32,libsecondlife.LLVector3)">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="localID">
            </param>
            <param name="position">
            </param>
        </member>
        <member name="M:libsecondlife.ObjectManager.SetPermissions(libsecondlife.Simulator,System.Collections.Generic.List{System.UInt32},libsecondlife.PermissionWho,libsecondlife.PermissionMask,System.Boolean)">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="localIDs">
            </param>
            <param name="who">
            </param>
            <param name="permissions">
            </param>
            <param name="set">
            </param>
        </member>
        <member name="M:libsecondlife.ObjectManager.RequestObjectPropertiesFamily(libsecondlife.Simulator,libsecondlife.LLUUID)">
            <summary>
            Request additional properties for an object
            </summary>
            <param name="simulator">
            </param>
            <param name="objectID">
            </param>
        </member>
        <member name="M:libsecondlife.ObjectManager.RequestObjectPropertiesFamily(libsecondlife.Simulator,libsecondlife.LLUUID,System.Boolean)">
            <summary>
            Request additional properties for an object
            </summary>
            <param name="simulator">Simulator containing the object</param>
            <param name="objectID">Absolute UUID of the object</param>
            <param name="reliable">Whether to require server acknowledgement of this request</param>
        </member>
        <member name="M:libsecondlife.ObjectManager.UpdateHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Used for new prims, or significant changes to existing prims
            </summary>
            <param name="packet">
            </param>
            <param name="simulator">
            </param>
        </member>
        <member name="M:libsecondlife.ObjectManager.TerseUpdateHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Usually called when an Prim moves.
            </summary>
            <param name="packet">
            </param>
            <param name="simulator">
            </param>
        </member>
        <member name="M:libsecondlife.ObjectManager.CompressedUpdateHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            </summary>
            <param name="packet">
            </param>
            <param name="simulator">
            </param>
        </member>
        <member name="M:libsecondlife.ObjectManager.BuildCube">
            <summary>
            Setup the ObjectData parameters for a basic wooden cube prim
            </summary>
            <returns>ObjectData struct representing a basic wooden cube prim</returns>
        </member>
        <member name="M:libsecondlife.ObjectManager.GetPrimitive(libsecondlife.Simulator,System.UInt32,libsecondlife.LLUUID)">
            <summary>
            Primitive Factory, this allows a subclass to lookup a copy of the Primitive
            and return it for updating, rather then always creating a new Primitive
            </summary>
            <param name="simulator">
            </param>
            <param name="LocalID">
            </param>
            <param name="UUID">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.ObjectManager.GetAvatar(libsecondlife.Simulator,System.UInt32,libsecondlife.LLUUID)">
            <summary>
            Primitive Factory, this allows a subclass to lookup a copy of the Avatar
            and return it for updating, rather then always creating a new Avatar
            </summary>
            <param name="simulator">
            </param>
            <param name="LocalID">
            </param>
            <param name="UUID">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.ObjectManager.llObjectUpdated(libsecondlife.Simulator,libsecondlife.LLObject)">
            <summary>
            Used to flag to a subclass that an LLObject was updated/created
            </summary>
            <param name="simulator">
            </param>
            <param name="obj">
            </param>
        </member>
        <member name="P:libsecondlife.WrappedObject`1.Instance">
            <summary>
            Returns an instance of the class that has been checked out of the Object Pool.
            </summary>
        </member>
        <member name="M:libsecondlife.WrappedObject`1.Dispose">
            <summary>
            Checkes the instance back into the object pool.
            </summary>
        </member>
        <member name="M:libsecondlife.ObjectPoolBase`1.#ctor">
            <summary>
            Creates a new instance of the ObjectPoolBase class. Initialize MUST be called
            after using this constructor.
            </summary>
        </member>
        <member name="M:libsecondlife.ObjectPoolBase`1.#ctor(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Creates a new instance of the ObjectPool Base class.
            </summary>
            <param name="itemsPerSegment">The object pool is composed of segments, which
            are allocated whenever the size of the pool is exceeded. The number of items
            in a segment should be large enough that allocating a new segmeng is a rare
            thing. For example, on a server that will have 10k people logged in at once,
            the receive buffer object pool should have segment sizes of at least 1000
            byte arrays per segment.
            </param>
            <param name="minimumSegmentCount">The minimun number of segments that may exist.</param>
            <param name="gcOnPoolGrowth">Perform a full GC.Collect whenever a segment is allocated, and then again after allocation to compact the heap.</param>
            <param name="cleanupFrequenceMS">The frequency which segments are checked to see if they're eligible for cleanup.</param>
        </member>
        <member name="P:libsecondlife.ObjectPoolBase`1.TotalSegments">
            <summary>
            The total number of segments created. Intended to be used by the Unit Tests.
            </summary>
        </member>
        <member name="P:libsecondlife.ObjectPoolBase`1.ItemsPerSegment">
            <summary>
            The number of items that are in a segment. Items in a segment
            are all allocated at the same time, and are hopefully close to
            each other in the managed heap.
            </summary>
        </member>
        <member name="P:libsecondlife.ObjectPoolBase`1.MinimumSegmentCount">
            <summary>
            The minimum number of segments. When segments are reclaimed,
            this number of segments will always be left alone. These
            segments are allocated at startup.
            </summary>
        </member>
        <member name="P:libsecondlife.ObjectPoolBase`1.MinimumSegmentAgePriorToCleanup">
            <summary>
            The age a segment must be before it's eligible for cleanup.
            This  is used to prevent thrash, and typical values are in
            the 5 minute range.
            </summary>
        </member>
        <member name="P:libsecondlife.ObjectPoolBase`1.CleanupFrequencyMilliseconds">
            <summary>
            The frequence which the cleanup thread runs. This is typically
            expected to be in the 5 minute range.
            </summary>
        </member>
        <member name="M:libsecondlife.ObjectPoolBase`1.ForceCleanup">
            <summary>
            Forces the segment cleanup algorithm to be run. This method is intended
            primarly for use from the Unit Test libraries.
            </summary>
        </member>
        <member name="M:libsecondlife.ObjectPoolBase`1.GetObjectInstance">
            <summary>
            Responsible for allocate 1 instance of an object that will be stored in a segment.
            </summary>
            <returns>An instance of whatever objec the pool is pooling.</returns>
        </member>
        <member name="M:libsecondlife.ObjectPoolBase`1.CheckIn(libsecondlife.ObjectPoolSegment{`0},`0)">
            <summary>
            Checks in an instance of T owned by the object pool. This method is only intended to be called
            by the <c>WrappedObject</c> class.
            </summary>
            <param name="owningSegment">The segment from which the instance is checked out.</param>
            <param name="instance">The instance of <c>T</c> to check back into the segment.</param>
        </member>
        <member name="M:libsecondlife.ObjectPoolBase`1.CheckOut">
            <summary>
            Checks an instance of <c>T</c> from the pool. If the pool is not sufficient to
            allow the checkout, a new segment is created.
            </summary>
            <returns>A <c>WrappedObject</c> around the instance of <c>T</c>. To check
            the instance back into the segment, be sureto dispose the WrappedObject
            when finished. </returns>
        </member>
        <member name="T:libsecondlife.ParcelInfo">
            <summary>
            Some information about a parcel of land
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelInfo.ID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelInfo.OwnerID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelInfo.Name">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelInfo.Description">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelInfo.ActualArea">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelInfo.BillableArea">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelInfo.Mature">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelInfo.GlobalX">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelInfo.GlobalY">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelInfo.GlobalZ">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelInfo.SimName">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelInfo.SnapshotID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelInfo.Dwell">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelInfo.SalePrice">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelInfo.AuctionID">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.Parcel">
            <summary>
            Parcel of land, a portion of virtual real estate in a simulator
            </summary>
        </member>
        <member name="M:libsecondlife.Parcel.#ctor(libsecondlife.Simulator,System.Int32)">
            <summary>
            Defalt constructor
            </summary>
            <param name="simulator">Simulator this parcel resides in</param>
            <param name="localID">Local ID of this parcel</param>
        </member>
        <member name="T:libsecondlife.Parcel.ParcelFlags">
            <summary>
            Various parcel properties
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.None">
            <summary>No flags set</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.AllowFly">
            <summary>Allow avatars to fly (a client-side only restriction)</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.AllowOtherScripts">
            <summary>Allow foreign scripts to run</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.ForSale">
            <summary>This parcel is for sale</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.AllowLandmark">
            <summary>Allow avatars to create a landmark on this parcel</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.AllowTerraform">
            <summary>Allows all avatars to edit the terrain on this parcel</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.AllowDamage">
            <summary>Avatars have health and can take damage on this parcel.
            If set, avatars can be killed and sent home here</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.CreateObjects">
            <summary>Foreign avatars can create objects here</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.ForSaleObjects">
            <summary>All objects on this parcel can be purchased</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.UseAccessGroup">
            <summary>Access is restricted to a group</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.UseAccessList">
            <summary>Access is restricted to a whitelist</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.UseBanList">
            <summary>Ban blacklist is enabled</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.UsePassList">
            <summary>Unknown</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.ShowDirectory">
            <summary>List this parcel in the search directory</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.AllowDeedToGroup">
            <summary>Unknown</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.ContributeWithDeed">
            <summary>Unknown</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.SoundLocal">
            <summary>Restrict sounds originating on this parcel to the
            parcel boundaries</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.SellParcelObjects">
            <summary>Objects on this parcel are sold when the land is
            purchsaed</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.AllowPublish">
            <summary>Allow this parcel to be published on the web</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.MaturePublish">
            <summary>The information for this parcel is mature content</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.UrlWebPage">
            <summary>The media URL is an HTML page</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.UrlRawHtml">
            <summary>The media URL is a raw HTML string</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.RestrictPushObject">
            <summary>Restrict foreign object pushes</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.DenyAnonymous">
            <summary>Ban all non identified/transacted avatars</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.DenyIdentified">
            <summary>Ban all identified avatars</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.DenyTransacted">
            <summary>Ban all transacted avatars</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.AllowGroupScripts">
            <summary>Allow group-owned scripts to run</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.CreateGroupObjects">
            <summary>Allow object creation by group members or group
            objects</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.AllowAllObjectEntry">
            <summary>Allow all objects to enter this parcel</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelFlags.AllowGroupObjectEntry">
            <summary>Only allow group and owner objects to enter this parcel</summary>
        </member>
        <member name="T:libsecondlife.Parcel.ParcelStatus">
            <summary>
            Parcel ownership status
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelStatus.None">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelStatus.Leased">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelStatus.LeasePending">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelStatus.Abandoned">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.Parcel.ParcelCategory">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelCategory.None">
            <summary>No assigned category</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelCategory.Linden">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelCategory.Adult">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelCategory.Arts">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelCategory.Business">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelCategory.Educational">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelCategory.Gaming">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelCategory.Hangout">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelCategory.Newcomer">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelCategory.Park">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelCategory.Residential">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelCategory.Shopping">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelCategory.Stage">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelCategory.Other">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelCategory.Any">
            <summary>Not an actual category, only used for queries</summary>
        </member>
        <member name="F:libsecondlife.Parcel.RequestResult">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.SequenceID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.SnapSelection">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.SelfCount">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.OtherCount">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.PublicCount">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.OwnerID">
            <summary>UUID of the owner of this parcel</summary>
        </member>
        <member name="F:libsecondlife.Parcel.IsGroupOwned">
            <summary>Whether the land is deeded to a group or not</summary>
        </member>
        <member name="F:libsecondlife.Parcel.AuctionID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.ClaimDate">
            <summary>Date land was claimed</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ClaimPrice">
            <summary>Appears to always be zero</summary>
        </member>
        <member name="F:libsecondlife.Parcel.RentPrice">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.AABBMin">
            <summary>Minimum corner of the axis-aligned bounding box for this
            parcel</summary>
        </member>
        <member name="F:libsecondlife.Parcel.AABBMax">
            <summary>Maximum corner of the axis-aligned bounding box for this
            parcel</summary>
        </member>
        <member name="F:libsecondlife.Parcel.Bitmap">
            <summary>Bitmap describing land layout in 4x4m squares across the
            entire region</summary>
        </member>
        <member name="F:libsecondlife.Parcel.Area">
            <summary>Total parcel land area</summary>
        </member>
        <member name="F:libsecondlife.Parcel.Status">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.SimWideMaxPrims">
            <summary>Maximum primitives across the entire simulator</summary>
        </member>
        <member name="F:libsecondlife.Parcel.SimWideTotalPrims">
            <summary>Total primitives across the entire simulator</summary>
        </member>
        <member name="F:libsecondlife.Parcel.MaxPrims">
            <summary>Maximum number of primitives this parcel supports</summary>
        </member>
        <member name="F:libsecondlife.Parcel.TotalPrims">
            <summary>Total number of primitives on this parcel</summary>
        </member>
        <member name="F:libsecondlife.Parcel.OwnerPrims">
            <summary>Total number of primitives owned by the parcel owner on
            this parcel</summary>
        </member>
        <member name="F:libsecondlife.Parcel.GroupPrims">
            <summary>Total number of primitives owned by the parcel group on
            this parcel</summary>
        </member>
        <member name="F:libsecondlife.Parcel.OtherPrims">
            <summary>Total number of other primitives on this parcel</summary>
        </member>
        <member name="F:libsecondlife.Parcel.SelectedPrims">
            <summary>Total number of primitives you are currently selecting and
            sitting on</summary>
        </member>
        <member name="F:libsecondlife.Parcel.ParcelPrimBonus">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.OtherCleanTime">
            <summary>Autoreturn value in minutes for others' objects</summary>
        </member>
        <member name="F:libsecondlife.Parcel.Flags">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.SalePrice">
            <summary>Sale price of the parcel, only useful if ForSale is set</summary>
            <remarks>The SalePrice will remain the same after an ownership
            transfer (sale), so it can be used to see the purchase price after
            a sale if the new owner has not changed it</remarks>
        </member>
        <member name="F:libsecondlife.Parcel.Name">
            <summary>Parcel Name</summary>
        </member>
        <member name="F:libsecondlife.Parcel.Desc">
            <summary>Parcel Description</summary>
        </member>
        <member name="F:libsecondlife.Parcel.MusicURL">
            <summary>URL For Music Stream</summary>
        </member>
        <member name="F:libsecondlife.Parcel.MediaURL">
            <summary>URL For other Media</summary>
        </member>
        <member name="F:libsecondlife.Parcel.MediaID">
            <summary>Key to Picture for Media Placeholder</summary>
        </member>
        <member name="F:libsecondlife.Parcel.MediaAutoScale">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.GroupID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.PassPrice">
            <summary>Price for a temporary pass</summary>
        </member>
        <member name="F:libsecondlife.Parcel.PassHours">
            <summary>How long is pass valid for</summary>
        </member>
        <member name="F:libsecondlife.Parcel.Category">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.AuthBuyerID">
            <summary>Key of authorized buyer</summary>
        </member>
        <member name="F:libsecondlife.Parcel.SnapshotID">
            <summary>Key of parcel snapshot</summary>
        </member>
        <member name="F:libsecondlife.Parcel.UserLocation">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.UserLookAt">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.LandingType">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.Dwell">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.RegionDenyAnonymous">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.RegionDenyIdentified">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.RegionDenyTransacted">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.RegionPushOverride">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.Simulator">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Parcel.AccessList">
            <summary>Access list of who is whitelisted or blacklisted on this
            parcel</summary>
        </member>
        <member name="P:libsecondlife.Parcel.LocalID">
            <summary>Simulator-local ID of this parcel</summary>
        </member>
        <member name="M:libsecondlife.Parcel.Update(System.Boolean)">
            <summary>
            Update the simulator with any local changes to this Parcel object
            </summary>
            <param name="wantReply">Whether we want the simulator to confirm
            the update with a reply packet or not</param>
        </member>
        <member name="T:libsecondlife.ParcelManager">
            <summary>
            Parcel (subdivided simulator lots) subsystem
            </summary>
        </member>
        <member name="M:libsecondlife.ParcelManager.#ctor(libsecondlife.SecondLife)">
            <summary>
            Default constructor
            </summary>
            <param name="client">A reference to the SecondLife client</param>
        </member>
        <member name="T:libsecondlife.ParcelManager.ObjectReturnType">
            <summary>
            Type of return to use when returning objects from a parcel
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelManager.ObjectReturnType.None">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelManager.ObjectReturnType.Owner">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelManager.ObjectReturnType.Group">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelManager.ObjectReturnType.Other">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelManager.ObjectReturnType.List">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelManager.ObjectReturnType.Sell">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.ParcelManager.ParcelAccessFlags">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelManager.ParcelAccessFlags.NoAccess">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelManager.ParcelAccessFlags.Access">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.ParcelManager.ParcelResult">
            <summary>
            The result of a request for parcel properties
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelManager.ParcelResult.NoData">
            <summary>No matches were found for the request</summary>
        </member>
        <member name="F:libsecondlife.ParcelManager.ParcelResult.Single">
            <summary>Request matched a single parcel</summary>
        </member>
        <member name="F:libsecondlife.ParcelManager.ParcelResult.Multiple">
            <summary>Request matched multiple parcels</summary>
        </member>
        <member name="T:libsecondlife.ParcelManager.AccessList">
            <summary>
            Flags used in the ParcelAccessListRequest packet to specify whether
            we want the access list (whitelist), ban list (blacklist), or both
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelManager.AccessList.Access">
            <summary>Request the access list</summary>
        </member>
        <member name="F:libsecondlife.ParcelManager.AccessList.Ban">
            <summary>Request the ban list</summary>
        </member>
        <member name="F:libsecondlife.ParcelManager.AccessList.Both">
            <summary>Request both the access list and ban list</summary>
        </member>
        <member name="T:libsecondlife.ParcelManager.ParcelAccessEntry">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelManager.ParcelAccessEntry.AgentID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelManager.ParcelAccessEntry.Time">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ParcelManager.ParcelAccessEntry.Flags">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.ParcelManager.ParcelDwellCallback">
            <summary>
            </summary>
            <param name="parcelID">UUID of the requested parcel</param>
            <param name="localID">Simulator-local ID of the requested parcel</param>
            <param name="dwell">Dwell value of the requested parcel</param>
        </member>
        <member name="T:libsecondlife.ParcelManager.ParcelInfoCallback">
            <summary>
            </summary>
            <param name="parcel">
            </param>
        </member>
        <member name="T:libsecondlife.ParcelManager.ParcelPropertiesCallback">
            <summary>
            </summary>
            <param name="parcel">Full properties for a single parcel. If result
            is NoData this will be incomplete or incorrect data</param>
            <param name="result">Success of the query</param>
            <param name="sequenceID">User-assigned identifier for the query</param>
            <param name="snapSelection">User-assigned boolean for the query</param>
        </member>
        <member name="T:libsecondlife.ParcelManager.ParcelAccessListReplyCallback">
            <summary>
            </summary>
            <param name="sequenceID">
            </param>
            <param name="localID">
            </param>
            <param name="flags">
            </param>
            <param name="accessEntries">
            </param>
        </member>
        <member name="E:libsecondlife.ParcelManager.OnParcelDwell">
            <summary>
            </summary>
        </member>
        <member name="E:libsecondlife.ParcelManager.OnParcelInfo">
            <summary>
            </summary>
        </member>
        <member name="E:libsecondlife.ParcelManager.OnParcelProperties">
            <summary>
            </summary>
        </member>
        <member name="E:libsecondlife.ParcelManager.OnAccessListReply">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.ParcelManager.InfoRequest(libsecondlife.LLUUID)">
            <summary>
            Request basic information for a single parcel
            </summary>
            <param name="parcelID">Simulator-local ID of the parcel</param>
        </member>
        <member name="M:libsecondlife.ParcelManager.PropertiesRequest(libsecondlife.Simulator,System.Int32,System.Int32)">
            <summary>
            Request properties of a single parcel
            </summary>
            <param name="simulator">Simulator containing the parcel</param>
            <param name="localID">Simulator-local ID of the parcel</param>
            <param name="sequenceID">An arbitrary integer that will be returned
            with the ParcelProperties reply, useful for distinguishing between
            multiple simultaneous requests</param>
        </member>
        <member name="M:libsecondlife.ParcelManager.AccessListRequest(libsecondlife.Simulator,System.Int32,libsecondlife.ParcelManager.AccessList,System.Int32)">
            <summary>
            Request the access list for a single parcel
            </summary>
            <param name="simulator">Simulator containing the parcel</param>
            <param name="localID">Simulator-local ID of the parcel</param>
            <param name="sequenceID">An arbitrary integer that will be returned
            with the ParcelAccessList reply, useful for distinguishing between
            multiple simultaneous requests</param>
        </member>
        <member name="M:libsecondlife.ParcelManager.PropertiesRequest(libsecondlife.Simulator,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Request properties of parcels using a bounding box selection
            </summary>
            <param name="simulator">Simulator containing the parcel</param>
            <param name="north">Northern boundary of the parcel selection</param>
            <param name="east">Eastern boundary of the parcel selection</param>
            <param name="south">Southern boundary of the parcel selection</param>
            <param name="west">Western boundary of the parcel selection</param>
            <param name="sequenceID">An arbitrary integer that will be returned
            with the ParcelProperties reply, useful for distinguishing between
            different types of parcel property requests</param>
            <param name="snapSelection">A boolean that is returned with the
            ParcelProperties reply, useful for snapping focus to a single
            parcel</param>
        </member>
        <member name="M:libsecondlife.ParcelManager.DwellRequest(libsecondlife.Simulator,System.Int32)">
            <summary>
            Request the dwell value for a parcel
            </summary>
            <param name="simulator">Simulator containing the parcel</param>
            <param name="localID">Simulator-local ID of the parcel</param>
        </member>
        <member name="M:libsecondlife.ParcelManager.Buy(libsecondlife.Simulator,System.Int32,System.Boolean,libsecondlife.LLUUID,System.Boolean,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="localID">
            </param>
            <param name="forGroup">
            </param>
            <param name="groupID">
            </param>
            <param name="removeContribution">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.ParcelManager.Reclaim(libsecondlife.Simulator,System.Int32)">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="localID">
            </param>
        </member>
        <member name="M:libsecondlife.ParcelManager.DeedToGroup(libsecondlife.Simulator,System.Int32,libsecondlife.LLUUID)">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="localID">
            </param>
            <param name="groupID">
            </param>
        </member>
        <member name="M:libsecondlife.ParcelManager.ReturnObjects(libsecondlife.Simulator,System.Int32,libsecondlife.ParcelManager.ObjectReturnType,System.Collections.Generic.List{libsecondlife.LLUUID})">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="localID">
            </param>
            <param name="type">
            </param>
            <param name="ownerIDs">
            </param>
        </member>
        <member name="M:libsecondlife.ParcelManager.ParcelSubdivide(libsecondlife.Simulator,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="west">
            </param>
            <param name="south">
            </param>
            <param name="east">
            </param>
            <param name="north">
            </param>
        </member>
        <member name="M:libsecondlife.ParcelManager.ParcelJoin(libsecondlife.Simulator,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="west">
            </param>
            <param name="south">
            </param>
            <param name="east">
            </param>
            <param name="north">
            </param>
        </member>
        <member name="M:libsecondlife.Primitive.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:libsecondlife.Primitive.ParticleSystem">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.Primitive.ParticleSystem.#ctor(System.Byte[],System.Int32)">
            <summary>
            </summary>
            <param name="data">
            </param>
            <param name="pos">
            </param>
        </member>
        <member name="T:libsecondlife.Primitive.ParticleSystem.SourcePattern">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.ParticleSystem.SourcePattern.None">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.ParticleSystem.SourcePattern.Drop">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.ParticleSystem.SourcePattern.Explode">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.ParticleSystem.SourcePattern.Angle">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.ParticleSystem.SourcePattern.AngleCone">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.ParticleSystem.SourcePattern.AngleConeEmpty">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.Primitive.ParticleSystem.ParticleDataFlags">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.ParticleSystem.ParticleDataFlags.None">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.ParticleSystem.ParticleDataFlags.InterpColor">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.ParticleSystem.ParticleDataFlags.InterpScale">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.ParticleSystem.ParticleDataFlags.Bounce">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.ParticleSystem.ParticleDataFlags.Wind">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.ParticleSystem.ParticleDataFlags.FollowSrc">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.ParticleSystem.ParticleDataFlags.FollowVelocity">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.ParticleSystem.ParticleDataFlags.TargetPos">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.ParticleSystem.ParticleDataFlags.TargetLinear">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.ParticleSystem.ParticleDataFlags.Emissive">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.ParticleSystem.ParticleDataFlags.Beam">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.Primitive.ParticleSystem.ParticleFlags">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.ParticleSystem.ParticleFlags.None">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.ParticleSystem.ParticleFlags.ObjectRelative">
            <summary>Acceleration and velocity for particles are
            relative to the object rotation</summary>
        </member>
        <member name="F:libsecondlife.Primitive.ParticleSystem.ParticleFlags.UseNewAngle">
            <summary>Particles use new 'correct' angle parameters</summary>
        </member>
        <member name="F:libsecondlife.Primitive.ParticleSystem.PartFlags">
            <summary>
            </summary>
            <remarks>There appears to be more data packed in to this area
            for many particle systems. It doesn't appear to be flag values
            and serialization breaks unless there is a flag for every
            possible bit so it is left as an unsigned integer</remarks>
        </member>
        <member name="M:libsecondlife.Primitive.ParticleSystem.GetBytes">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:libsecondlife.Primitive.ExtraParamType">
            <summary>
            Extra parameters for primitives, these flags are for features that have
            been added after the original ObjectFlags that has all eight bits
            reserved already
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.ExtraParamType.Flexible">
            <summary>Whether this object has flexible parameters</summary>
        </member>
        <member name="F:libsecondlife.Primitive.ExtraParamType.Light">
            <summary>Whether this object has light parameters</summary>
        </member>
        <member name="F:libsecondlife.Primitive.ExtraParamType.Sculpt">
            <summary>Whether this object is a sculpted prim</summary>
        </member>
        <member name="T:libsecondlife.Primitive.JointType">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.JointType.Invalid">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.JointType.Hinge">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.JointType.Point">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.JointType.LPoint">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.JointType.Wheel">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.Primitive.SculptType">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.SculptType.None">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.SculptType.Sphere">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.SculptType.Torus">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.SculptType.Plane">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.SculptType.Cylinder">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.Primitive.TextureAnimation">
            <summary>
            Controls the texture animation of a particular prim
            </summary>
        </member>
        <member name="M:libsecondlife.Primitive.TextureAnimation.#ctor(System.Byte[],System.Int32)">
            <summary>
            </summary>
            <param name="data">
            </param>
            <param name="pos">
            </param>
        </member>
        <member name="F:libsecondlife.Primitive.TextureAnimation.Flags">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.TextureAnimation.Face">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.TextureAnimation.SizeX">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.TextureAnimation.SizeY">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.TextureAnimation.Start">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.TextureAnimation.Length">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.TextureAnimation.Rate">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.Primitive.TextureAnimation.GetBytes">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:libsecondlife.Primitive.FlexibleData">
            <summary>
            Information on the flexible properties of a primitive
            </summary>
        </member>
        <member name="M:libsecondlife.Primitive.FlexibleData.#ctor(System.Byte[],System.Int32)">
            <summary>
            </summary>
            <param name="data">
            </param>
            <param name="pos">
            </param>
        </member>
        <member name="F:libsecondlife.Primitive.FlexibleData.Softness">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.FlexibleData.Gravity">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.FlexibleData.Drag">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.FlexibleData.Wind">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.FlexibleData.Tension">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.FlexibleData.Force">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.Primitive.FlexibleData.GetBytes">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:libsecondlife.Primitive.LightData">
            <summary>
            Information on the light properties of a primitive
            </summary>
        </member>
        <member name="M:libsecondlife.Primitive.LightData.#ctor(System.Byte[],System.Int32)">
            <summary>
            </summary>
            <param name="data">
            </param>
            <param name="pos">
            </param>
        </member>
        <member name="F:libsecondlife.Primitive.LightData.Color">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.LightData.Radius">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.LightData.Cutoff">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.LightData.Falloff">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.Primitive.LightData.GetBytes">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:libsecondlife.Primitive.SculptData">
            <summary>
            Information on the sculpt properties of a sculpted primitive
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.TextureAnim">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.Flexible">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.Light">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.Sculpt">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.ParticleSys">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.ClickAction">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.Sound">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.OwnerID">
            <summary>Identifies the owner of the audio or particle system</summary>
        </member>
        <member name="F:libsecondlife.Primitive.SoundFlags">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.SoundGain">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.SoundRadius">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.Text">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.TextColor">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.MediaURL">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.Joint">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.JointPivot">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Primitive.JointAxisOrAnchor">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.PermissionMask">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.PermissionWho">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.PermissionWho.Owner">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.PermissionWho.Group">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.PermissionWho.Everyone">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.PermissionWho.NextOwner">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.PermissionWho.All">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.Permissions">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.PacketFrequency">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.PacketFrequency.Low">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.PacketFrequency.Medium">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.PacketFrequency.High">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.FieldType">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.FieldType.U8">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.FieldType.U16">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.FieldType.U32">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.FieldType.U64">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.FieldType.S8">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.FieldType.S16">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.FieldType.S32">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.FieldType.F32">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.FieldType.F64">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.FieldType.LLUUID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.FieldType.BOOL">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.FieldType.LLVector3">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.FieldType.LLVector3d">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.FieldType.LLVector4">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.FieldType.LLQuaternion">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.FieldType.IPADDR">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.FieldType.IPPORT">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.FieldType.Variable">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.FieldType.Fixed">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.FieldType.Single">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.FieldType.Multiple">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.MapField">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MapField.KeywordPosition">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MapField.Name">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MapField.Type">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MapField.Count">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.MapField.CompareTo(System.Object)">
            <summary>
            </summary>
            <param name="obj">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:libsecondlife.MapBlock">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MapBlock.KeywordPosition">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MapBlock.Name">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MapBlock.Count">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MapBlock.Fields">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.MapBlock.CompareTo(System.Object)">
            <summary>
            </summary>
            <param name="obj">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:libsecondlife.MapPacket">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MapPacket.ID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MapPacket.Name">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MapPacket.Frequency">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MapPacket.Trusted">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MapPacket.Encoded">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.MapPacket.Blocks">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.ProtocolManager">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.ProtocolManager.#ctor(System.String,libsecondlife.SecondLife)">
            <summary>
            </summary>
            <param name="mapFile">
            </param>
            <param name="client">
            </param>
        </member>
        <member name="F:libsecondlife.ProtocolManager.TypeSizes">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ProtocolManager.KeywordPositions">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ProtocolManager.LowMaps">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ProtocolManager.MediumMaps">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.ProtocolManager.HighMaps">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.ProtocolManager.Command(System.String)">
            <summary>
            </summary>
            <param name="command">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.ProtocolManager.Command(System.Byte[])">
            <summary>
            </summary>
            <param name="data">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.ProtocolManager.Command(System.UInt16,libsecondlife.PacketFrequency)">
            <summary>
            </summary>
            <param name="command">
            </param>
            <param name="frequency">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.ProtocolManager.PrintMap">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.ProtocolManager.PrintOneMap(libsecondlife.MapPacket[],System.String)">
            <summary>
            </summary>
            <param name="map">
            </param>
            <param name="frequency">
            </param>
        </member>
        <member name="M:libsecondlife.ProtocolManager.DecodeMapFile(System.String,System.String)">
            <summary>
            </summary>
            <param name="mapFile">
            </param>
            <param name="outputFile">
            </param>
        </member>
        <member name="M:libsecondlife.ProtocolManager.LoadMapFile(System.String)">
            <summary>
            </summary>
            <param name="mapFile">
            </param>
        </member>
        <member name="T:libsecondlife.SecondLife">
            <summary>
            Main class to expose Second Life functionality to clients. All of the
            classes needed for sending and receiving data are accessible through
            this class.
            </summary>
        </member>
        <member name="M:libsecondlife.SecondLife.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:libsecondlife.SecondLife.LogCallback">
            <summary>
            Callback used for client apps to receive log messages from
            libsecondlife
            </summary>
            <param name="message">
            </param>
            <param name="level">
            </param>
        </member>
        <member name="F:libsecondlife.SecondLife.Network">
            <summary>Networking Subsystem</summary>
        </member>
        <member name="F:libsecondlife.SecondLife.Settings">
            <summary>Settings class including constant values and changeable
            parameters for everything</summary>
        </member>
        <member name="F:libsecondlife.SecondLife.Parcels">
            <summary>Parcel (subdivided simulator lots) Subsystem</summary>
        </member>
        <member name="F:libsecondlife.SecondLife.Self">
            <summary>'Client's Avatar' Subsystem</summary>
        </member>
        <member name="F:libsecondlife.SecondLife.Avatars">
            <summary>Other Avatars Subsystem</summary>
        </member>
        <member name="F:libsecondlife.SecondLife.Friends">
            <summary>Friends List Subsystem</summary>
        </member>
        <member name="F:libsecondlife.SecondLife.Grid">
            <summary>Grid (aka simulator group) Subsystem</summary>
        </member>
        <member name="F:libsecondlife.SecondLife.Objects">
            <summary>Object Subsystem</summary>
        </member>
        <member name="F:libsecondlife.SecondLife.Groups">
            <summary>Group Subsystem</summary>
        </member>
        <member name="F:libsecondlife.SecondLife.Assets">
            <summary>Asset Subsystem</summary>
        </member>
        <member name="F:libsecondlife.SecondLife.Appearance">
            <summary>Appearance Subsystem</summary>
        </member>
        <member name="F:libsecondlife.SecondLife.Inventory">
            <summary>Inventory Subsystem</summary>
        </member>
        <member name="F:libsecondlife.SecondLife.Directory">
            <summary>Directory searches including classifieds, people, land
            sales, etc</summary>
        </member>
        <member name="F:libsecondlife.SecondLife.Terrain">
            <summary>Handles land, wind, and cloud heightmaps</summary>
        </member>
        <member name="F:libsecondlife.SecondLife.Sound">
            <summary>Handles sound-related networking</summary>
        </member>
        <member name="F:libsecondlife.SecondLife.Throttle">
            <summary>Throttling total bandwidth usage, or allocating bandwidth
            for specific data stream types</summary>
        </member>
        <member name="E:libsecondlife.SecondLife.OnLogMessage">
            <summary>Triggered whenever a message is logged.
            If this is left null, log messages will go to
            the console</summary>
        </member>
        <member name="M:libsecondlife.SecondLife.ToString">
            <summary>
            Return the full name of this instance
            </summary>
            <returns>Client avatars full name</returns>
        </member>
        <member name="M:libsecondlife.SecondLife.Log(System.String,libsecondlife.Helpers.LogLevel)">
            <summary>
            Send a log message to the debugging output system
            </summary>
            <param name="message">The log message</param>
            <param name="level">The severity of the log entry</param>
        </member>
        <member name="M:libsecondlife.SecondLife.DebugLog(System.String)">
            <summary>
            If the library is compiled with DEBUG defined, and SecondLife.Debug
            is true, either an event will be fired for the debug message or
            it will be written to the console
            </summary>
            <param name="message">The debug message</param>
        </member>
        <member name="M:libsecondlife.SecondLife.LogStatic(System.String,libsecondlife.Helpers.LogLevel)">
            <summary>
            </summary>
            <param name="message">
            </param>
            <param name="level">
            </param>
        </member>
        <member name="M:libsecondlife.SecondLife.LogStatic(System.String,libsecondlife.Helpers.LogLevel,System.Exception)">
            <summary>
            </summary>
            <param name="message">
            </param>
            <param name="level">
            </param>
            <param name="exception">
            </param>
        </member>
        <member name="M:libsecondlife.SecondLife.DebugLogStatic(System.String)">
            <summary>
            </summary>
            <param name="message">
            </param>
        </member>
        <member name="T:libsecondlife.SerializableDictionary`2">
            <summary>
            A generic dictionary that can be serialized to XML
            </summary>
            <typeparam name="TKey">Key type, used as indices to values</typeparam>
            <typeparam name="TValue">Value type</typeparam>
        </member>
        <member name="M:libsecondlife.SerializableDictionary`2.GetSchema">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            </summary>
            <param name="reader">
            </param>
        </member>
        <member name="M:libsecondlife.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            </summary>
            <param name="writer">
            </param>
        </member>
        <member name="T:libsecondlife.Settings">
            <summary>
            Class for controlling various system settings.
            </summary>
            <remarks>Some values are readonly because they affect things that
            happen when the SecondLife object is initialized, so changing them at
            runtime won't do any good. Non-readonly values may affect things that
            happen at login or dynamically</remarks>
        </member>
        <member name="M:libsecondlife.Settings.#ctor(libsecondlife.SecondLife)">
            <summary>Constructor</summary>
            <param name="client">Reference to a SecondLife client object</param>
        </member>
        <member name="F:libsecondlife.Settings.PACKET_INBOX_SIZE">
            <summary>The initial size of the packet inbox, where packets are
            stored before processing</summary>
        </member>
        <member name="F:libsecondlife.Settings.MAX_PACKET_SIZE">
            <summary>Maximum size of packet that we want to send over the wire</summary>
        </member>
        <member name="F:libsecondlife.Settings.NETWORK_TICK_LENGTH">
            <summary>Millisecond interval between ticks, where all ACKs are
            sent out and the age of unACKed packets is checked</summary>
        </member>
        <member name="F:libsecondlife.Settings.MAX_SEQUENCE">
            <summary>The maximum value of a packet sequence number before it
            rolls over back to one</summary>
        </member>
        <member name="F:libsecondlife.Settings.PACKET_ARCHIVE_SIZE">
            <summary>The maximum size of the sequence number archive, used to
            check for resent and/or duplicate packets</summary>
        </member>
        <member name="F:libsecondlife.Settings.PING_INTERVAL">
            <summary>Number of milliseconds between sending pings to each sim</summary>
        </member>
        <member name="F:libsecondlife.Settings.AGENT_UPDATE_INTERVAL">
            <summary>Number of milliseconds between sending camera updates</summary>
        </member>
        <member name="F:libsecondlife.Settings.INTERPOLATION_UPDATE">
            <summary>Number of milliseconds between updating the current
            positions of moving, non-accelerating and non-colliding objects</summary>
        </member>
        <member name="F:libsecondlife.Settings.VERSION">
            <summary>The version of libsecondlife (not the SL protocol itself)</summary>
        </member>
        <member name="F:libsecondlife.Settings.LOGIN_SERVER">
            <summary>XML-RPC login server to connect to</summary>
        </member>
        <member name="F:libsecondlife.Settings.RESOURCE_DIR">
            <summary>The relative directory where files needed for baking are kept</summary>
        </member>
        <member name="F:libsecondlife.Settings.TELEPORT_TIMEOUT">
            <summary>Number of milliseconds before a teleport attempt will time
            out</summary>
        </member>
        <member name="F:libsecondlife.Settings.LOGOUT_TIMEOUT">
            <summary>Number of milliseconds before NetworkManager.Logout() will
            time out</summary>
        </member>
        <member name="F:libsecondlife.Settings.CAPS_TIMEOUT">
            <summary>Number of milliseconds before a CAPS call will time out
            and try again</summary>
            <remarks>Setting this too low will cause web requests to repeatedly
            time out and retry</remarks>
        </member>
        <member name="F:libsecondlife.Settings.LOGIN_TIMEOUT">
            <summary>Number of milliseconds for xml-rpc to timeout</summary>
        </member>
        <member name="F:libsecondlife.Settings.RESEND_TIMEOUT">
            <summary>Milliseconds before a packet is assumed lost and resent</summary>
        </member>
        <member name="F:libsecondlife.Settings.SIMULATOR_TIMEOUT">
            <summary>Milliseconds without receiving a packet before the
            connection to a simulator is assumed lost</summary>
        </member>
        <member name="F:libsecondlife.Settings.MAP_REQUEST_TIMEOUT">
            <summary>Milliseconds to wait for a simulator info request through
            the grid interface</summary>
        </member>
        <member name="F:libsecondlife.Settings.MAX_PENDING_ACKS">
            <summary>Maximum number of queued ACKs to be sent before SendAcks()
            is forced</summary>
        </member>
        <member name="F:libsecondlife.Settings.MAX_APPENDED_ACKS">
            <summary>Maximum number of ACKs to append to a packet</summary>
        </member>
        <member name="F:libsecondlife.Settings.STATS_QUEUE_SIZE">
            <summary>Network stats queue length (seconds)</summary>
        </member>
        <member name="F:libsecondlife.Settings.SYNC_PACKETCALLBACKS">
            <summary>Enable to process packets synchronously, where all of the
            callbacks for each packet must return before the next packet is
            processed</summary>
            <remarks>This is an experimental feature and is not completely
            reliable yet. Ideally it would reduce context switches and thread
            overhead, but several calls currently block for a long time and
            would need to be rewritten as asynchronous code before this is
            feasible</remarks>
        </member>
        <member name="F:libsecondlife.Settings.DEBUG">
            <summary>Enable/disable debugging log messages</summary>
        </member>
        <member name="F:libsecondlife.Settings.LOG_NAMES">
            <summary>Attach avatar names to log messages</summary>
        </member>
        <member name="F:libsecondlife.Settings.LOG_RESENDS">
            <summary>Log packet retransmission info</summary>
        </member>
        <member name="F:libsecondlife.Settings.STORE_LAND_PATCHES">
            <summary>Enable/disable storing terrain heightmaps in the
            TerrainManager</summary>
        </member>
        <member name="F:libsecondlife.Settings.SEND_AGENT_UPDATES">
            <summary>Enable/disable sending periodic camera updates</summary>
        </member>
        <member name="F:libsecondlife.Settings.SEND_AGENT_THROTTLE">
            <summary>Enable/disable libsecondlife automatically setting the
            bandwidth throttle after connecting to each simulator</summary>
            <remarks>The default libsecondlife throttle uses the equivalent of
            the maximum bandwidth setting in the official client. If you do not
            set a throttle your connection will by default be throttled well
            below the minimum values and you may experience connection problems</remarks>
        </member>
        <member name="F:libsecondlife.Settings.SEND_PINGS">
            <summary>Enable/disable the sending of pings to monitor lag and
            packet loss</summary>
        </member>
        <member name="F:libsecondlife.Settings.MULTIPLE_SIMS">
            <summary>Should we connect to multiple sims? This will allow
            viewing in to neighboring simulators and sim crossings
            (Experimental)</summary>
        </member>
        <member name="F:libsecondlife.Settings.ALWAYS_DECODE_OBJECTS">
            <summary>If true, all object update packets will be decoded in to
            native objects. If false, only updates for our own agent will be
            decoded. Registering an event handler will force objects for that
            type to always be decoded</summary>
        </member>
        <member name="F:libsecondlife.Settings.ALWAYS_REQUEST_OBJECTS">
            <summary>If true, when a cached object check is received from the
            server the full object info will automatically be requested</summary>
        </member>
        <member name="F:libsecondlife.Settings.ENABLE_CAPS">
            <summary>Whether to establish connections to HTTP capabilities
            servers for simulators</summary>
        </member>
        <member name="F:libsecondlife.Settings.ENABLE_SIMSTATS">
            <summary>Whether to decode sim stats</summary>
        </member>
        <member name="F:libsecondlife.Settings.LOG_ALL_CAPS_ERRORS">
            <summary>The capabilities servers are currently designed to
            periodically return a 502 error which signals for the client to
            re-establish a connection. Set this to true to log those 502 errors</summary>
        </member>
        <member name="F:libsecondlife.Settings.FETCH_MISSING_INVENTORY">
            <summary>If true, any reference received for a folder or item
            libsecondlife is not aware of will automatically be fetched.</summary>
        </member>
        <member name="P:libsecondlife.Settings.UPLOAD_COST">
            <summary>Cost of uploading an asset</summary>
            <remarks>Read-only since this value is dynamically fetched at login</remarks>
        </member>
        <member name="M:libsecondlife.Settings.EconomyDataHandler(libsecondlife.Packets.Packet,libsecondlife.Simulator)">
            <summary>
            Gets the cost of uploading an asset to the grid
            </summary>
            <param name="packet">
            </param>
            <param name="simulator">
            </param>
        </member>
        <member name="T:libsecondlife.Simulator">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.Simulator.#ctor(libsecondlife.SecondLife,System.Net.IPEndPoint,System.UInt64)">
            <summary>
            </summary>
            <param name="client">Reference to the SecondLife client</param>
            <param name="port">
            </param>
        </member>
        <member name="T:libsecondlife.Simulator.RegionFlags">
            <summary>
            Simulator (region) properties
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.None">
            <summary>No flags set</summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.AllowDamage">
            <summary>Agents can take damage and be killed</summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.AllowLandmark">
            <summary>Landmarks can be created here</summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.AllowSetHome">
            <summary>Home position can be set in this sim</summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.ResetHomeOnTeleport">
            <summary>Home position is reset when an agent teleports away</summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.SunFixed">
            <summary>Sun does not move</summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.TaxFree">
            <summary>No object, land, etc. taxes</summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.BlockTerraform">
            <summary>Disable heightmap alterations (agents can still plant
            foliage)</summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.BlockLandResell">
            <summary>Land cannot be released, sold, or purchased</summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.Sandbox">
            <summary>All content is wiped nightly</summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.NullLayer">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.SkipAgentAction">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.SkipUpdateInterestList">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.SkipCollisions">
            <summary>No collision detection for non-agent objects</summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.SkipScripts">
            <summary>No scripts are ran</summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.SkipPhysics">
            <summary>All physics processing is turned off</summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.ExternallyVisible">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.MainlandVisible">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.PublicAllowed">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.BlockDwell">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.NoFly">
            <summary>Flight is disabled (not currently enforced by the sim)</summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.AllowDirectTeleport">
            <summary>Allow direct (p2p) teleporting</summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.EstateSkipScripts">
            <summary>Estate owner has temporarily disabled scripting</summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.RestrictPushObject">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.DenyAnonymous">
            <summary>Deny agents with no payment info on file</summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.DenyIdentified">
            <summary>Deny agents with payment info on file</summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.DenyTransacted">
            <summary>Deny agents who have made a monetary transaction</summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.AllowParcelChanges">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.RegionFlags.AbuseEmailToEstateOwner">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.Simulator.SimAccess">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.SimAccess.Min">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.SimAccess.Trial">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.SimAccess.PG">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.SimAccess.Mature">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.SimAccess.Down">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.SimAccess.NonExistent">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.Client">
            <summary>A public reference to the client that this Simulator object
            is attached to</summary>
        </member>
        <member name="F:libsecondlife.Simulator.ID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.SimCaps">
            <summary>The capabilities for this simulator</summary>
        </member>
        <member name="F:libsecondlife.Simulator.Handle">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.Name">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.ParcelOverlay">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.ParcelOverlaysReceived">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.TerrainHeightRange00">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.TerrainHeightRange01">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.TerrainHeightRange10">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.TerrainHeightRange11">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.TerrainStartHeight00">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.TerrainStartHeight01">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.TerrainStartHeight10">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.TerrainStartHeight11">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.WaterHeight">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.SimOwner">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.TerrainBase0">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.TerrainBase1">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.TerrainBase2">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.TerrainBase3">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.TerrainDetail0">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.TerrainDetail1">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.TerrainDetail2">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.TerrainDetail3">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.IsEstateManager">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.Estate">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.Flags">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.Access">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.BillableFactor">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.SentPackets">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.RecvPackets">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.SentBytes">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.RecvBytes">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.ConnectTime">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.ResentPackets">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.ReceivedResends">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.SentPings">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.ReceivedPongs">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.IncomingBPS">
            <summary>
            Incoming bytes per second
            </summary>
            <remarks>It would be nice to have this claculated on the fly, but
            this is far, far easier</remarks>
        </member>
        <member name="F:libsecondlife.Simulator.OutgoingBPS">
            <summary>
            Outgoing bytes per second
            </summary>
            <remarks>It would be nice to have this claculated on the fly, but
            this is far, far easier</remarks>
        </member>
        <member name="F:libsecondlife.Simulator.LastPingSent">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.LastPingID">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.LastLag">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.MissedPings">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Simulator.Dilation">
            <summary>Current time dilation of this simulator</summary>
        </member>
        <member name="F:libsecondlife.Simulator.SequenceLock">
            <summary>Used to obtain a lock on the sequence number for packets
            sent to this simulator. Only useful for applications manipulating
            sequence numbers</summary>
        </member>
        <member name="F:libsecondlife.Simulator.Sequence">
            <summary>The current sequence number for packets sent to this
            simulator. Must be locked with SequenceLock before modifying. Only
            useful for applications manipulating sequence numbers</summary>
        </member>
        <member name="F:libsecondlife.Simulator.DisconnectCandidate">
            <summary>Used internally to track sim disconnections</summary>
        </member>
        <member name="F:libsecondlife.Simulator.ConnectedEvent">
            <summary>Event that is triggered when the simulator successfully
            establishes a connection</summary>
        </member>
        <member name="F:libsecondlife.Simulator.connected">
            <summary>Whether this sim is currently connected or not. Hooked up
            to the property Connected</summary>
        </member>
        <member name="F:libsecondlife.Simulator.avatarPositions">
            <summary>Coarse locations of avatars in this simulator</summary>
        </member>
        <member name="F:libsecondlife.Simulator.PacketArchive">
            <summary>Sequence numbers of packets we've finished processing
            (for duplicate checking)</summary>
        </member>
        <member name="F:libsecondlife.Simulator.NeedAck">
            <summary>Packets we sent out that need ACKs from the simulator</summary>
        </member>
        <member name="P:libsecondlife.Simulator.IPEndPoint">
            <summary>The IP address and port of the server</summary>
        </member>
        <member name="P:libsecondlife.Simulator.Connected">
            <summary>Whether there is a working connection to the simulator or
            not</summary>
        </member>
        <member name="P:libsecondlife.Simulator.AvatarPositions">
            <summary>Coarse locations of avatars in this simulator</summary>
        </member>
        <member name="M:libsecondlife.Simulator.Dispose">
            <summary>
            Called when this Simulator object is being destroyed
            </summary>
        </member>
        <member name="M:libsecondlife.Simulator.Connect(System.Boolean)">
            <summary>
            Attempt to connect to this simulator
            </summary>
            <param name="moveToSim">Whether to move our agent in to this sim or not</param>
            <returns>True if the connection succeeded or connection status is
            unknown, false if there was a failure</returns>
        </member>
        <member name="M:libsecondlife.Simulator.Disconnect">
            <summary>
            Disconnect from this simulator
            </summary>
        </member>
        <member name="M:libsecondlife.Simulator.SendPacket(libsecondlife.Packets.Packet,System.Boolean)">
            <summary>
            Sends a packet
            </summary>
            <param name="packet">Packet to be sent</param>
            <param name="incrementSequence">Increment sequence number?</param>
        </member>
        <member name="M:libsecondlife.Simulator.SendPacket(System.Byte[],System.Boolean)">
            <summary>
            Send a raw byte array payload as a packet
            </summary>
            <param name="payload">The packet payload</param>
            <param name="setSequence">Whether the second, third, and fourth bytes
            should be modified to the current stream sequence number</param>
        </member>
        <member name="M:libsecondlife.Simulator.SendPacket(libsecondlife.UDPPacketBuffer)">
            <summary>
            Send a prepared <code>UDPPacketBuffer</code> object as a packet
            </summary>
            <param name="buffer">The prepared packet structure to be sent out</param>
        </member>
        <member name="M:libsecondlife.Simulator.SendPing">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.Simulator.ToString">
            <summary>
            Returns Simulator Name as a String
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.Simulator.GetHashCode">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.Simulator.Equals(System.Object)">
            <summary>
            </summary>
            <param name="obj">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.Simulator.SendAcks">
            <summary>
            Sends out pending acknowledgements
            </summary>
        </member>
        <member name="M:libsecondlife.Simulator.ResendUnacked">
            <summary>
            Resend unacknowledged packets
            </summary>
        </member>
        <member name="T:OpenJPEGNet.LoadTGAClass">
            <summary>
            Capability to load TGAs to Bitmap
            </summary>
        </member>
        <member name="M:libsecondlife.TerrainManager.#ctor(libsecondlife.SecondLife)">
            <summary>
            </summary>
            <param name="client">
            </param>
        </member>
        <member name="T:libsecondlife.TerrainManager.LandPatchCallback">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="x">
            </param>
            <param name="y">
            </param>
            <param name="width">
            </param>
            <param name="data">
            </param>
        </member>
        <member name="E:libsecondlife.TerrainManager.OnLandPatch">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.TerrainManager.TerrainHeightAtPoint(System.UInt64,System.Int32,System.Int32,System.Single@)">
            <summary>
            Retrieve the terrain height at a given coordinate
            </summary>
            <param name="regionHandle">The region that the point of interest is in</param>
            <param name="x">Sim X coordinate, valid range is from 0 to 255</param>
            <param name="y">Sim Y coordinate, valid range is from 0 to 255</param>
            <param name="height">The terrain height at the given point if the
            lookup was successful, otherwise 0.0f</param>
            <returns>True if the lookup was successful, otherwise false</returns>
        </member>
        <member name="M:libsecondlife.TerrainManager.CreateLandPacket(System.Single[],System.Int32[])">
            <summary>
            Creates a LayerData packet for compressed land data given a full
            simulator heightmap and an array of indices of patches to compress
            </summary>
            <param name="heightmap">A 256 * 256 array of floating point values
            specifying the height at each meter in the simulator</param>
            <param name="patches">Array of indexes in the 16x16 grid of patches
            for this simulator. For example if 1 and 17 are specified, patches
            x=1,y=0 and x=1,y=1 are sent</param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.TerrainManager.CreatePatch(libsecondlife.BitPack,System.Single[],System.Int32,System.Int32)">
            <summary>
            Add a patch of terrain to a BitPacker
            </summary>
            <param name="output">BitPacker to write the patch to</param>
            <param name="heightmap">Heightmap of the simulator, must be a 256 *
            256 float array</param>
            <param name="x">X offset of the patch to create, valid values are
            from 0 to 15</param>
            <param name="y">Y offset of the patch to create, valid values are
            from 0 to 15</param>
        </member>
        <member name="M:libsecondlife.TerrainManager.EncodePatchHeader(libsecondlife.BitPack,libsecondlife.TerrainManager.PatchHeader,System.Int32[])">
            <summary>
            </summary>
            <param name="output">
            </param>
            <param name="header">
            </param>
            <param name="patch">
            </param>
            <returns>wbits</returns>
        </member>
        <member name="T:ThreadUtil">
            <summary>
            </summary>
        </member>
        <member name="T:ThreadUtil.DelegateWrapper">
            <summary>
            Delegate to wrap another delegate and its arguments
            </summary>
            <param name="d">
            </param>
            <param name="args">
            </param>
        </member>
        <member name="F:ThreadUtil.wrapperInstance">
            <summary>
            An instance of DelegateWrapper which calls InvokeWrappedDelegate,
            which in turn calls the DynamicInvoke method of the wrapped
            delegate
            </summary>
        </member>
        <member name="F:ThreadUtil.callback">
            <summary>
            Callback used to call EndInvoke on the asynchronously
            invoked DelegateWrapper
            </summary>
        </member>
        <member name="M:ThreadUtil.FireAndForget(System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate with the specified arguments
            asynchronously on a thread pool thread
            </summary>
            <param name="d">
            </param>
            <param name="args">
            </param>
        </member>
        <member name="M:ThreadUtil.InvokeWrappedDelegate(System.Delegate,System.Object[])">
            <summary>
            Invokes the wrapped delegate synchronously
            </summary>
            <param name="d">
            </param>
            <param name="args">
            </param>
        </member>
        <member name="M:ThreadUtil.EndWrapperInvoke(System.IAsyncResult)">
            <summary>
            Calls EndInvoke on the wrapper and Close on the resulting WaitHandle
            to prevent resource leaks
            </summary>
            <param name="ar">
            </param>
        </member>
        <member name="T:libsecondlife.LLUUID">
            <summary>
            A 128-bit Universally Unique Identifier, used throughout the Second
            Life networking protocol
            </summary>
        </member>
        <member name="M:libsecondlife.LLUUID.#ctor(System.String)">
            <summary>
            Constructor that takes a string UUID representation
            </summary>
            <param name="val">A string representation of a UUID, case
            insensitive and can either be hyphenated or non-hyphenated</param>
            <example>LLUUID("11f8aa9c-b071-4242-836b-13b7abe0d489")</example>
        </member>
        <member name="M:libsecondlife.LLUUID.#ctor(System.Guid)">
            <summary>
            Constructor that takes a System.Guid object
            </summary>
            <param name="val">A Guid object that contains the unique identifier
            to be represented by this LLUUID</param>
        </member>
        <member name="M:libsecondlife.LLUUID.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor that takes a byte array containing a UUID
            </summary>
            <param name="source">Byte array containing a 16 byte UUID</param>
            <param name="pos">Beginning offset in the array</param>
        </member>
        <member name="M:libsecondlife.LLUUID.#ctor(System.UInt64)">
            <summary>
            Constructor that takes an unsigned 64-bit unsigned integer to
            convert to a UUID
            </summary>
            <param name="val">64-bit unsigned integer to convert to a UUID</param>
        </member>
        <member name="F:libsecondlife.LLUUID.UUID">
            <summary>The System.Guid object this struct wraps around</summary>
        </member>
        <member name="F:libsecondlife.LLUUID.Zero">
            <summary>
            An LLUUID with a value of all zeroes
            </summary>
        </member>
        <member name="P:libsecondlife.LLUUID.Data">
            <summary>Get a byte array of the 16 raw bytes making up the UUID</summary>
        </member>
        <member name="M:libsecondlife.LLUUID.GetBytes">
            <summary>
            Returns the raw bytes for this UUID
            </summary>
            <returns>A 16 byte array containing this UUID</returns>
        </member>
        <member name="M:libsecondlife.LLUUID.CRC">
            <summary>
            Calculate an LLCRC (cyclic redundancy check) for this LLUUID
            </summary>
            <returns>The CRC checksum for this LLUUID</returns>
        </member>
        <member name="M:libsecondlife.LLUUID.Combine(libsecondlife.LLUUID)">
            <summary>
            Combine two UUIDs together by taking the MD5 hash of a byte array
            containing both UUIDs
            </summary>
            <param name="other">The UUID to combine with this one</param>
            <returns>The UUID product of the combination</returns>
        </member>
        <member name="M:libsecondlife.LLUUID.Parse(System.String)">
            <summary>
            Generate a LLUUID from a string
            </summary>
            <param name="val">A string representation of a UUID, case
            insensitive and can either be hyphenated or non-hyphenated</param>
            <example>LLUUID.Parse("11f8aa9c-b071-4242-836b-13b7abe0d489")</example>
        </member>
        <member name="M:libsecondlife.LLUUID.TryParse(System.String,libsecondlife.LLUUID@)">
            <summary>
            Generate a LLUUID from a string
            </summary>
            <param name="val">A string representation of a UUID, case
            insensitive and can either be hyphenated or non-hyphenated</param>
            <param name="result">Will contain the parsed UUID if successful,
            otherwise null</param>
            <returns>True if the string was successfully parse, otherwise false</returns>
            <example>LLUUID.TryParse("11f8aa9c-b071-4242-836b-13b7abe0d489", result)</example>
        </member>
        <member name="M:libsecondlife.LLUUID.Random">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLUUID.GetHashCode">
            <summary>
            Return a hash code for this UUID, used by .NET for hash tables
            </summary>
            <returns>An integer composed of all the UUID bytes XORed together</returns>
        </member>
        <member name="M:libsecondlife.LLUUID.Equals(System.Object)">
            <summary>
            Comparison function
            </summary>
            <param name="o">An object to compare to this UUID</param>
            <returns>False if the object is not an LLUUID, true if it is and
            byte for byte identical to this</returns>
        </member>
        <member name="M:libsecondlife.LLUUID.ToString">
            <summary>
            Get a string representation of this UUID
            </summary>
            <returns>A string representation of this UUID, lowercase and
            without hyphens</returns>
            <example>11f8aa9cb0714242836b13b7abe0d489</example>
        </member>
        <member name="M:libsecondlife.LLUUID.ToStringHyphenated">
            <summary>
            Get a hyphenated string representation of this UUID
            </summary>
            <returns>A string representation of this UUID, lowercase and
            with hyphens</returns>
            <example>11f8aa9c-b071-4242-836b-13b7abe0d489</example>
        </member>
        <member name="M:libsecondlife.LLUUID.op_Equality(libsecondlife.LLUUID,libsecondlife.LLUUID)">
            <summary>
            Equals operator
            </summary>
            <param name="lhs">First LLUUID for comparison</param>
            <param name="rhs">Second LLUUID for comparison</param>
            <returns>True if the UUIDs are byte for byte equal, otherwise false</returns>
        </member>
        <member name="M:libsecondlife.LLUUID.op_Inequality(libsecondlife.LLUUID,libsecondlife.LLUUID)">
            <summary>
            Not equals operator
            </summary>
            <param name="lhs">First LLUUID for comparison</param>
            <param name="rhs">Second LLUUID for comparison</param>
            <returns>True if the UUIDs are not equal, otherwise true</returns>
        </member>
        <member name="M:libsecondlife.LLUUID.op_ExclusiveOr(libsecondlife.LLUUID,libsecondlife.LLUUID)">
            <summary>
            XOR operator
            </summary>
            <param name="lhs">First LLUUID</param>
            <param name="rhs">Second LLUUID</param>
            <returns>A UUID that is a XOR combination of the two input UUIDs</returns>
        </member>
        <member name="M:libsecondlife.LLUUID.op_Implicit(System.String)~libsecondlife.LLUUID">
            <summary>
            String typecasting operator
            </summary>
            <param name="val">A UUID in string form. Case insensitive,
            hyphenated or non-hyphenated</param>
            <returns>A UUID built from the string representation</returns>
        </member>
        <member name="T:libsecondlife.LLVector3">
            <summary>
            A three-dimensional vector with floating-point values
            </summary>
        </member>
        <member name="M:libsecondlife.LLVector3.#ctor(libsecondlife.LLVector3d)">
            <summary>
            Constructor, builds a single-precision vector from a
            double-precision one
            </summary>
            <param name="vector">A double-precision vector</param>
        </member>
        <member name="M:libsecondlife.LLVector3.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor, builds a vector from a byte array
            </summary>
            <param name="byteArray">Byte array containing a 12 byte vector</param>
            <param name="pos">Beginning position in the byte array</param>
        </member>
        <member name="M:libsecondlife.LLVector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructor, builds a vector for individual float values
            </summary>
            <param name="x">X value</param>
            <param name="y">Y value</param>
            <param name="z">Z value</param>
        </member>
        <member name="F:libsecondlife.LLVector3.X">
            <summary>X value</summary>
        </member>
        <member name="F:libsecondlife.LLVector3.Y">
            <summary>Y value</summary>
        </member>
        <member name="F:libsecondlife.LLVector3.Z">
            <summary>Z value</summary>
        </member>
        <member name="F:libsecondlife.LLVector3.Zero">
            <summary>
            An LLVector3 with a value of 0,0,0
            </summary>
        </member>
        <member name="M:libsecondlife.LLVector3.GetBytes">
            <summary>
            Returns the raw bytes for this vector
            </summary>
            <returns>A 12 byte array containing X, Y, and Z</returns>
        </member>
        <member name="M:libsecondlife.LLVector3.GetDistanceTo(libsecondlife.LLVector3)">
            <summary>
            Get the distance to point
            </summary>
            <param name="Pt">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLVector3.ToString">
            <summary>
            Get a formatted string representation of the vector
            </summary>
            <returns>A string representation of the vector, similar to the LSL
            vector to string conversion in Second Life</returns>
        </member>
        <member name="M:libsecondlife.LLVector3.GetHashCode">
            <summary>
            A hash of the vector, used by .NET for hash tables
            </summary>
            <returns>The hashes of the individual components XORed together</returns>
        </member>
        <member name="M:libsecondlife.LLVector3.Parse(System.String)">
            <summary>
            Generate an LLVector3 from a string
            </summary>
            <param name="val">A string representation of a 3D vector, enclosed
            in arrow brackets and separated by commas</param>
        </member>
        <member name="M:libsecondlife.LLVector3.Equals(System.Object)">
            <summary>
            </summary>
            <param name="o">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLVector3.op_Equality(libsecondlife.LLVector3,libsecondlife.LLVector3)">
            <summary>
            </summary>
            <param name="lhs">
            </param>
            <param name="rhs">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLVector3.op_Inequality(libsecondlife.LLVector3,libsecondlife.LLVector3)">
            <summary>
            </summary>
            <param name="lhs">
            </param>
            <param name="rhs">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLVector3.op_Subtraction(libsecondlife.LLVector3,libsecondlife.LLVector3)">
            <summary>
            </summary>
            <param name="lhs">
            </param>
            <param name="rhs">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLVector3.op_Multiply(libsecondlife.LLVector3,System.Single)">
            <summary>
            </summary>
            <param name="vec">
            </param>
            <param name="val">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLVector3.op_Multiply(System.Single,libsecondlife.LLVector3)">
            <summary>
            </summary>
            <param name="val">
            </param>
            <param name="vec">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLVector3.op_Multiply(libsecondlife.LLVector3,libsecondlife.LLVector3)">
            <summary>
            </summary>
            <param name="lhs">
            </param>
            <param name="rhs">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:libsecondlife.LLVector3d">
            <summary>
            A double-precision three-dimensional vector
            </summary>
        </member>
        <member name="M:libsecondlife.LLVector3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            </summary>
            <param name="x">
            </param>
            <param name="y">
            </param>
            <param name="z">
            </param>
        </member>
        <member name="M:libsecondlife.LLVector3d.#ctor(libsecondlife.LLVector3)">
            <summary>
            Create a double precision vector from a float vector
            </summary>
            <param name="llv3">
            </param>
        </member>
        <member name="M:libsecondlife.LLVector3d.#ctor(System.Byte[],System.Int32)">
            <summary>
            </summary>
            <param name="byteArray">
            </param>
            <param name="pos">
            </param>
        </member>
        <member name="F:libsecondlife.LLVector3d.X">
            <summary>X value</summary>
        </member>
        <member name="F:libsecondlife.LLVector3d.Y">
            <summary>Y value</summary>
        </member>
        <member name="F:libsecondlife.LLVector3d.Z">
            <summary>Z value</summary>
        </member>
        <member name="F:libsecondlife.LLVector3d.Zero">
            <summary>
            An LLVector3d with a value of 0,0,0
            </summary>
        </member>
        <member name="M:libsecondlife.LLVector3d.GetHashCode">
            <summary>
            A hash of the vector, used by .NET for hash tables
            </summary>
            <returns>The hashes of the individual components XORed together</returns>
        </member>
        <member name="M:libsecondlife.LLVector3d.Equals(System.Object)">
            <summary>
            </summary>
            <param name="o">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLVector3d.GetDistanceTo(libsecondlife.LLVector3d)">
            <summary>
            Get the distance to point
            </summary>
            <param name="Pt">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLVector3d.GetBytes">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLVector3d.ToString">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLVector3d.op_Equality(libsecondlife.LLVector3d,libsecondlife.LLVector3d)">
            <summary>
            </summary>
            <param name="lhs">
            </param>
            <param name="rhs">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLVector3d.op_Inequality(libsecondlife.LLVector3d,libsecondlife.LLVector3d)">
            <summary>
            </summary>
            <param name="lhs">
            </param>
            <param name="rhs">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:libsecondlife.LLVector4">
            <summary>
            A four-dimensional vector
            </summary>
        </member>
        <member name="M:libsecondlife.LLVector4.#ctor(System.Byte[],System.Int32)">
            <summary>
            </summary>
            <param name="byteArray">
            </param>
            <param name="pos">
            </param>
        </member>
        <member name="F:libsecondlife.LLVector4.X">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLVector4.Y">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLVector4.Z">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLVector4.S">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.LLVector4.Zero">
            <summary>
            An LLVector4 with a value of 0,0,0,0
            </summary>
        </member>
        <member name="M:libsecondlife.LLVector4.GetBytes">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLVector4.ToString">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:libsecondlife.LLColor">
            <summary>
            An 8-bit color structure including an alpha channel
            </summary>
        </member>
        <member name="M:libsecondlife.LLColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            </summary>
            <param name="r">
            </param>
            <param name="g">
            </param>
            <param name="b">
            </param>
            <param name="a">
            </param>
        </member>
        <member name="M:libsecondlife.LLColor.#ctor(System.Byte[],System.Int32)">
            <summary>
            </summary>
            <param name="byteArray">
            </param>
            <param name="pos">
            </param>
        </member>
        <member name="F:libsecondlife.LLColor.R">
            <summary>Red</summary>
        </member>
        <member name="F:libsecondlife.LLColor.G">
            <summary>Green</summary>
        </member>
        <member name="F:libsecondlife.LLColor.B">
            <summary>Blue</summary>
        </member>
        <member name="F:libsecondlife.LLColor.A">
            <summary>Alpha</summary>
        </member>
        <member name="F:libsecondlife.LLColor.Black">
            <summary>
            An LLColor with a value of 0,0,0,255
            </summary>
        </member>
        <member name="M:libsecondlife.LLColor.GetBytes">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLColor.ToString">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLColor.ToStringRGB">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:libsecondlife.LLQuaternion">
            <summary>
            A quaternion, used for rotations
            </summary>
        </member>
        <member name="M:libsecondlife.LLQuaternion.#ctor(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Build a quaternion object from a byte array
            </summary>
            <param name="byteArray">The source byte array</param>
            <param name="pos">Offset in the byte array to start reading at</param>
            <param name="normalized">Whether the source data is normalized or
            not. If this is true 12 bytes will be read, otherwise 16 bytes will
            be read.</param>
        </member>
        <member name="M:libsecondlife.LLQuaternion.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Build a quaternion from normalized float values
            </summary>
            <param name="x">X value from -1.0 to 1.0</param>
            <param name="y">Y value from -1.0 to 1.0</param>
            <param name="z">Z value from -1.0 to 1.0</param>
        </member>
        <member name="M:libsecondlife.LLQuaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Build a quaternion from individual float values
            </summary>
            <param name="x">X value</param>
            <param name="y">Y value</param>
            <param name="z">Z value</param>
            <param name="w">W value</param>
        </member>
        <member name="F:libsecondlife.LLQuaternion.X">
            <summary>X value</summary>
        </member>
        <member name="F:libsecondlife.LLQuaternion.Y">
            <summary>Y value</summary>
        </member>
        <member name="F:libsecondlife.LLQuaternion.Z">
            <summary>Z value</summary>
        </member>
        <member name="F:libsecondlife.LLQuaternion.W">
            <summary>W value</summary>
        </member>
        <member name="F:libsecondlife.LLQuaternion.Identity">
            <summary>
            An LLQuaternion with a value of 0,0,0,1
            </summary>
        </member>
        <member name="M:libsecondlife.LLQuaternion.GetBytes">
            <summary>
            Normalize this quaternion and serialize it to a byte array
            </summary>
            <returns>A 12 byte array containing normalized X, Y, and Z floating
            point values in order using little endian byte ordering</returns>
        </member>
        <member name="M:libsecondlife.LLQuaternion.GetHashCode">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLQuaternion.Equals(System.Object)">
            <summary>
            </summary>
            <param name="o">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLQuaternion.ToString">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLQuaternion.op_Equality(libsecondlife.LLQuaternion,libsecondlife.LLQuaternion)">
            <summary>
            Comparison operator
            </summary>
            <param name="lhs">
            </param>
            <param name="rhs">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLQuaternion.op_Inequality(libsecondlife.LLQuaternion,libsecondlife.LLQuaternion)">
            <summary>
            Not comparison operator
            </summary>
            <param name="lhs">
            </param>
            <param name="rhs">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.LLQuaternion.op_Multiply(libsecondlife.LLQuaternion,libsecondlife.LLQuaternion)">
            <summary>
            Multiplication operator
            </summary>
            <param name="lhs">
            </param>
            <param name="rhs">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.UDPPacketBuffer.#ctor">
            <summary>
            Create an allocated UDP packet buffer for receiving a packet
            </summary>
        </member>
        <member name="F:libsecondlife.UDPPacketBuffer.ZERO_BUFFER_SIZE">
            <summary>Size of the temporary buffer for zerodecoding and
            zeroencoding this packet</summary>
        </member>
        <member name="F:libsecondlife.UDPPacketBuffer.ZeroData">
            <summary>Temporary buffer used for zerodecoding and zeroencoding
            this packet</summary>
        </member>
        <member name="M:libsecondlife.PacketBufferPool.#ctor(System.Net.IPEndPoint,System.Int32,System.Int32)">
            <summary>
            Initialize the object pool in client mode
            </summary>
            <param name="endPoint">Server to connect to</param>
            <param name="itemsPerSegment">
            </param>
            <param name="minSegments">
            </param>
        </member>
        <member name="M:libsecondlife.PacketBufferPool.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize the object pool in server mode
            </summary>
            <param name="port">
            </param>
            <param name="itemsPerSegment">
            </param>
            <param name="minSegments">
            </param>
        </member>
        <member name="T:libsecondlife.UDPBase">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.UDPBase.#ctor(System.Int32)">
            <summary>
            Initialize the UDP packet handler in server mode
            </summary>
            <param name="port">Port to listening for incoming UDP packets on</param>
        </member>
        <member name="M:libsecondlife.UDPBase.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initialize the UDP packet handler in client mode
            </summary>
            <param name="endPoint">Remote UDP server to connect to</param>
        </member>
        <member name="P:libsecondlife.UDPBase.IsRunning">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.UDPBase.Start">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.UDPBase.Stop">
            <summary>
            </summary>
        </member>
        <member name="T:libsecondlife.Packets.MalformedDataException">
            <summary>
            Thrown when a packet could not be successfully deserialized
            </summary>
        </member>
        <member name="M:libsecondlife.Packets.MalformedDataException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:libsecondlife.Packets.MalformedDataException.#ctor(System.String)">
            <summary>
            Constructor that takes an additional error message
            </summary>
            <param name="Message">An error message to attach to this exception</param>
        </member>
        <member name="T:libsecondlife.Packets.Header">
            <summary>
            The Second Life header of a message template packet. Either 5, 6, or 8
            bytes in length at the beginning of the packet, and encapsulates any
            appended ACKs at the end of the packet as well
            </summary>
        </member>
        <member name="F:libsecondlife.Packets.Header.Data">
            <summary>Raw header data, does not include appended ACKs</summary>
        </member>
        <member name="F:libsecondlife.Packets.Header.AckList">
            <summary>Array containing all the appended ACKs of this packet</summary>
        </member>
        <member name="P:libsecondlife.Packets.Header.Flags">
            <summary>Raw value of the flags byte</summary>
        </member>
        <member name="P:libsecondlife.Packets.Header.Reliable">
            <summary>Reliable flag, whether this packet requires an ACK</summary>
        </member>
        <member name="P:libsecondlife.Packets.Header.Resent">
            <summary>Resent flag, whether this same packet has already been
            sent</summary>
        </member>
        <member name="P:libsecondlife.Packets.Header.Zerocoded">
            <summary>Zerocoded flag, whether this packet is compressed with
            zerocoding</summary>
        </member>
        <member name="P:libsecondlife.Packets.Header.AppendedAcks">
            <summary>Appended ACKs flag, whether this packet has ACKs appended
            to the end</summary>
        </member>
        <member name="P:libsecondlife.Packets.Header.Sequence">
            <summary>Packet sequence number, three bytes long</summary>
        </member>
        <member name="P:libsecondlife.Packets.Header.ID">
            <summary>Numeric ID number of this packet</summary>
        </member>
        <member name="P:libsecondlife.Packets.Header.Frequency">
            <summary>Frequency classification of this packet, Low Medium or
            High</summary>
        </member>
        <member name="M:libsecondlife.Packets.Header.ToBytes(System.Byte[],System.Int32@)">
            <summary>Convert this header to a byte array, not including any
            appended ACKs</summary>
        </member>
        <member name="M:libsecondlife.Packets.Header.AcksToBytes(System.Byte[],System.Int32@)">
            <summary>
            Convert the AckList to a byte array, used for packet serializing
            </summary>
            <param name="bytes">Reference to the target byte array</param>
            <param name="i">Beginning position to start writing to in the byte
            array, will be updated with the ending position of the ACK list</param>
        </member>
        <member name="M:libsecondlife.Packets.Header.BuildHeader(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            </summary>
            <param name="bytes">
            </param>
            <param name="pos">
            </param>
            <param name="packetEnd">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.Packets.Header.CreateAckList(System.Byte[],System.Int32@)">
            <summary>
            </summary>
            <param name="bytes">
            </param>
            <param name="packetEnd">
            </param>
        </member>
        <member name="T:libsecondlife.Packets.LowHeader">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.Packets.LowHeader.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.Packets.LowHeader.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            </summary>
            <param name="bytes">
            </param>
            <param name="pos">
            </param>
            <param name="packetEnd">
            </param>
        </member>
        <member name="P:libsecondlife.Packets.LowHeader.ID">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.Packets.LowHeader.Frequency">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.Packets.LowHeader.ToBytes(System.Byte[],System.Int32@)">
            <summary>
            </summary>
            <param name="bytes">
            </param>
            <param name="i">
            </param>
        </member>
        <member name="T:libsecondlife.Packets.MediumHeader">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.Packets.MediumHeader.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.Packets.MediumHeader.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            </summary>
            <param name="bytes">
            </param>
            <param name="pos">
            </param>
            <param name="packetEnd">
            </param>
        </member>
        <member name="P:libsecondlife.Packets.MediumHeader.ID">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.Packets.MediumHeader.Frequency">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.Packets.MediumHeader.ToBytes(System.Byte[],System.Int32@)">
            <summary>
            </summary>
            <param name="bytes">
            </param>
            <param name="i">
            </param>
        </member>
        <member name="T:libsecondlife.Packets.HighHeader">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.Packets.HighHeader.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.Packets.HighHeader.#ctor(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            </summary>
            <param name="bytes">
            </param>
            <param name="pos">
            </param>
            <param name="packetEnd">
            </param>
        </member>
        <member name="P:libsecondlife.Packets.HighHeader.ID">
            <summary>
            </summary>
        </member>
        <member name="P:libsecondlife.Packets.HighHeader.Frequency">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.Packets.HighHeader.ToBytes(System.Byte[],System.Int32@)">
            <summary>
            </summary>
            <param name="bytes">
            </param>
            <param name="i">
            </param>
        </member>
        <member name="F:libsecondlife.Packets.PacketType.Default">
            <summary>A generic value, not an actual packet type</summary>
        </member>
        <member name="T:libsecondlife.Packets.TestMessagePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TestMessagePacket.TestBlock1Block">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TestMessagePacket.NeighborBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UseCircuitCodePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UseCircuitCodePacket.CircuitCodeBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TelehubInfoPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TelehubInfoPacket.TelehubBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TelehubInfoPacket.SpawnPointBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EconomyDataRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EconomyDataPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EconomyDataPacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarPickerRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarPickerRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarPickerRequestPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarPickerReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarPickerReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarPickerReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PlacesQueryPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PlacesQueryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PlacesQueryPacket.TransactionDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PlacesQueryPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PlacesReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PlacesReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PlacesReplyPacket.TransactionDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PlacesReplyPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirFindQueryPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirFindQueryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirFindQueryPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirPlacesQueryPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirPlacesQueryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirPlacesQueryPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirPlacesReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirPlacesReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirPlacesReplyPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirPlacesReplyPacket.QueryRepliesBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirPeopleReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirPeopleReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirPeopleReplyPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirPeopleReplyPacket.QueryRepliesBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirEventsReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirEventsReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirEventsReplyPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirEventsReplyPacket.QueryRepliesBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirGroupsReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirGroupsReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirGroupsReplyPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirGroupsReplyPacket.QueryRepliesBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirClassifiedQueryPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirClassifiedQueryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirClassifiedQueryPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirClassifiedReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirClassifiedReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirClassifiedReplyPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirClassifiedReplyPacket.QueryRepliesBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarClassifiedReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarClassifiedReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarClassifiedReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ClassifiedInfoRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ClassifiedInfoRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ClassifiedInfoRequestPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ClassifiedInfoReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ClassifiedInfoReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ClassifiedInfoReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ClassifiedInfoUpdatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ClassifiedInfoUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ClassifiedInfoUpdatePacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ClassifiedDeletePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ClassifiedDeletePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ClassifiedDeletePacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ClassifiedGodDeletePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ClassifiedGodDeletePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ClassifiedGodDeletePacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirLandQueryPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirLandQueryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirLandQueryPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirLandReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirLandReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirLandReplyPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirLandReplyPacket.QueryRepliesBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirPopularQueryPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirPopularQueryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirPopularQueryPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirPopularReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirPopularReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirPopularReplyPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DirPopularReplyPacket.QueryRepliesBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelInfoRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelInfoRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelInfoRequestPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelInfoReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelInfoReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelInfoReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelObjectOwnersRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelObjectOwnersRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelObjectOwnersRequestPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelObjectOwnersReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelObjectOwnersReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupNoticesListRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupNoticesListRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupNoticesListRequestPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupNoticesListReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupNoticesListReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupNoticesListReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupNoticeRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupNoticeRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupNoticeRequestPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TeleportRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TeleportRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TeleportRequestPacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TeleportLocationRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TeleportLocationRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TeleportLocationRequestPacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TeleportLocalPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TeleportLocalPacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TeleportLandmarkRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TeleportLandmarkRequestPacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TeleportProgressPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TeleportProgressPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TeleportProgressPacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TeleportFinishPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TeleportFinishPacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.StartLurePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.StartLurePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.StartLurePacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.StartLurePacket.TargetDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TeleportLureRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TeleportLureRequestPacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TeleportCancelPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TeleportCancelPacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TeleportStartPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TeleportStartPacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TeleportFailedPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TeleportFailedPacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UndoPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UndoPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UndoPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RedoPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RedoPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RedoPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UndoLandPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UndoLandPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentPausePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentPausePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentResumePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentResumePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChatFromViewerPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChatFromViewerPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChatFromViewerPacket.ChatDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentThrottlePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentThrottlePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentThrottlePacket.ThrottleBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentFOVPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentFOVPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentFOVPacket.FOVBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentHeightWidthPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentHeightWidthPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentHeightWidthPacket.HeightWidthBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentSetAppearancePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentSetAppearancePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentSetAppearancePacket.WearableDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentSetAppearancePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentSetAppearancePacket.VisualParamBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentQuitCopyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentQuitCopyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentQuitCopyPacket.FuseBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ImageNotInDatabasePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ImageNotInDatabasePacket.ImageIDBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RebakeAvatarTexturesPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RebakeAvatarTexturesPacket.TextureDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SetAlwaysRunPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SetAlwaysRunPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDeletePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDeletePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDeletePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDuplicatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDuplicatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDuplicatePacket.SharedDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDuplicatePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDuplicateOnRayPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDuplicateOnRayPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDuplicateOnRayPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectScalePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectScalePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectScalePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectRotationPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectRotationPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectRotationPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectFlagUpdatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectFlagUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectClickActionPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectClickActionPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectClickActionPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectImagePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectImagePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectImagePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectMaterialPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectMaterialPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectMaterialPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectShapePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectShapePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectShapePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectExtraParamsPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectExtraParamsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectExtraParamsPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectOwnerPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectOwnerPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectOwnerPacket.HeaderDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectOwnerPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectGroupPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectGroupPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectGroupPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectBuyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectBuyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectBuyPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.BuyObjectInventoryPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.BuyObjectInventoryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.BuyObjectInventoryPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DerezContainerPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DerezContainerPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectPermissionsPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectPermissionsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectPermissionsPacket.HeaderDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectPermissionsPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectSaleInfoPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectSaleInfoPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectSaleInfoPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectNamePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectNamePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectNamePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDescriptionPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDescriptionPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDescriptionPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectCategoryPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectCategoryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectCategoryPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectSelectPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectSelectPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectSelectPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDeselectPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDeselectPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDeselectPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectAttachPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectAttachPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectAttachPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDetachPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDetachPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDetachPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDropPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDropPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDropPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectLinkPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectLinkPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectLinkPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDelinkPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDelinkPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDelinkPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectGrabPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectGrabPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectGrabPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectGrabUpdatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectGrabUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectGrabUpdatePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDeGrabPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDeGrabPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectDeGrabPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectSpinStartPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectSpinStartPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectSpinStartPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectSpinUpdatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectSpinUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectSpinUpdatePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectSpinStopPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectSpinStopPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectSpinStopPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectExportSelectedPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectExportSelectedPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectExportSelectedPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ModifyLandPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ModifyLandPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ModifyLandPacket.ModifyBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ModifyLandPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.VelocityInterpolateOnPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.VelocityInterpolateOnPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.VelocityInterpolateOffPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.VelocityInterpolateOffPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.StateSavePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.StateSavePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.StateSavePacket.DataBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ReportAutosaveCrashPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ReportAutosaveCrashPacket.AutosaveDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SimWideDeletesPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SimWideDeletesPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SimWideDeletesPacket.DataBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TrackAgentPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TrackAgentPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TrackAgentPacket.TargetDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ViewerStatsPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ViewerStatsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ViewerStatsPacket.DownloadTotalsBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ViewerStatsPacket.NetStatsBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ViewerStatsPacket.FailStatsBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ViewerStatsPacket.MiscStatsBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ScriptAnswerYesPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ScriptAnswerYesPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ScriptAnswerYesPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UserReportPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UserReportPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UserReportPacket.ReportDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AlertMessagePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AlertMessagePacket.AlertDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentAlertMessagePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentAlertMessagePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentAlertMessagePacket.AlertDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MeanCollisionAlertPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MeanCollisionAlertPacket.MeanCollisionBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ViewerFrozenMessagePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ViewerFrozenMessagePacket.FrozenDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.HealthMessagePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.HealthMessagePacket.HealthDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChatFromSimulatorPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChatFromSimulatorPacket.ChatDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SimStatsPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SimStatsPacket.RegionBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SimStatsPacket.StatBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RequestRegionInfoPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RequestRegionInfoPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RegionInfoPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RegionInfoPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RegionInfoPacket.RegionInfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GodUpdateRegionInfoPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GodUpdateRegionInfoPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GodUpdateRegionInfoPacket.RegionInfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.NearestLandingRegionUpdatedPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.NearestLandingRegionUpdatedPacket.RegionDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RegionHandshakePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RegionHandshakePacket.RegionInfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RegionHandshakePacket.RegionInfo2Block">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RegionHandshakeReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RegionHandshakeReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RegionHandshakeReplyPacket.RegionInfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SimulatorViewerTimeMessagePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SimulatorViewerTimeMessagePacket.TimeInfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EnableSimulatorPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EnableSimulatorPacket.SimulatorInfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DisableSimulatorPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TransferRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TransferRequestPacket.TransferInfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TransferInfoPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TransferInfoPacket.TransferInfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TransferAbortPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TransferAbortPacket.TransferInfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RequestXferPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RequestXferPacket.XferIDBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AbortXferPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AbortXferPacket.XferIDBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarAppearancePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarAppearancePacket.SenderBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarAppearancePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarAppearancePacket.VisualParamBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SetFollowCamPropertiesPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SetFollowCamPropertiesPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SetFollowCamPropertiesPacket.CameraPropertyBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ClearFollowCamPropertiesPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ClearFollowCamPropertiesPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RequestPayPricePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RequestPayPricePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PayPriceReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PayPriceReplyPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PayPriceReplyPacket.ButtonDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.KickUserPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.KickUserPacket.TargetBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.KickUserPacket.UserInfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.KickUserAckPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.KickUserAckPacket.UserInfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GodKickUserPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GodKickUserPacket.UserInfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EjectUserPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EjectUserPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EjectUserPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.FreezeUserPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.FreezeUserPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.FreezeUserPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarPropertiesRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarPropertiesRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarPropertiesReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarPropertiesReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarPropertiesReplyPacket.PropertiesDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarInterestsReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarInterestsReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarInterestsReplyPacket.PropertiesDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarGroupsReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarGroupsReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarGroupsReplyPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarPropertiesUpdatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarPropertiesUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarPropertiesUpdatePacket.PropertiesDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarInterestsUpdatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarInterestsUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarInterestsUpdatePacket.PropertiesDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarNotesReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarNotesReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarNotesReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarNotesUpdatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarNotesUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarNotesUpdatePacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarPicksReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarPicksReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarPicksReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EventInfoRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EventInfoRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EventInfoRequestPacket.EventDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EventInfoReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EventInfoReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EventInfoReplyPacket.EventDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EventNotificationAddRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EventNotificationAddRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EventNotificationAddRequestPacket.EventDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EventNotificationRemoveRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EventNotificationRemoveRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EventNotificationRemoveRequestPacket.EventDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EventGodDeletePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EventGodDeletePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EventGodDeletePacket.EventDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EventGodDeletePacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PickInfoReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PickInfoReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PickInfoReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PickInfoUpdatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PickInfoUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PickInfoUpdatePacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PickDeletePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PickDeletePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PickDeletePacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PickGodDeletePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PickGodDeletePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PickGodDeletePacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ScriptQuestionPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ScriptQuestionPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ScriptControlChangePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ScriptControlChangePacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ScriptDialogPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ScriptDialogPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ScriptDialogPacket.ButtonsBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ScriptDialogReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ScriptDialogReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ScriptDialogReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ForceScriptControlReleasePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ForceScriptControlReleasePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RevokePermissionsPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RevokePermissionsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RevokePermissionsPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LoadURLPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LoadURLPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ScriptTeleportRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ScriptTeleportRequestPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelOverlayPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelOverlayPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelPropertiesRequestByIDPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelPropertiesRequestByIDPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelPropertiesRequestByIDPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelPropertiesUpdatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelPropertiesUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelPropertiesUpdatePacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelReturnObjectsPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelReturnObjectsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelReturnObjectsPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelReturnObjectsPacket.TaskIDsBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelReturnObjectsPacket.OwnerIDsBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelSetOtherCleanTimePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelSetOtherCleanTimePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelSetOtherCleanTimePacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelDisableObjectsPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelDisableObjectsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelDisableObjectsPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelDisableObjectsPacket.TaskIDsBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelDisableObjectsPacket.OwnerIDsBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelSelectObjectsPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelSelectObjectsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelSelectObjectsPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelSelectObjectsPacket.ReturnIDsBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EstateCovenantRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EstateCovenantRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EstateCovenantReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EstateCovenantReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ForceObjectSelectPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ForceObjectSelectPacket.HeaderBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ForceObjectSelectPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelBuyPassPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelBuyPassPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelBuyPassPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelDeedToGroupPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelDeedToGroupPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelDeedToGroupPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelReclaimPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelReclaimPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelReclaimPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelClaimPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelClaimPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelClaimPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelClaimPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelJoinPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelJoinPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelJoinPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelDividePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelDividePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelDividePacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelReleasePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelReleasePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelReleasePacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelBuyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelBuyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelBuyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelBuyPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelGodForceOwnerPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelGodForceOwnerPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelGodForceOwnerPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelAccessListRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelAccessListRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelAccessListRequestPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelAccessListReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelAccessListReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelAccessListReplyPacket.ListBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelAccessListUpdatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelAccessListUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelAccessListUpdatePacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelAccessListUpdatePacket.ListBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelDwellRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelDwellRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelDwellRequestPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelDwellReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelDwellReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelDwellReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelGodMarkAsContentPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelGodMarkAsContentPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelGodMarkAsContentPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ViewerStartAuctionPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ViewerStartAuctionPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ViewerStartAuctionPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UUIDNameRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UUIDNameRequestPacket.UUIDNameBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UUIDNameReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UUIDNameReplyPacket.UUIDNameBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UUIDGroupNameRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UUIDGroupNameRequestPacket.UUIDNameBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UUIDGroupNameReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UUIDGroupNameReplyPacket.UUIDNameBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChildAgentDyingPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChildAgentDyingPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChildAgentUnknownPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChildAgentUnknownPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GetScriptRunningPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GetScriptRunningPacket.ScriptBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ScriptRunningReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ScriptRunningReplyPacket.ScriptBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SetScriptRunningPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SetScriptRunningPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SetScriptRunningPacket.ScriptBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ScriptResetPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ScriptResetPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ScriptResetPacket.ScriptBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ScriptSensorRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ScriptSensorRequestPacket.RequesterBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ScriptSensorReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ScriptSensorReplyPacket.RequesterBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ScriptSensorReplyPacket.SensedDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CompleteAgentMovementPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CompleteAgentMovementPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentMovementCompletePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentMovementCompletePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentMovementCompletePacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LogoutRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LogoutRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LogoutReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LogoutReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LogoutReplyPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ImprovedInstantMessagePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ImprovedInstantMessagePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ImprovedInstantMessagePacket.MessageBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RetrieveInstantMessagesPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RetrieveInstantMessagesPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.FindAgentPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.FindAgentPacket.AgentBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.FindAgentPacket.LocationBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RequestGodlikePowersPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RequestGodlikePowersPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RequestGodlikePowersPacket.RequestBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GrantGodlikePowersPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GrantGodlikePowersPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GrantGodlikePowersPacket.GrantDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GodlikeMessagePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GodlikeMessagePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GodlikeMessagePacket.MethodDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GodlikeMessagePacket.ParamListBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EstateOwnerMessagePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EstateOwnerMessagePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EstateOwnerMessagePacket.MethodDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EstateOwnerMessagePacket.ParamListBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GenericMessagePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GenericMessagePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GenericMessagePacket.MethodDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GenericMessagePacket.ParamListBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MuteListRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MuteListRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MuteListRequestPacket.MuteDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UpdateMuteListEntryPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UpdateMuteListEntryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UpdateMuteListEntryPacket.MuteDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RemoveMuteListEntryPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RemoveMuteListEntryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RemoveMuteListEntryPacket.MuteDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CopyInventoryFromNotecardPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CopyInventoryFromNotecardPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CopyInventoryFromNotecardPacket.NotecardDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CopyInventoryFromNotecardPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UpdateInventoryItemPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UpdateInventoryItemPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UpdateInventoryItemPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UpdateCreateInventoryItemPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UpdateCreateInventoryItemPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UpdateCreateInventoryItemPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MoveInventoryItemPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MoveInventoryItemPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MoveInventoryItemPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CopyInventoryItemPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CopyInventoryItemPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CopyInventoryItemPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RemoveInventoryItemPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RemoveInventoryItemPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RemoveInventoryItemPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChangeInventoryItemFlagsPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChangeInventoryItemFlagsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChangeInventoryItemFlagsPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SaveAssetIntoInventoryPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SaveAssetIntoInventoryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SaveAssetIntoInventoryPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CreateInventoryFolderPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CreateInventoryFolderPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CreateInventoryFolderPacket.FolderDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UpdateInventoryFolderPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UpdateInventoryFolderPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UpdateInventoryFolderPacket.FolderDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MoveInventoryFolderPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MoveInventoryFolderPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MoveInventoryFolderPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RemoveInventoryFolderPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RemoveInventoryFolderPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RemoveInventoryFolderPacket.FolderDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.FetchInventoryDescendentsPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.FetchInventoryDescendentsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.FetchInventoryDescendentsPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.InventoryDescendentsPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.InventoryDescendentsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.InventoryDescendentsPacket.FolderDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.InventoryDescendentsPacket.ItemDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.FetchInventoryPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.FetchInventoryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.FetchInventoryPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.FetchInventoryReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.FetchInventoryReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.FetchInventoryReplyPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.BulkUpdateInventoryPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.BulkUpdateInventoryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.BulkUpdateInventoryPacket.FolderDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.BulkUpdateInventoryPacket.ItemDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RequestInventoryAssetPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RequestInventoryAssetPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.InventoryAssetResponsePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.InventoryAssetResponsePacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RemoveInventoryObjectsPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RemoveInventoryObjectsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RemoveInventoryObjectsPacket.FolderDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RemoveInventoryObjectsPacket.ItemDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PurgeInventoryDescendentsPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PurgeInventoryDescendentsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PurgeInventoryDescendentsPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UpdateTaskInventoryPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UpdateTaskInventoryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UpdateTaskInventoryPacket.UpdateDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UpdateTaskInventoryPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RemoveTaskInventoryPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RemoveTaskInventoryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RemoveTaskInventoryPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MoveTaskInventoryPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MoveTaskInventoryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MoveTaskInventoryPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RequestTaskInventoryPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RequestTaskInventoryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RequestTaskInventoryPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ReplyTaskInventoryPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ReplyTaskInventoryPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DeRezObjectPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DeRezObjectPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DeRezObjectPacket.AgentBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DeRezObjectPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DeRezAckPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DeRezAckPacket.TransactionDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RezObjectPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RezObjectPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RezObjectPacket.RezDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RezObjectPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RezObjectFromNotecardPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RezObjectFromNotecardPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RezObjectFromNotecardPacket.RezDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RezObjectFromNotecardPacket.NotecardDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RezObjectFromNotecardPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AcceptFriendshipPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AcceptFriendshipPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AcceptFriendshipPacket.TransactionBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AcceptFriendshipPacket.FolderDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DeclineFriendshipPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DeclineFriendshipPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DeclineFriendshipPacket.TransactionBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.FormFriendshipPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.FormFriendshipPacket.AgentBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TerminateFriendshipPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TerminateFriendshipPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TerminateFriendshipPacket.ExBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.OfferCallingCardPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.OfferCallingCardPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.OfferCallingCardPacket.AgentBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AcceptCallingCardPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AcceptCallingCardPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AcceptCallingCardPacket.TransactionBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AcceptCallingCardPacket.FolderDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DeclineCallingCardPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DeclineCallingCardPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DeclineCallingCardPacket.TransactionBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RezScriptPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RezScriptPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RezScriptPacket.UpdateBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RezScriptPacket.InventoryBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CreateInventoryItemPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CreateInventoryItemPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CreateInventoryItemPacket.InventoryBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CreateLandmarkForEventPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CreateLandmarkForEventPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CreateLandmarkForEventPacket.EventDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CreateLandmarkForEventPacket.InventoryBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RegionHandleRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RegionHandleRequestPacket.RequestBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RegionIDAndHandleReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RegionIDAndHandleReplyPacket.ReplyBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MoneyTransferRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MoneyTransferRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MoneyTransferRequestPacket.MoneyDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MoneyBalanceRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MoneyBalanceRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MoneyBalanceRequestPacket.MoneyDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MoneyBalanceReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MoneyBalanceReplyPacket.MoneyDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RoutedMoneyBalanceReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RoutedMoneyBalanceReplyPacket.TargetBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RoutedMoneyBalanceReplyPacket.MoneyDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ActivateGesturesPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ActivateGesturesPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ActivateGesturesPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DeactivateGesturesPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DeactivateGesturesPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DeactivateGesturesPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MuteListUpdatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MuteListUpdatePacket.MuteDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UseCachedMuteListPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UseCachedMuteListPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GrantUserRightsPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GrantUserRightsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GrantUserRightsPacket.RightsBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChangeUserRightsPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChangeUserRightsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChangeUserRightsPacket.RightsBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.OnlineNotificationPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.OnlineNotificationPacket.AgentBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.OfflineNotificationPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.OfflineNotificationPacket.AgentBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SetStartLocationRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SetStartLocationRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SetStartLocationRequestPacket.StartLocationDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AssetUploadRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AssetUploadRequestPacket.AssetBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AssetUploadCompletePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AssetUploadCompletePacket.AssetBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CreateGroupRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CreateGroupRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CreateGroupRequestPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CreateGroupReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CreateGroupReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CreateGroupReplyPacket.ReplyDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UpdateGroupInfoPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UpdateGroupInfoPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UpdateGroupInfoPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupRoleChangesPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupRoleChangesPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupRoleChangesPacket.RoleChangeBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.JoinGroupRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.JoinGroupRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.JoinGroupRequestPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.JoinGroupReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.JoinGroupReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.JoinGroupReplyPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EjectGroupMemberRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EjectGroupMemberRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EjectGroupMemberRequestPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EjectGroupMemberRequestPacket.EjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EjectGroupMemberReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EjectGroupMemberReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EjectGroupMemberReplyPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.EjectGroupMemberReplyPacket.EjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LeaveGroupRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LeaveGroupRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LeaveGroupRequestPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LeaveGroupReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LeaveGroupReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LeaveGroupReplyPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.InviteGroupRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.InviteGroupRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.InviteGroupRequestPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.InviteGroupRequestPacket.InviteDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupProfileRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupProfileRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupProfileRequestPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupProfileReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupProfileReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupProfileReplyPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupAccountSummaryRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupAccountSummaryRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupAccountSummaryRequestPacket.MoneyDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupAccountSummaryReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupAccountSummaryReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupAccountSummaryReplyPacket.MoneyDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupAccountDetailsRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupAccountDetailsRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupAccountDetailsRequestPacket.MoneyDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupAccountDetailsReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupAccountDetailsReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupAccountDetailsReplyPacket.MoneyDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupAccountDetailsReplyPacket.HistoryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupAccountTransactionsRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupAccountTransactionsRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupAccountTransactionsRequestPacket.MoneyDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupAccountTransactionsReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupAccountTransactionsReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupAccountTransactionsReplyPacket.MoneyDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupAccountTransactionsReplyPacket.HistoryDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupActiveProposalsRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupActiveProposalsRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupActiveProposalsRequestPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupActiveProposalsRequestPacket.TransactionDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupActiveProposalItemReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupActiveProposalItemReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupActiveProposalItemReplyPacket.TransactionDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupActiveProposalItemReplyPacket.ProposalDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupVoteHistoryRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupVoteHistoryRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupVoteHistoryRequestPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupVoteHistoryRequestPacket.TransactionDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupVoteHistoryItemReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupVoteHistoryItemReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupVoteHistoryItemReplyPacket.TransactionDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupVoteHistoryItemReplyPacket.HistoryItemDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupVoteHistoryItemReplyPacket.VoteItemBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.StartGroupProposalPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.StartGroupProposalPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.StartGroupProposalPacket.ProposalDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupProposalBallotPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupProposalBallotPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupProposalBallotPacket.ProposalDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupMembersRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupMembersRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupMembersRequestPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupMembersReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupMembersReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupMembersReplyPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupMembersReplyPacket.MemberDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ActivateGroupPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ActivateGroupPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SetGroupContributionPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SetGroupContributionPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SetGroupContributionPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SetGroupAcceptNoticesPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SetGroupAcceptNoticesPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SetGroupAcceptNoticesPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupRoleDataRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupRoleDataRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupRoleDataRequestPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupRoleDataReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupRoleDataReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupRoleDataReplyPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupRoleDataReplyPacket.RoleDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupRoleMembersRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupRoleMembersRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupRoleMembersRequestPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupRoleMembersReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupRoleMembersReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupRoleMembersReplyPacket.MemberDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupTitlesRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupTitlesRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupTitlesReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupTitlesReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupTitlesReplyPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupTitleUpdatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupTitleUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupRoleUpdatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupRoleUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupRoleUpdatePacket.RoleDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LiveHelpGroupRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LiveHelpGroupRequestPacket.RequestDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LiveHelpGroupReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LiveHelpGroupReplyPacket.ReplyDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentWearablesRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentWearablesRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentWearablesUpdatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentWearablesUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentWearablesUpdatePacket.WearableDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentIsNowWearingPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentIsNowWearingPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentIsNowWearingPacket.WearableDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentCachedTexturePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentCachedTexturePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentCachedTexturePacket.WearableDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentCachedTextureResponsePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentCachedTextureResponsePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentCachedTextureResponsePacket.WearableDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentDataUpdateRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentDataUpdateRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentDataUpdatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentDataUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupDataUpdatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.GroupDataUpdatePacket.AgentGroupDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentGroupDataUpdatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentGroupDataUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentGroupDataUpdatePacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentDropGroupPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentDropGroupPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CreateTrustedCircuitPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CreateTrustedCircuitPacket.DataBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DenyTrustedCircuitPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DenyTrustedCircuitPacket.DataBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RequestTrustedCircuitPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RezSingleAttachmentFromInvPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RezSingleAttachmentFromInvPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RezSingleAttachmentFromInvPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RezMultipleAttachmentsFromInvPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RezMultipleAttachmentsFromInvPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RezMultipleAttachmentsFromInvPacket.HeaderDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RezMultipleAttachmentsFromInvPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DetachAttachmentIntoInvPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.DetachAttachmentIntoInvPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CreateNewOutfitAttachmentsPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CreateNewOutfitAttachmentsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CreateNewOutfitAttachmentsPacket.HeaderDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CreateNewOutfitAttachmentsPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UserInfoRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UserInfoRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UserInfoReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UserInfoReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UserInfoReplyPacket.UserDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UpdateUserInfoPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UpdateUserInfoPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.UpdateUserInfoPacket.UserDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.InitiateDownloadPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.InitiateDownloadPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.InitiateDownloadPacket.FileDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SystemMessagePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SystemMessagePacket.MethodDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SystemMessagePacket.ParamListBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MapLayerRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MapLayerRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MapLayerReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MapLayerReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MapLayerReplyPacket.LayerDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MapBlockRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MapBlockRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MapBlockRequestPacket.PositionDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MapNameRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MapNameRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MapNameRequestPacket.NameDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MapBlockReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MapBlockReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MapBlockReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MapItemRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MapItemRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MapItemRequestPacket.RequestDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MapItemReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MapItemReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MapItemReplyPacket.RequestDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MapItemReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SendPostcardPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SendPostcardPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelMediaCommandMessagePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelMediaCommandMessagePacket.CommandBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelMediaUpdatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelMediaUpdatePacket.DataBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LandStatRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LandStatRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LandStatRequestPacket.RequestDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LandStatReplyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LandStatReplyPacket.RequestDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LandStatReplyPacket.ReportDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ErrorPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ErrorPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ErrorPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PacketAckPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PacketAckPacket.PacketsBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.OpenCircuitPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.OpenCircuitPacket.CircuitInfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CloseCircuitPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectAddPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectAddPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectAddPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MultipleObjectUpdatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MultipleObjectUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.MultipleObjectUpdatePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RequestMultipleObjectsPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RequestMultipleObjectsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RequestMultipleObjectsPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectPositionPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectPositionPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectPositionPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RequestObjectPropertiesFamilyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RequestObjectPropertiesFamilyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RequestObjectPropertiesFamilyPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CoarseLocationUpdatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CoarseLocationUpdatePacket.LocationBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CoarseLocationUpdatePacket.IndexBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CrossedRegionPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CrossedRegionPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CrossedRegionPacket.RegionDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CrossedRegionPacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ConfirmEnableSimulatorPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ConfirmEnableSimulatorPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectPropertiesPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectPropertiesPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectPropertiesFamilyPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectPropertiesFamilyPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelPropertiesRequestPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelPropertiesRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelPropertiesRequestPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AttachedSoundPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AttachedSoundPacket.DataBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AttachedSoundGainChangePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AttachedSoundGainChangePacket.DataBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PreloadSoundPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.PreloadSoundPacket.DataBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ViewerEffectPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ViewerEffectPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ViewerEffectPacket.EffectBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.StartPingCheckPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.StartPingCheckPacket.PingIDBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CompletePingCheckPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CompletePingCheckPacket.PingIDBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentUpdatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentAnimationPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentAnimationPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentAnimationPacket.AnimationListBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentAnimationPacket.PhysicalAvatarEventListBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentRequestSitPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentRequestSitPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentRequestSitPacket.TargetObjectBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentSitPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AgentSitPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RequestImagePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RequestImagePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.RequestImagePacket.RequestImageBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ImageDataPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ImageDataPacket.ImageIDBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ImageDataPacket.ImageDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ImagePacketPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ImagePacketPacket.ImageIDBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ImagePacketPacket.ImageDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LayerDataPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LayerDataPacket.LayerIDBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.LayerDataPacket.LayerDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectUpdatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectUpdatePacket.RegionDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectUpdatePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectUpdateCompressedPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectUpdateCompressedPacket.RegionDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectUpdateCompressedPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectUpdateCachedPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectUpdateCachedPacket.RegionDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ObjectUpdateCachedPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ImprovedTerseObjectUpdatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ImprovedTerseObjectUpdatePacket.RegionDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ImprovedTerseObjectUpdatePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.KillObjectPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.KillObjectPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TransferPacketPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.TransferPacketPacket.TransferDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SendXferPacketPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SendXferPacketPacket.XferIDBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SendXferPacketPacket.DataPacketBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ConfirmXferPacketPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ConfirmXferPacketPacket.XferIDBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarAnimationPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarAnimationPacket.SenderBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarAnimationPacket.AnimationListBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarAnimationPacket.AnimationSourceListBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarAnimationPacket.PhysicalAvatarEventListBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarSitResponsePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarSitResponsePacket.SitObjectBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.AvatarSitResponsePacket.SitTransformBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CameraConstraintPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.CameraConstraintPacket.CameraCollidePlaneBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelPropertiesPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ParcelPropertiesPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChildAgentUpdatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChildAgentUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChildAgentUpdatePacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChildAgentUpdatePacket.AnimationDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChildAgentUpdatePacket.GranterBlockBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChildAgentUpdatePacket.NVPairDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChildAgentUpdatePacket.VisualParamBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChildAgentAlivePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChildAgentAlivePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChildAgentPositionUpdatePacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.ChildAgentPositionUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SoundTriggerPacket">
            <exclude />
        </member>
        <member name="T:libsecondlife.Packets.SoundTriggerPacket.SoundDataBlock">
            <exclude />
        </member>
        <member name="T:libsecondlife.VisualParam">
            <summary>
            A single visual characteristic of an avatar mesh, such as eyebrow height
            </summary>
        </member>
        <member name="M:libsecondlife.VisualParam.#ctor(System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.String,System.Single,System.Single,System.Single)">
            <summary>
            Set all the values through the constructor
            </summary>
            <param name="paramID">Index of this visual param</param>
            <param name="name">Internal name</param>
            <param name="group">
            </param>
            <param name="wearable">
            </param>
            <param name="label">Displayable label of this characteristic</param>
            <param name="labelMin">Displayable label for the minimum value of this characteristic</param>
            <param name="labelMax">Displayable label for the maximum value of this characteristic</param>
            <param name="def">Default value</param>
            <param name="min">Minimum value</param>
            <param name="max">Maximum value</param>
        </member>
        <member name="F:libsecondlife.VisualParam.ParamID">
            <summary>Index of this visual param</summary>
        </member>
        <member name="F:libsecondlife.VisualParam.Name">
            <summary>Internal name</summary>
        </member>
        <member name="F:libsecondlife.VisualParam.Group">
            <summary>Group ID this parameter belongs to</summary>
        </member>
        <member name="F:libsecondlife.VisualParam.Wearable">
            <summary>Name of the wearable this parameter belongs to</summary>
        </member>
        <member name="F:libsecondlife.VisualParam.Label">
            <summary>Displayable label of this characteristic</summary>
        </member>
        <member name="F:libsecondlife.VisualParam.LabelMin">
            <summary>Displayable label for the minimum value of this characteristic</summary>
        </member>
        <member name="F:libsecondlife.VisualParam.LabelMax">
            <summary>Displayable label for the maximum value of this characteristic</summary>
        </member>
        <member name="F:libsecondlife.VisualParam.DefaultValue">
            <summary>Default value</summary>
        </member>
        <member name="F:libsecondlife.VisualParam.MinValue">
            <summary>Minimum value</summary>
        </member>
        <member name="F:libsecondlife.VisualParam.MaxValue">
            <summary>Maximum value</summary>
        </member>
        <member name="T:libsecondlife.VisualParams">
            <summary>
            Holds the Params array of all the avatar appearance parameters
            </summary>
        </member>
        <member name="T:libsecondlife.RegistrationApi.CreateUserParam">
            <summary>
            see https://secure-web6.secondlife.com/developers/third_party_reg/#service_create_user or
            https://wiki.secondlife.com/wiki/RegAPIDoc for description
            </summary>
        </member>
        <member name="M:libsecondlife.RegistrationApi.CreateUser(libsecondlife.RegistrationApi.CreateUserParam)">
            <summary>
            Returns the new user ID or throws an exception containing the error code
            The error codes can be found here: https://wiki.secondlife.com/wiki/RegAPIError
            </summary>
            <param name="user">New user account to create</param>
            <returns>The UUID of the new user account</returns>
        </member>
        <member name="T:libsecondlife.Utilities.WaterType">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Utilities.WaterType.Unknown">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Utilities.WaterType.Dry">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Utilities.WaterType.Waterfront">
            <summary>
            </summary>
        </member>
        <member name="F:libsecondlife.Utilities.WaterType.Underwater">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.Utilities.Realism.Chat(libsecondlife.SecondLife,System.String)">
            <summary>
            A psuedo-realistic chat function that uses the typing sound and
            animation, types at three characters per second, and randomly
            pauses. This function will block until the message has been sent
            </summary>
            <param name="client">A reference to the client that will chat</param>
            <param name="message">The chat message to send</param>
        </member>
        <member name="M:libsecondlife.Utilities.Realism.Chat(libsecondlife.SecondLife,System.String,libsecondlife.MainAvatar.ChatType,System.Int32)">
            <summary>
            A psuedo-realistic chat function that uses the typing sound and
            animation, types at a given rate, and randomly pauses. This
            function will block until the message has been sent
            </summary>
            <param name="client">A reference to the client that will chat</param>
            <param name="message">The chat message to send</param>
            <param name="type">The chat type (usually Normal, Whisper or Shout)</param>
            <param name="cps">Characters per second rate for chatting</param>
        </member>
        <member name="T:libsecondlife.Utilities.ParcelDownloader">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.Utilities.ParcelDownloader.#ctor(libsecondlife.SecondLife)">
            <summary>
            Default constructor
            </summary>
            <param name="client">A reference to the SecondLife client</param>
        </member>
        <member name="T:libsecondlife.Utilities.ParcelDownloader.ParcelsDownloadedCallback">
            <summary>
            </summary>
            <param name="simulator">Simulator where the parcels are located</param>
            <param name="Parcels">Mapping of parcel LocalIDs to Parcel objects</param>
        </member>
        <member name="F:libsecondlife.Utilities.ParcelDownloader.ParcelMarked">
            <summary>Dictionary of 64x64 arrays of parcels which have been successfully downloaded
            for each simulator (and their LocalID's, 0 = Null)</summary>
        </member>
        <member name="E:libsecondlife.Utilities.ParcelDownloader.OnParcelsDownloaded">
            <summary>
            </summary>
        </member>
        <member name="M:libsecondlife.Utilities.ParcelDownloader.GetHeightRange(System.Int32[,],System.Int32)">
            <summary>
            </summary>
            <param name="map">
            </param>
            <param name="localid">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:libsecondlife.Utilities.ParcelDownloader.GetWaterType(System.Int32[,],System.Int32)">
            <summary>
            </summary>
            <param name="map">
            </param>
            <param name="localid">
            </param>
            <returns>
            </returns>
        </member>
        <member name="F:libsecondlife.Utilities.VoiceServiceType.Unknown">
            <summary>Unknown voice service level</summary>
        </member>
        <member name="F:libsecondlife.Utilities.VoiceServiceType.TypeA">
            <summary>Spatialized local chat</summary>
        </member>
        <member name="F:libsecondlife.Utilities.VoiceServiceType.TypeB">
            <summary>Remote multi-party chat</summary>
        </member>
        <member name="F:libsecondlife.Utilities.VoiceServiceType.TypeC">
            <summary>One-to-one and small group chat</summary>
        </member>
        <member name="F:libsecondlife.Utilities.VoiceManager.BlockingTimeout">
            <summary>Amount of time to wait for the voice daemon to respond.
            The value needs to stay relatively high because some of the calls
            require the voice daemon to make remote queries before replying</summary>
        </member>
        <member name="M:libsecondlife.Utilities.VoiceManager.RequestRenderAudioStart(System.String,System.Boolean)">
            <summary>
            Does not appear to be working
            </summary>
            <param name="fileName">
            </param>
            <param name="loop">
            </param>
        </member>
    </members>
</doc>
