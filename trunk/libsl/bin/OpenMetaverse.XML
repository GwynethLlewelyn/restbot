<?xml version="1.0"?>
<doc>
    <assembly>
        <name>/Users/lms/Developer/restbot-0.5/libsl/bin/OpenMetaverse</name>
    </assembly>
    <members>
        <member name="T:OpenMetaverse.ScriptPermission">
            <summary>
            Permission request flags, asked when a script wants to control an Avatar
            </summary>
        </member>
        <member name="F:OpenMetaverse.ScriptPermission.None">
            <summary>Placeholder for empty values, shouldn't ever see this</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptPermission.Debit">
            <summary>Script wants ability to take money from you</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptPermission.TakeControls">
            <summary>Script wants to take camera controls for you</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptPermission.RemapControls">
            <summary>Script wants to remap avatars controls</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptPermission.TriggerAnimation">
            <summary>Script wants to trigger avatar animations</summary>
            <remarks>This function is not implemented on the grid</remarks>
        </member>
        <member name="F:OpenMetaverse.ScriptPermission.Attach">
            <summary>Script wants to attach or detach the prim or primset to your avatar</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptPermission.ReleaseOwnership">
            <summary>Script wants permission to release ownership</summary>
            <remarks>This function is not implemented on the grid
            The concept of "public" objects does not exist anymore.</remarks>
        </member>
        <member name="F:OpenMetaverse.ScriptPermission.ChangeLinks">
            <summary>Script wants ability to link/delink with other prims</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptPermission.ChangeJoints">
            <summary>Script wants permission to change joints</summary>
            <remarks>This function is not implemented on the grid</remarks>
        </member>
        <member name="F:OpenMetaverse.ScriptPermission.ChangePermissions">
            <summary>Script wants permissions to change permissions</summary>
            <remarks>This function is not implemented on the grid</remarks>
        </member>
        <member name="F:OpenMetaverse.ScriptPermission.TrackCamera">
            <summary>Script wants to track avatars camera position and rotation </summary>
        </member>
        <member name="F:OpenMetaverse.ScriptPermission.ControlCamera">
            <summary>Script wants to control your camera</summary>
        </member>
        <member name="T:OpenMetaverse.InstantMessageDialog">
            <summary>
            Special commands used in Instant Messages
            </summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.MessageFromAgent">
            <summary>Indicates a regular IM from another agent</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.MessageBox">
            <summary>Simple notification box with an OK button</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.GroupInvitation">
            <summary>You've been invited to join a group.</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.InventoryOffered">
            <summary>Inventory offer</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.InventoryAccepted">
            <summary>Accepted inventory offer</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.InventoryDeclined">
            <summary>Declined inventory offer</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.GroupVote">
            <summary>Group vote</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.TaskInventoryOffered">
            <summary>An object is offering its inventory</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.TaskInventoryAccepted">
            <summary>Accept an inventory offer from an object</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.TaskInventoryDeclined">
            <summary>Decline an inventory offer from an object</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.NewUserDefault">
            <summary>Unknown</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.SessionAdd">
            <summary>Start a session, or add users to a session</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.SessionOfflineAdd">
            <summary>Start a session, but don't prune offline users</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.SessionGroupStart">
            <summary>Start a session with your group</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.SessionCardlessStart">
            <summary>Start a session without a calling card (finder or objects)</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.SessionSend">
            <summary>Send a message to a session</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.SessionDrop">
            <summary>Leave a session</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.MessageFromObject">
            <summary>Indicates that the IM is from an object</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.BusyAutoResponse">
            <summary>Sent an IM to a busy user, this is the auto response</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.ConsoleAndChatHistory">
            <summary>Shows the message in the console and chat history</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.RequestTeleport">
            <summary>Send a teleport lure</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.AcceptTeleport">
            <summary>Response sent to the agent which inititiated a teleport invitation</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.DenyTeleport">
            <summary>Response sent to the agent which inititiated a teleport invitation</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.GodLikeRequestTeleport">
            <summary>Only useful if you have Linden permissions</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.CurrentlyUnused">
            <summary>A placeholder type for future expansion, currently not
            used</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.GotoUrl">
            <summary>IM to tell the user to go to an URL</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.Session911Start">
            <summary>IM for help</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.Lure911">
            <summary>IM sent automatically on call for help, sends a lure
            to each Helper reached</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.FromTaskAsAlert">
            <summary>Like an IM but won't go to email</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.GroupNotice">
            <summary>IM from a group officer to all group members</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.GroupNoticeInventoryAccepted">
            <summary>Unknown</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.GroupNoticeInventoryDeclined">
            <summary>Unknown</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.GroupInvitationAccept">
            <summary>Accept a group invitation</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.GroupInvitationDecline">
            <summary>Decline a group invitation</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.GroupNoticeRequested">
            <summary>Unknown</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.FriendshipOffered">
            <summary>An avatar is offering you friendship</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.FriendshipAccepted">
            <summary>An avatar has accepted your friendship offer</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.FriendshipDeclined">
            <summary>An avatar has declined your friendship offer</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.StartTyping">
            <summary>Indicates that a user has started typing</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageDialog.StopTyping">
            <summary>Indicates that a user has stopped typing</summary>
        </member>
        <member name="T:OpenMetaverse.InstantMessageOnline">
            <summary>
            Flag in Instant Messages, whether the IM should be delivered to
            offline avatars as well
            </summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageOnline.Online">
            <summary>Only deliver to online avatars</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessageOnline.Offline">
            <summary>If the avatar is offline the message will be held until
            they login next, and possibly forwarded to their e-mail account</summary>
        </member>
        <member name="T:OpenMetaverse.ChatType">
            <summary>
            Conversion type to denote Chat Packet types in an easier-to-understand format
            </summary>
        </member>
        <member name="F:OpenMetaverse.ChatType.Whisper">
            <summary>Whisper (5m radius)</summary>
        </member>
        <member name="F:OpenMetaverse.ChatType.Normal">
            <summary>Normal chat (10/20m radius), what the official viewer typically sends</summary>
        </member>
        <member name="F:OpenMetaverse.ChatType.Shout">
            <summary>Shouting! (100m radius)</summary>
        </member>
        <member name="F:OpenMetaverse.ChatType.StartTyping">
            <summary>Event message when an Avatar has begun to type</summary>
        </member>
        <member name="F:OpenMetaverse.ChatType.StopTyping">
            <summary>Event message when an Avatar has stopped typing</summary>
        </member>
        <member name="F:OpenMetaverse.ChatType.Debug">
            <summary>Send the message to the debug channel</summary>
        </member>
        <member name="F:OpenMetaverse.ChatType.OwnerSay">
            <summary>Event message when an object uses llOwnerSay</summary>
        </member>
        <member name="F:OpenMetaverse.ChatType.RegionSay">
            <summary>Special value to support llRegionSay, never sent to the client</summary>
        </member>
        <member name="T:OpenMetaverse.ChatSourceType">
            <summary>
            Identifies the source of a chat message
            </summary>
        </member>
        <member name="F:OpenMetaverse.ChatSourceType.System">
            <summary>Chat from the grid or simulator</summary>
        </member>
        <member name="F:OpenMetaverse.ChatSourceType.Agent">
            <summary>Chat from another avatar</summary>
        </member>
        <member name="F:OpenMetaverse.ChatSourceType.Object">
            <summary>Chat from an object</summary>
        </member>
        <member name="T:OpenMetaverse.ChatAudibleLevel">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ChatAudibleLevel.Not">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ChatAudibleLevel.Barely">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ChatAudibleLevel.Fully">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.EffectType">
            <summary>
            Effect type used in ViewerEffect packets
            </summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.Text">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.Icon">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.Connector">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.FlexibleObject">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.AnimalControls">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.AnimationObject">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.Cloth">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.Beam">
            <summary>Project a beam from a source to a destination, such as
            the one used when editing an object</summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.Glow">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.Point">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.Trail">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.Sphere">
            <summary>Create a swirl of particles around an object</summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.Spiral">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.Edit">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.LookAt">
            <summary>Cause an avatar to look at an object</summary>
        </member>
        <member name="F:OpenMetaverse.EffectType.PointAt">
            <summary>Cause an avatar to point at an object</summary>
        </member>
        <member name="T:OpenMetaverse.LookAtType">
            <summary>
            The action an avatar is doing when looking at something, used in
            ViewerEffect packets for the LookAt effect
            </summary>
        </member>
        <member name="F:OpenMetaverse.LookAtType.None">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.LookAtType.Idle">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.LookAtType.AutoListen">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.LookAtType.FreeLook">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.LookAtType.Respond">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.LookAtType.Hover">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.LookAtType.Conversation">
            <summary>Deprecated</summary>
        </member>
        <member name="F:OpenMetaverse.LookAtType.Select">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.LookAtType.Focus">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.LookAtType.Mouselook">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.LookAtType.Clear">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.PointAtType">
            <summary>
            The action an avatar is doing when pointing at something, used in
            ViewerEffect packets for the PointAt effect
            </summary>
        </member>
        <member name="F:OpenMetaverse.PointAtType.None">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.PointAtType.Select">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.PointAtType.Grab">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.PointAtType.Clear">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.MoneyTransactionType">
            <summary>
            Money transaction types
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.None">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.FailSimulatorTimeout">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.FailDataserverTimeout">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ObjectClaim">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.LandClaim">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.GroupCreate">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ObjectPublicClaim">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.GroupJoin">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.TeleportCharge">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.UploadCharge">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.LandAuction">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ClassifiedCharge">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ObjectTax">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.LandTax">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.LightTax">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ParcelDirFee">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.GroupTax">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ClassifiedRenew">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.GiveInventory">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ObjectSale">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.Gift">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.LandSale">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ReferBonus">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.InventorySale">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.RefundPurchase">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.LandPassSale">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.DwellBonus">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.PayObject">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ObjectPays">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.GroupLandDeed">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.GroupObjectDeed">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.GroupLiability">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.GroupDividend">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.GroupMembershipDues">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ObjectRelease">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.LandRelease">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ObjectDelete">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ObjectPublicDecay">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.ObjectPublicDelete">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.LindenAdjustment">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.LindenGrant">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.LindenPenalty">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.EventFee">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.EventPrize">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.StipendBasic">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.StipendDeveloper">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.StipendAlways">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.StipendDaily">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.StipendRating">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MoneyTransactionType.StipendDelta">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.TransactionFlags">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TransactionFlags.None">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TransactionFlags.SourceGroup">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TransactionFlags.DestGroup">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TransactionFlags.OwnerGroup">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TransactionFlags.SimultaneousContribution">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TransactionFlags.ContributionRemoval">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.MeanCollisionType">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MeanCollisionType.None">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MeanCollisionType.Bump">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MeanCollisionType.LLPushObject">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MeanCollisionType.SelectedObjectCollide">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MeanCollisionType.ScriptedObjectCollide">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MeanCollisionType.PhysicalObjectCollide">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.ScriptControlChange">
            <summary>
            Flags sent when a script takes or releases a control
            </summary>
            <remarks>NOTE: (need to verify) These might be a subset of the ControlFlags enum in Movement,</remarks>
        </member>
        <member name="F:OpenMetaverse.ScriptControlChange.None">
            <summary>No Flags set</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptControlChange.Forward">
            <summary>Forward (W or up Arrow)</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptControlChange.Back">
            <summary>Back (S or down arrow)</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptControlChange.Left">
            <summary>Move left (shift+A or left arrow)</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptControlChange.Right">
            <summary>Move right (shift+D or right arrow)</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptControlChange.Up">
            <summary>Up (E or PgUp)</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptControlChange.Down">
            <summary>Down (C or PgDown)</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptControlChange.RotateLeft">
            <summary>Rotate left (A or left arrow)</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptControlChange.RotateRight">
            <summary>Rotate right (D or right arrow)</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptControlChange.LeftButton">
            <summary>Left Mouse Button</summary>
        </member>
        <member name="F:OpenMetaverse.ScriptControlChange.MouseLookLeftButton">
            <summary>Left Mouse button in MouseLook</summary>
        </member>
        <member name="T:OpenMetaverse.AgentFlags">
            <summary>
            Currently only used to hide your group title
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentFlags.None">
            <summary>No flags set</summary>
        </member>
        <member name="F:OpenMetaverse.AgentFlags.HideTitle">
            <summary>Hide your group title</summary>
        </member>
        <member name="T:OpenMetaverse.AgentState">
            <summary>
            Action state of the avatar, which can currently be typing and
            editing
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentState.None">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentState.Typing">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentState.Editing">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.TeleportStatus">
            <summary>
            Current teleport status
            </summary>
        </member>
        <member name="F:OpenMetaverse.TeleportStatus.None">
            <summary>Unknown status</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportStatus.Start">
            <summary>Teleport initialized</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportStatus.Progress">
            <summary>Teleport in progress</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportStatus.Failed">
            <summary>Teleport failed</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportStatus.Finished">
            <summary>Teleport completed</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportStatus.Cancelled">
            <summary>Teleport cancelled</summary>
        </member>
        <member name="T:OpenMetaverse.TeleportFlags">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.Default">
            <summary>No flags set, or teleport failed</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.SetHomeToTarget">
            <summary>Set when newbie leaves help island for first time</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.SetLastToTarget">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.ViaLure">
            <summary>Via Lure</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.ViaLandmark">
            <summary>Via Landmark</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.ViaLocation">
            <summary>Via Location</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.ViaHome">
            <summary>Via Home</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.ViaTelehub">
            <summary>Via Telehub</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.ViaLogin">
            <summary>Via Login</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.ViaGodlikeLure">
            <summary>Linden Summoned</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.Godlike">
            <summary>Linden Forced me</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.NineOneOne">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.DisableCancel">
            <summary>Agent Teleported Home via Script</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.ViaRegionID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.IsFlying">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.ResetHome">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.ForceRedirect">
            <summary>forced to new location for example when avatar is banned or ejected</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.FinishedViaLure">
            <summary>Teleport Finished via a Lure</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.FinishedViaNewSim">
            <summary>Finished, Sim Changed</summary>
        </member>
        <member name="F:OpenMetaverse.TeleportFlags.FinishedViaSameSim">
            <summary>Finished, Same Sim</summary>
        </member>
        <member name="T:OpenMetaverse.TeleportLureFlags">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TeleportLureFlags.NormalLure">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TeleportLureFlags.GodlikeLure">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TeleportLureFlags.GodlikePursuit">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.ScriptSensorTypeFlags">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ScriptSensorTypeFlags.Agent">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ScriptSensorTypeFlags.Active">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ScriptSensorTypeFlags.Passive">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ScriptSensorTypeFlags.Scripted">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.InstantMessage">
            <summary>
            Instant Message
            </summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.FromAgentID">
            <summary>Key of sender</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.FromAgentName">
            <summary>Name of sender</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.ToAgentID">
            <summary>Key of destination avatar</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.ParentEstateID">
            <summary>ID of originating estate</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.RegionID">
            <summary>Key of originating region</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.Position">
            <summary>Coordinates in originating region</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.Dialog">
            <summary>Instant message type</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.GroupIM">
            <summary>Group IM session toggle</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.IMSessionID">
            <summary>Key of IM session, for Group Messages, the groups UUID</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.Timestamp">
            <summary>Timestamp of the instant message</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.Message">
            <summary>Instant message text</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.Offline">
            <summary>Whether this message is held for offline avatars</summary>
        </member>
        <member name="F:OpenMetaverse.InstantMessage.BinaryBucket">
            <summary>Context specific packed data</summary>
        </member>
        <member name="M:OpenMetaverse.InstantMessage.ToString">
            <summary>Print the struct data as a string</summary>
            <returns>A string containing the field name, and field value</returns>
        </member>
        <member name="T:OpenMetaverse.AgentManager">
            <summary>
            Manager class for our own avatar
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Constructor, setup callbacks for packets related to our avatar
            </summary>
            <param name="client">A reference to the <seealso cref="T:OpenMetaverse.GridClient" /> Class</param>
        </member>
        <member name="T:OpenMetaverse.AgentManager.AgentMovement">
            <summary>
            Agent movement and camera control
            Agent movement is controlled by setting specific <seealso cref="T:AgentManager.ControlFlags" />
            After the control flags are set, An AgentUpdate is required to update the simulator of the specified flags
            This is most easily accomplished by setting one or more of the AgentMovement properties
            Movement of an avatar is always based on a compass direction, for example AtPos will move the
            agent from West to East or forward on the X Axis, AtNeg will of course move agent from
            East to West or backward on the X Axis, LeftPos will be South to North or forward on the Y Axis
            The Z axis is Up, finer grained control of movements can be done using the Nudge properties
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AgentMovement.#ctor(OpenMetaverse.GridClient)">
            <summary>Default constructor</summary>
        </member>
        <member name="T:OpenMetaverse.AgentManager.AgentMovement.AgentCamera">
            <summary>
            Camera controls for the agent, mostly a thin wrapper around
            CoordinateFrame. This class is only responsible for state
            tracking and math, it does not send any packets
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AgentMovement.AgentCamera.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.AgentCamera.Far">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.AgentCamera.Frame">
            <summary>The camera is a local frame of reference inside of
            the larger grid space. This is where the math happens</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.AgentCamera.Position">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.AgentCamera.AtAxis">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.AgentCamera.LeftAxis">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.AgentCamera.UpAxis">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.Camera">
            <summary>Agent camera controls</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.Flags">
            <summary>Currently only used for hiding your group title</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.State">
            <summary>Action state of the avatar, which can currently be
            typing and editing</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.BodyRotation">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.HeadRotation">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.LastBodyRotation">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.LastHeadRotation">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.LastCameraCenter">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.LastCameraXAxis">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.LastCameraYAxis">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.LastCameraZAxis">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.LastFar">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.AgentMovement.updateTimer">
            <summary>Timer for sending AgentUpdate packets</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.AtPos">
            <summary>Move agent positive along the X axis</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.AtNeg">
            <summary>Move agent negative along the X axis</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.LeftPos">
            <summary>Move agent positive along the Y axis</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.LeftNeg">
            <summary>Move agent negative along the Y axis</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.UpPos">
            <summary>Move agent positive along the Z axis</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.UpNeg">
            <summary>Move agent negative along the Z axis</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.PitchPos">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.PitchNeg">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.YawPos">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.YawNeg">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.FastAt">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.FastLeft">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.FastUp">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.Fly">
            <summary>Causes simulator to make agent fly</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.Stop">
            <summary>Stop movement</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.FinishAnim">
            <summary>Finish animation</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.StandUp">
            <summary>Stand up from a sit</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.SitOnGround">
            <summary>Tells simulator to sit agent on ground</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.Mouselook">
            <summary>Place agent into mouselook mode</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.NudgeAtPos">
            <summary>Nudge agent positive along the X axis</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.NudgeAtNeg">
            <summary>Nudge agent negative along the X axis</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.NudgeLeftPos">
            <summary>Nudge agent positive along the Y axis</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.NudgeLeftNeg">
            <summary>Nudge agent negative along the Y axis</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.NudgeUpPos">
            <summary>Nudge agent positive along the Z axis</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.NudgeUpNeg">
            <summary>Nudge agent negative along the Z axis</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.TurnLeft">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.TurnRight">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.Away">
            <summary>Tell simulator to mark agent as away</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.LButtonDown">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.LButtonUp">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.MLButtonDown">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.MLButtonUp">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.AlwaysRun">
            <summary>
            Returns "always run" value, or changes it by sending a SetAlwaysRunPacket
            </summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.AgentControls">
            <summary>The current value of the agent control flags</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.UpdateInterval">
            <summary>Gets or sets the interval in milliseconds at which
            AgentUpdate packets are sent to the current simulator. Setting
            this to a non-zero value will also enable the packet sending if
            it was previously off, and setting it to zero will disable</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.UpdateEnabled">
            <summary>Gets or sets whether AgentUpdate packets are sent to
            the current simulator</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentMovement.AutoResetControls">
            <summary>Reset movement controls every time we send an update</summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AgentMovement.UpdateFromHeading(System.Double,System.Boolean)">
            <summary>
            Send an AgentUpdate with the camera set at the current agent
            position and pointing towards the heading specified
            </summary>
            <param name="heading">Camera rotation in radians</param>
            <param name="reliable">Whether to send the AgentUpdate reliable
            or not</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AgentMovement.TurnToward(OpenMetaverse.Vector3)">
            <summary>
            Rotates the avatar body and camera toward a target position.
            This will also anchor the camera position on the avatar
            </summary>
            <param name="target">Region coordinates to turn toward</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AgentMovement.SendUpdate">
            <summary>
            Send new AgentUpdate packet to update our current camera
            position and rotation
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AgentMovement.SendUpdate(System.Boolean)">
            <summary>
            Send new AgentUpdate packet to update our current camera
            position and rotation
            </summary>
            <param name="reliable">Whether to require server acknowledgement
            of this packet</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AgentMovement.SendUpdate(System.Boolean,OpenMetaverse.Simulator)">
            <summary>
            Send new AgentUpdate packet to update our current camera
            position and rotation
            </summary>
            <param name="reliable">Whether to require server acknowledgement
            of this packet</param>
            <param name="simulator">Simulator to send the update to</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AgentMovement.SendManualUpdate(OpenMetaverse.AgentManager.ControlFlags,OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Quaternion,OpenMetaverse.Quaternion,System.Single,OpenMetaverse.AgentFlags,OpenMetaverse.AgentState,System.Boolean)">
            <summary>
            Builds an AgentUpdate packet entirely from parameters. This
            will not touch the state of Self.Movement or
            Self.Movement.Camera in any way
            </summary>
            <param name="controlFlags">
            </param>
            <param name="position">
            </param>
            <param name="forwardAxis">
            </param>
            <param name="leftAxis">
            </param>
            <param name="upAxis">
            </param>
            <param name="bodyRotation">
            </param>
            <param name="headRotation">
            </param>
            <param name="farClip">
            </param>
            <param name="reliable">
            </param>
            <param name="flags">
            </param>
            <param name="state">
            </param>
        </member>
        <member name="T:OpenMetaverse.AgentManager.ControlFlags">
            <summary>
            Used to specify movement actions for your agent
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.NONE">
            <summary>Empty flag</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_AT_POS">
            <summary>Move Forward (SL Keybinding: W/Up Arrow)</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_AT_NEG">
            <summary>Move Backward (SL Keybinding: S/Down Arrow)</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_LEFT_POS">
            <summary>Move Left (SL Keybinding: Shift-(A/Left Arrow))</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_LEFT_NEG">
            <summary>Move Right (SL Keybinding: Shift-(D/Right Arrow))</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_UP_POS">
            <summary>Not Flying: Jump/Flying: Move Up (SL Keybinding: E)</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_UP_NEG">
            <summary>Not Flying: Croutch/Flying: Move Down (SL Keybinding: C)</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_PITCH_POS">
            <summary>Unused</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_PITCH_NEG">
            <summary>Unused</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_YAW_POS">
            <summary>Unused</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_YAW_NEG">
            <summary>Unused</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_FAST_AT">
            <summary>ORed with AGENT_CONTROL_AT_* if the keyboard is being used</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_FAST_LEFT">
            <summary>ORed with AGENT_CONTROL_LEFT_* if the keyboard is being used</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_FAST_UP">
            <summary>ORed with AGENT_CONTROL_UP_* if the keyboard is being used</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_FLY">
            <summary>Fly</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_STOP">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_FINISH_ANIM">
            <summary>Finish our current animation</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_STAND_UP">
            <summary>Stand up from the ground or a prim seat</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_SIT_ON_GROUND">
            <summary>Sit on the ground at our current location</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_MOUSELOOK">
            <summary>Whether mouselook is currently enabled</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_NUDGE_AT_POS">
            <summary>Legacy, used if a key was pressed for less than a certain amount of time</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_NUDGE_AT_NEG">
            <summary>Legacy, used if a key was pressed for less than a certain amount of time</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_NUDGE_LEFT_POS">
            <summary>Legacy, used if a key was pressed for less than a certain amount of time</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_NUDGE_LEFT_NEG">
            <summary>Legacy, used if a key was pressed for less than a certain amount of time</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_NUDGE_UP_POS">
            <summary>Legacy, used if a key was pressed for less than a certain amount of time</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_NUDGE_UP_NEG">
            <summary>Legacy, used if a key was pressed for less than a certain amount of time</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_TURN_LEFT">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_TURN_RIGHT">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_AWAY">
            <summary>Set when the avatar is idled or set to away. Note that the away animation is
            activated separately from setting this flag</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_LBUTTON_DOWN">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_LBUTTON_UP">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_ML_LBUTTON_DOWN">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.ControlFlags.AGENT_CONTROL_ML_LBUTTON_UP">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.AgentManager.AttachmentResourcesCallback">
            <summary>
            Called once attachment resource usage information has been collected
            </summary>
            <param name="success">Indicates if operation was successfull</param>
            <param name="info">Attachment resource usage information</param>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_Chat">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_ChatLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_ScriptDialog">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_ScriptDialogLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_ScriptQuestion">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_ScriptQuestionLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_LoadURL">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_LoadUrlLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_Balance">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_BalanceLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_MoneyBalance">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_MoneyBalanceReplyLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_InstantMessage">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_InstantMessageLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_Teleport">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_TeleportLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_AgentData">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_AgentDataLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_AnimationsChanged">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_AnimationsChangedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_MeanCollision">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_MeanCollisionLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_RegionCrossed">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_RegionCrossedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_GroupChatJoined">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_GroupChatJoinedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_GroupChatLeft">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_GroupChatLeftLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_AlertMessage">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_AlertMessageLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_ScriptControl">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_ScriptControlLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_CameraConstraint">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_CameraConstraintLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_ScriptSensorReply">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_ScriptSensorReplyLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_AvatarSitResponse">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_AvatarSitResponseLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_ChatSessionMemberAdded">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_ChatSessionMemberAddedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_ChatSessionMemberLeft">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.m_ChatSessionMemberLeftLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.Client">
            <summary>Reference to the GridClient instance</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.Movement">
            <summary>Used for movement and camera tracking</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.SignaledAnimations">
            <summary>Currently playing animations for the agent. Can be used to
            check the current movement status such as walking, hovering, aiming,
            etc. by checking against system animations found in the Animations class</summary>
        </member>
        <member name="F:OpenMetaverse.AgentManager.GroupChatSessions">
            <summary>Dictionary containing current Group Chat sessions and members</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.ChatFromSimulator">
            <summary>Raised when a scripted object or agent within range sends a public message</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.ScriptDialog">
            <summary>Raised when a scripted object sends a dialog box containing possible
            options an agent can respond to</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.ScriptQuestion">
            <summary>Raised when an object requests a change in the permissions an agent has permitted</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.LoadURL">
            <summary>Raised when a script requests an agent open the specified URL</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.MoneyBalance">
            <summary>Raised when an agents currency balance is updated</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.MoneyBalanceReply">
            <summary>Raised when a transaction occurs involving currency such as a land purchase</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.IM">
            <summary>Raised when an ImprovedInstantMessage packet is recieved from the simulator, this is used for everything from
            private messaging to friendship offers. The Dialog field defines what type of message has arrived</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.TeleportProgress">
            <summary>Raised when an agent has requested a teleport to another location, or when responding to a lure. Raised multiple times
            for each teleport indicating the progress of the request</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.AgentDataReply">
            <summary>Raised when a simulator sends agent specific information for our avatar.</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.AnimationsChanged">
            <summary>Raised when our agents animation playlist changes</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.MeanCollision">
            <summary>Raised when an object or avatar forcefully collides with our agent</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.RegionCrossed">
            <summary>Raised when our agent crosses a region border into another region</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.GroupChatJoined">
            <summary>Raised when our agent succeeds or fails to join a group chat session</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.GroupChatLeft">
            <summary>Raised when our agent exits a group chat session</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.AlertMessage">
            <summary>Raised when a simulator sends an urgent message usually indication the recent failure of
            another action we have attempted to take such as an attempt to enter a parcel where we are denied access</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.ScriptControlChange">
            <summary>Raised when a script attempts to take or release specified controls for our agent</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.CameraConstraint">
            <summary>Raised when the simulator detects our agent is trying to view something
            beyond its limits</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.ScriptSensorReply">
            <summary>Raised when a script sensor reply is received from a simulator</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.AvatarSitResponse">
            <summary>Raised in response to a <see cref="M:OpenMetaverse.AgentManager.RequestSit(OpenMetaverse.UUID,OpenMetaverse.Vector3)" /> request</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.ChatSessionMemberAdded">
            <summary>Raised when an avatar enters a group chat session we are participating in</summary>
        </member>
        <member name="E:OpenMetaverse.AgentManager.ChatSessionMemberLeft">
            <summary>Raised when an agent exits a group chat session we are participating in</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentID">
            <summary>Your (client) avatars <see cref="T:OpenMetaverse.UUID" /></summary>
            <remarks>"client", "agent", and "avatar" all represent the same thing</remarks>
        </member>
        <member name="P:OpenMetaverse.AgentManager.SessionID">
            <summary>Temporary <seealso cref="T:OpenMetaverse.UUID" /> assigned to this session, used for
            verifying our identity in packets</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.SecureSessionID">
            <summary>Shared secret <seealso cref="T:OpenMetaverse.UUID" /> that is never sent over the wire</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.LocalID">
            <summary>Your (client) avatar ID, local to the current region/sim</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.StartLocation">
            <summary>Where the avatar started at login. Can be "last", "home"
            or a login <seealso cref="T:OpenMetaverse.URI" /></summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AgentAccess">
            <summary>The access level of this agent, usually M or PG</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.CollisionPlane">
            <summary>The CollisionPlane of Agent</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.Velocity">
            <summary>An <seealso cref="T:OpenMetaverse.Vector3" /> representing the velocity of our agent</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.Acceleration">
            <summary>An <seealso cref="T:OpenMetaverse.Vector3" /> representing the acceleration of our agent</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.AngularVelocity">
            <summary>A <seealso cref="T:OpenMetaverse.Vector3" /> which specifies the angular speed, and axis about which an Avatar is rotating.</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.HomePosition">
            <summary>Position avatar client will goto when login to 'home' or during
            teleport request to 'home' region.</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.HomeLookAt">
            <summary>LookAt point saved/restored with HomePosition</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.FirstName">
            <summary>Avatar First Name (i.e. Philip)</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.LastName">
            <summary>Avatar Last Name (i.e. Linden)</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.Name">
            <summary>Avatar Full Name (i.e. Philip Linden)</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.Health">
            <summary>Gets the health of the agent</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.Balance">
            <summary>Gets the current balance of the agent</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.SittingOn">
            <summary>Gets the local ID of the prim the agent is sitting on,
            zero if the avatar is not currently sitting</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.ActiveGroup">
            <summary>Gets the <seealso cref="T:OpenMetaverse.UUID" /> of the agents active group.</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.ActiveGroupPowers">
            <summary>Gets the Agents powers in the currently active group</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.TeleportMessage">
            <summary>Current status message for teleporting</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.RelativePosition">
            <summary>Current position of the agent as a relative offset from
            the simulator, or the parent object if we are sitting on something</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.RelativeRotation">
            <summary>Current rotation of the agent as a relative rotation from
            the simulator, or the parent object if we are sitting on something</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.SimPosition">
            <summary>Current position of the agent in the simulator</summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.SimRotation">
            <summary>
            A <seealso cref="T:OpenMetaverse.Quaternion" /> representing the agents current rotation
            </summary>
        </member>
        <member name="P:OpenMetaverse.AgentManager.GlobalPosition">
            <summary>Returns the global grid position of the avatar</summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.OnChat(OpenMetaverse.ChatEventArgs)">
            <summary>Raises the ChatFromSimulator event</summary>
            <param name="e">A ChatEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.OnScriptDialog(OpenMetaverse.ScriptDialogEventArgs)">
            <summary>Raises the ScriptDialog event</summary>
            <param name="e">A SctriptDialogEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.OnScriptQuestion(OpenMetaverse.ScriptQuestionEventArgs)">
            <summary>Raises the ScriptQuestion event</summary>
            <param name="e">A ScriptQuestionEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.OnLoadURL(OpenMetaverse.LoadUrlEventArgs)">
            <summary>Raises the LoadURL event</summary>
            <param name="e">A LoadUrlEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.OnBalance(OpenMetaverse.BalanceEventArgs)">
            <summary>Raises the MoneyBalance event</summary>
            <param name="e">A BalanceEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.OnMoneyBalanceReply(OpenMetaverse.MoneyBalanceReplyEventArgs)">
            <summary>Raises the MoneyBalanceReply event</summary>
            <param name="e">A MoneyBalanceReplyEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.OnInstantMessage(OpenMetaverse.InstantMessageEventArgs)">
            <summary>Raises the IM event</summary>
            <param name="e">A InstantMessageEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.OnTeleport(OpenMetaverse.TeleportEventArgs)">
            <summary>Raises the TeleportProgress event</summary>
            <param name="e">A TeleportEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.OnAgentData(OpenMetaverse.AgentDataReplyEventArgs)">
            <summary>Raises the AgentDataReply event</summary>
            <param name="e">A AgentDataReplyEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.OnAnimationsChanged(OpenMetaverse.AnimationsChangedEventArgs)">
            <summary>Raises the AnimationsChanged event</summary>
            <param name="e">A AnimationsChangedEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.OnMeanCollision(OpenMetaverse.MeanCollisionEventArgs)">
            <summary>Raises the MeanCollision event</summary>
            <param name="e">A MeanCollisionEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.OnRegionCrossed(OpenMetaverse.RegionCrossedEventArgs)">
            <summary>Raises the RegionCrossed event</summary>
            <param name="e">A RegionCrossedEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.OnGroupChatJoined(OpenMetaverse.GroupChatJoinedEventArgs)">
            <summary>Raises the GroupChatJoined event</summary>
            <param name="e">A GroupChatJoinedEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.OnGroupChatLeft(OpenMetaverse.GroupChatLeftEventArgs)">
            <summary>Raises the GroupChatLeft event</summary>
            <param name="e">A GroupChatLeftEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.OnAlertMessage(OpenMetaverse.AlertMessageEventArgs)">
            <summary>Raises the AlertMessage event</summary>
            <param name="e">A AlertMessageEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.OnScriptControlChange(OpenMetaverse.ScriptControlEventArgs)">
            <summary>Raises the ScriptControlChange event</summary>
            <param name="e">A ScriptControlEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.OnCameraConstraint(OpenMetaverse.CameraConstraintEventArgs)">
            <summary>Raises the CameraConstraint event</summary>
            <param name="e">A CameraConstraintEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.OnScriptSensorReply(OpenMetaverse.ScriptSensorReplyEventArgs)">
            <summary>Raises the ScriptSensorReply event</summary>
            <param name="e">A ScriptSensorReplyEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.OnAvatarSitResponse(OpenMetaverse.AvatarSitResponseEventArgs)">
            <summary>Raises the AvatarSitResponse event</summary>
            <param name="e">A AvatarSitResponseEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.OnChatSessionMemberAdded(OpenMetaverse.ChatSessionMemberAddedEventArgs)">
            <summary>Raises the ChatSessionMemberAdded event</summary>
            <param name="e">A ChatSessionMemberAddedEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.OnChatSessionMemberLeft(OpenMetaverse.ChatSessionMemberLeftEventArgs)">
            <summary>Raises the ChatSessionMemberLeft event</summary>
            <param name="e">A ChatSessionMemberLeftEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Chat(System.String,System.Int32,OpenMetaverse.ChatType)">
            <summary>
            Send a text message from the Agent to the Simulator
            </summary>
            <param name="message">A <see cref="T:System.String" /> containing the message</param>
            <param name="channel">The channel to send the message on, 0 is the public channel. Channels above 0
            can be used however only scripts listening on the specified channel will see the message</param>
            <param name="type">Denotes the type of message being sent, shout, whisper, etc.</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.RetrieveInstantMessages">
            <summary>
            Request any instant messages sent while the client was offline to be resent.
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.InstantMessage(OpenMetaverse.UUID,System.String)">
            <summary>
            Send an Instant Message to another Avatar
            </summary>
            <param name="target">The recipients <see cref="T:OpenMetaverse.UUID" /></param>
            <param name="message">A <see cref="T:System.String" /> containing the message to send</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.InstantMessage(OpenMetaverse.UUID,System.String,OpenMetaverse.UUID)">
            <summary>
            Send an Instant Message to an existing group chat or conference chat
            </summary>
            <param name="target">The recipients <see cref="T:OpenMetaverse.UUID" /></param>
            <param name="message">A <see cref="T:System.String" /> containing the message to send</param>
            <param name="imSessionID">IM session ID (to differentiate between IM windows)</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.InstantMessage(System.String,OpenMetaverse.UUID,System.String,OpenMetaverse.UUID,OpenMetaverse.UUID[])">
            <summary>
            Send an Instant Message
            </summary>
            <param name="fromName">The name this IM will show up as being from</param>
            <param name="target">Key of Avatar</param>
            <param name="message">Text message being sent</param>
            <param name="imSessionID">IM session ID (to differentiate between IM windows)</param>
            <param name="conferenceIDs">IDs of sessions for a conference</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.InstantMessage(System.String,OpenMetaverse.UUID,System.String,OpenMetaverse.UUID,OpenMetaverse.InstantMessageDialog,OpenMetaverse.InstantMessageOnline,OpenMetaverse.Vector3,OpenMetaverse.UUID,System.Byte[])">
            <summary>
            Send an Instant Message
            </summary>
            <param name="fromName">The name this IM will show up as being from</param>
            <param name="target">Key of Avatar</param>
            <param name="message">Text message being sent</param>
            <param name="imSessionID">IM session ID (to differentiate between IM windows)</param>
            <param name="dialog">Type of instant message to send</param>
            <param name="offline">Whether to IM offline avatars as well</param>
            <param name="position">Senders Position</param>
            <param name="regionID">RegionID Sender is In</param>
            <param name="binaryBucket">Packed binary data that is specific to
            the dialog type</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.InstantMessageGroup(OpenMetaverse.UUID,System.String)">
            <summary>
            Send an Instant Message to a group
            </summary>
            <param name="groupID">
                <seealso cref="T:OpenMetaverse.UUID" /> of the group to send message to</param>
            <param name="message">Text Message being sent.</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.InstantMessageGroup(System.String,OpenMetaverse.UUID,System.String)">
            <summary>
            Send an Instant Message to a group the agent is a member of
            </summary>
            <param name="fromName">The name this IM will show up as being from</param>
            <param name="groupID">
                <seealso cref="T:OpenMetaverse.UUID" /> of the group to send message to</param>
            <param name="message">Text message being sent</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.RequestJoinGroupChat(OpenMetaverse.UUID)">
            <summary>
            Send a request to join a group chat session
            </summary>
            <param name="groupID">
                <seealso cref="T:OpenMetaverse.UUID" /> of Group to leave</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.RequestLeaveGroupChat(OpenMetaverse.UUID)">
            <summary>
            Exit a group chat session. This will stop further Group chat messages
            from being sent until session is rejoined.
            </summary>
            <param name="groupID">
                <seealso cref="T:OpenMetaverse.UUID" /> of Group chat session to leave</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ReplyToScriptDialog(System.Int32,System.Int32,System.String,OpenMetaverse.UUID)">
            <summary>
            Reply to script dialog questions.
            </summary>
            <param name="channel">Channel initial request came on</param>
            <param name="buttonIndex">Index of button you're "clicking"</param>
            <param name="buttonlabel">Label of button you're "clicking"</param>
            <param name="objectID">
                <seealso cref="T:OpenMetaverse.UUID" /> of Object that sent the dialog request</param>
            <seealso cref="M:OpenMetaverse.AgentManager.OnScriptDialog(OpenMetaverse.ScriptDialogEventArgs)" />
        </member>
        <member name="M:OpenMetaverse.AgentManager.ChatterBoxAcceptInvite(OpenMetaverse.UUID)">
            <summary>
            Accept invite for to a chatterbox session
            </summary>
            <param name="session_id">
                <seealso cref="T:OpenMetaverse.UUID" /> of session to accept invite to</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.StartIMConference(System.Collections.Generic.List{OpenMetaverse.UUID},OpenMetaverse.UUID)">
            <summary>
            Start a friends conference
            </summary>
            <param name="participants">
                <seealso cref="T:OpenMetaverse.UUID" /> List of UUIDs to start a conference with</param>
            <param name="tmp_session_id">the temportary session ID returned in the <see cref="!:OnJoinedGroupChat" /> callback&gt;</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.PointAtEffect(OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.Vector3d,OpenMetaverse.PointAtType,OpenMetaverse.UUID)">
            <summary>
            Start a particle stream between an agent and an object
            </summary>
            <param name="sourceAvatar">
                <seealso cref="T:OpenMetaverse.UUID" /> Key of the source agent</param>
            <param name="targetObject">
                <seealso cref="T:OpenMetaverse.UUID" /> Key of the target object</param>
            <param name="globalOffset">
            </param>
            <param name="type">The type from the <seealso cref="T:PointAtType" /> enum</param>
            <param name="effectID">A unique <seealso cref="T:OpenMetaverse.UUID" /> for this effect</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.LookAtEffect(OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.Vector3d,OpenMetaverse.LookAtType,OpenMetaverse.UUID)">
            <summary>
            Start a particle stream between an agent and an object
            </summary>
            <param name="sourceAvatar">
                <seealso cref="T:OpenMetaverse.UUID" /> Key of the source agent</param>
            <param name="targetObject">
                <seealso cref="T:OpenMetaverse.UUID" /> Key of the target object</param>
            <param name="globalOffset">A <seealso cref="T:OpenMetaverse.Vector3d" /> representing the beams offset from the source</param>
            <param name="type">A <seealso cref="T:PointAtType" /> which sets the avatars lookat animation</param>
            <param name="effectID">
                <seealso cref="T:OpenMetaverse.UUID" /> of the Effect</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.BeamEffect(OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.Vector3d,OpenMetaverse.Color4,System.Single,OpenMetaverse.UUID)">
            <summary>
            Create a particle beam between an avatar and an primitive
            </summary>
            <param name="sourceAvatar">The ID of source avatar</param>
            <param name="targetObject">The ID of the target primitive</param>
            <param name="globalOffset">global offset</param>
            <param name="color">A <see cref="T:OpenMetaverse.Color4" /> object containing the combined red, green, blue and alpha
            color values of particle beam</param>
            <param name="duration">a float representing the duration the parcicle beam will last</param>
            <param name="effectID">A Unique ID for the beam</param>
            <seealso cref="T:OpenMetaverse.Packets.ViewerEffectPacket" />
        </member>
        <member name="M:OpenMetaverse.AgentManager.SphereEffect(OpenMetaverse.Vector3d,OpenMetaverse.Color4,System.Single,OpenMetaverse.UUID)">
            <summary>
            Create a particle swirl around a target position using a <seealso cref="T:OpenMetaverse.Packets.ViewerEffectPacket" /> packet
            </summary>
            <param name="globalOffset">global offset</param>
            <param name="color">A <see cref="T:OpenMetaverse.Color4" /> object containing the combined red, green, blue and alpha
            color values of particle beam</param>
            <param name="duration">a float representing the duration the parcicle beam will last</param>
            <param name="effectID">A Unique ID for the beam</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.RequestSit(OpenMetaverse.UUID,OpenMetaverse.Vector3)">
            <summary>
            Sends a request to sit on the specified object
            </summary>
            <param name="targetID">
                <seealso cref="T:OpenMetaverse.UUID" /> of the object to sit on</param>
            <param name="offset">Sit at offset</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Sit">
            <summary>
            Follows a call to <seealso cref="M:OpenMetaverse.AgentManager.RequestSit(OpenMetaverse.UUID,OpenMetaverse.Vector3)" /> to actually sit on the object
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Stand">
            <summary>Stands up from sitting on a prim or the ground</summary>
            <returns>true of AgentUpdate was sent</returns>
        </member>
        <member name="M:OpenMetaverse.AgentManager.SitOnGround">
            <summary>
            Does a "ground sit" at the avatar's current position
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Fly(System.Boolean)">
            <summary>
            Starts or stops flying
            </summary>
            <param name="start">True to start flying, false to stop flying</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Crouch(System.Boolean)">
            <summary>
            Starts or stops crouching
            </summary>
            <param name="crouching">True to start crouching, false to stop crouching</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Jump(System.Boolean)">
            <summary>
            Starts a jump (begin holding the jump key)
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AutoPilot(System.Double,System.Double,System.Double)">
            <summary>
            Use the autopilot sim function to move the avatar to a new
            position. Uses double precision to get precise movements
            </summary>
            <remarks>The z value is currently not handled properly by the simulator</remarks>
            <param name="globalX">Global X coordinate to move to</param>
            <param name="globalY">Global Y coordinate to move to</param>
            <param name="z">Z coordinate to move to</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AutoPilot(System.UInt64,System.UInt64,System.Single)">
            <summary>
            Use the autopilot sim function to move the avatar to a new position
            </summary>
            <remarks>The z value is currently not handled properly by the simulator</remarks>
            <param name="globalX">Integer value for the global X coordinate to move to</param>
            <param name="globalY">Integer value for the global Y coordinate to move to</param>
            <param name="z">Floating-point value for the Z coordinate to move to</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AutoPilotLocal(System.Int32,System.Int32,System.Single)">
            <summary>
            Use the autopilot sim function to move the avatar to a new position
            </summary>
            <remarks>The z value is currently not handled properly by the simulator</remarks>
            <param name="localX">Integer value for the local X coordinate to move to</param>
            <param name="localY">Integer value for the local Y coordinate to move to</param>
            <param name="z">Floating-point value for the Z coordinate to move to</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AutoPilotCancel">
            <summary>Macro to cancel autopilot sim function</summary>
            <remarks>Not certain if this is how it is really done</remarks>
            <returns>true if control flags were set and AgentUpdate was sent to the simulator</returns>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Grab(System.UInt32)">
            <summary>
            Grabs an object
            </summary>
            <param name="objectLocalID">an unsigned integer of the objects ID within the simulator</param>
            <seealso cref="F:OpenMetaverse.Simulator.ObjectsPrimitives" />
        </member>
        <member name="M:OpenMetaverse.AgentManager.Grab(System.UInt32,OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Vector3,System.Int32,OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Vector3)">
            <summary>
            Overload: Grab a simulated object
            </summary>
            <param name="objectLocalID">an unsigned integer of the objects ID within the simulator</param>
            <param name="grabOffset">
            </param>
            <param name="uvCoord">The texture coordinates to grab</param>
            <param name="stCoord">The surface coordinates to grab</param>
            <param name="faceIndex">The face of the position to grab</param>
            <param name="position">The region coordinates of the position to grab</param>
            <param name="normal">The surface normal of the position to grab (A normal is a vector perpindicular to the surface)</param>
            <param name="binormal">The surface binormal of the position to grab (A binormal is a vector tangen to the surface
            pointing along the U direction of the tangent space</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.GrabUpdate(OpenMetaverse.UUID,OpenMetaverse.Vector3)">
            <summary>
            Drag an object
            </summary>
            <param name="objectID">
                <seealso cref="T:OpenMetaverse.UUID" /> of the object to drag</param>
            <param name="grabPosition">Drag target in region coordinates</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.GrabUpdate(OpenMetaverse.UUID,OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Vector3,System.Int32,OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Vector3)">
            <summary>
            Overload: Drag an object
            </summary>
            <param name="objectID">
                <seealso cref="T:OpenMetaverse.UUID" /> of the object to drag</param>
            <param name="grabPosition">Drag target in region coordinates</param>
            <param name="grabOffset">
            </param>
            <param name="uvCoord">The texture coordinates to grab</param>
            <param name="stCoord">The surface coordinates to grab</param>
            <param name="faceIndex">The face of the position to grab</param>
            <param name="position">The region coordinates of the position to grab</param>
            <param name="normal">The surface normal of the position to grab (A normal is a vector perpindicular to the surface)</param>
            <param name="binormal">The surface binormal of the position to grab (A binormal is a vector tangen to the surface
            pointing along the U direction of the tangent space</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.DeGrab(System.UInt32)">
            <summary>
            Release a grabbed object
            </summary>
            <param name="objectLocalID">The Objects Simulator Local ID</param>
            <seealso cref="F:OpenMetaverse.Simulator.ObjectsPrimitives" />
            <seealso cref="M:OpenMetaverse.AgentManager.Grab(System.UInt32,OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Vector3,System.Int32,OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Vector3)" />
            <seealso cref="M:OpenMetaverse.AgentManager.GrabUpdate(OpenMetaverse.UUID,OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Vector3,System.Int32,OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Vector3)" />
        </member>
        <member name="M:OpenMetaverse.AgentManager.DeGrab(System.UInt32,OpenMetaverse.Vector3,OpenMetaverse.Vector3,System.Int32,OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Vector3)">
            <summary>
            Release a grabbed object
            </summary>
            <param name="objectLocalID">The Objects Simulator Local ID</param>
            <param name="uvCoord">The texture coordinates to grab</param>
            <param name="stCoord">The surface coordinates to grab</param>
            <param name="faceIndex">The face of the position to grab</param>
            <param name="position">The region coordinates of the position to grab</param>
            <param name="normal">The surface normal of the position to grab (A normal is a vector perpindicular to the surface)</param>
            <param name="binormal">The surface binormal of the position to grab (A binormal is a vector tangen to the surface
            pointing along the U direction of the tangent space</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Touch(System.UInt32)">
            <summary>
            Touches an object
            </summary>
            <param name="objectLocalID">an unsigned integer of the objects ID within the simulator</param>
            <seealso cref="F:OpenMetaverse.Simulator.ObjectsPrimitives" />
        </member>
        <member name="M:OpenMetaverse.AgentManager.RequestBalance">
            <summary>
            Request the current L$ balance
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.GiveAvatarMoney(OpenMetaverse.UUID,System.Int32)">
            <summary>
            Give Money to destination Avatar
            </summary>
            <param name="target">UUID of the Target Avatar</param>
            <param name="amount">Amount in L$</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.GiveAvatarMoney(OpenMetaverse.UUID,System.Int32,System.String)">
            <summary>
            Give Money to destination Avatar
            </summary>
            <param name="target">UUID of the Target Avatar</param>
            <param name="amount">Amount in L$</param>
            <param name="description">Description that will show up in the
            recipients transaction history</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.GiveObjectMoney(OpenMetaverse.UUID,System.Int32,System.String)">
            <summary>
            Give L$ to an object
            </summary>
            <param name="target">object <seealso cref="T:OpenMetaverse.UUID" /> to give money to</param>
            <param name="amount">amount of L$ to give</param>
            <param name="objectName">name of object</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.GiveGroupMoney(OpenMetaverse.UUID,System.Int32)">
            <summary>
            Give L$ to a group
            </summary>
            <param name="target">group <seealso cref="T:OpenMetaverse.UUID" /> to give money to</param>
            <param name="amount">amount of L$ to give</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.GiveGroupMoney(OpenMetaverse.UUID,System.Int32,System.String)">
            <summary>
            Give L$ to a group
            </summary>
            <param name="target">group <seealso cref="T:OpenMetaverse.UUID" /> to give money to</param>
            <param name="amount">amount of L$ to give</param>
            <param name="description">description of transaction</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.PayUploadFee">
            <summary>
            Pay texture/animation upload fee
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.PayUploadFee(System.String)">
            <summary>
            Pay texture/animation upload fee
            </summary>
            <param name="description">description of the transaction</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.GiveMoney(OpenMetaverse.UUID,System.Int32,System.String,OpenMetaverse.MoneyTransactionType,OpenMetaverse.TransactionFlags)">
            <summary>
            Give Money to destination Object or Avatar
            </summary>
            <param name="target">UUID of the Target Object/Avatar</param>
            <param name="amount">Amount in L$</param>
            <param name="description">Reason (Optional normally)</param>
            <param name="type">The type of transaction</param>
            <param name="flags">Transaction flags, mostly for identifying group
            transactions</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.PlayGesture(OpenMetaverse.UUID)">
            <summary>
            Plays a gesture
            </summary>
            <param name="gestureID">Asset <seealso cref="T:OpenMetaverse.UUID" /> of the gesture</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ActivateGesture(OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>
            Mark gesture active
            </summary>
            <param name="invID">Inventory <seealso cref="T:OpenMetaverse.UUID" /> of the gesture</param>
            <param name="assetID">Asset <seealso cref="T:OpenMetaverse.UUID" /> of the gesture</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.DeactivateGesture(OpenMetaverse.UUID)">
            <summary>
            Mark gesture inactive
            </summary>
            <param name="invID">Inventory <seealso cref="T:OpenMetaverse.UUID" /> of the gesture</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AnimationStart(OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Send an AgentAnimation packet that toggles a single animation on
            </summary>
            <param name="animation">The <seealso cref="T:OpenMetaverse.UUID" /> of the animation to start playing</param>
            <param name="reliable">Whether to ensure delivery of this packet or not</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AnimationStop(OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Send an AgentAnimation packet that toggles a single animation off
            </summary>
            <param name="animation">The <seealso cref="T:OpenMetaverse.UUID" /> of a
            currently playing animation to stop playing</param>
            <param name="reliable">Whether to ensure delivery of this packet or not</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Animate(System.Collections.Generic.Dictionary{OpenMetaverse.UUID,System.Boolean},System.Boolean)">
            <summary>
            Send an AgentAnimation packet that will toggle animations on or off
            </summary>
            <param name="animations">A list of animation <seealso cref="T:OpenMetaverse.UUID" />s, and whether to
            turn that animation on or off</param>
            <param name="reliable">Whether to ensure delivery of this packet or not</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.GoHome">
            <summary>
            Teleports agent to their stored home location
            </summary>
            <returns>true on successful teleport to home location</returns>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Teleport(OpenMetaverse.UUID)">
            <summary>
            Teleport agent to a landmark
            </summary>
            <param name="landmark">
                <seealso cref="T:OpenMetaverse.UUID" /> of the landmark to teleport agent to</param>
            <returns>true on success, false on failure</returns>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Teleport(System.String,OpenMetaverse.Vector3)">
            <summary>
            Attempt to look up a simulator name and teleport to the discovered
            destination
            </summary>
            <param name="simName">Region name to look up</param>
            <param name="position">Position to teleport to</param>
            <returns>True if the lookup and teleport were successful, otherwise
            false</returns>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Teleport(System.String,OpenMetaverse.Vector3,OpenMetaverse.Vector3)">
            <summary>
            Attempt to look up a simulator name and teleport to the discovered
            destination
            </summary>
            <param name="simName">Region name to look up</param>
            <param name="position">Position to teleport to</param>
            <param name="lookAt">Target to look at</param>
            <returns>True if the lookup and teleport were successful, otherwise
            false</returns>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Teleport(System.UInt64,OpenMetaverse.Vector3)">
            <summary>
            Teleport agent to another region
            </summary>
            <param name="regionHandle">handle of region to teleport agent to</param>
            <param name="position">
                <seealso cref="T:OpenMetaverse.Vector3" /> position in destination sim to teleport to</param>
            <returns>true on success, false on failure</returns>
            <remarks>This call is blocking</remarks>
        </member>
        <member name="M:OpenMetaverse.AgentManager.Teleport(System.UInt64,OpenMetaverse.Vector3,OpenMetaverse.Vector3)">
            <summary>
            Teleport agent to another region
            </summary>
            <param name="regionHandle">handle of region to teleport agent to</param>
            <param name="position">
                <seealso cref="T:OpenMetaverse.Vector3" /> position in destination sim to teleport to</param>
            <param name="lookAt">
                <seealso cref="T:OpenMetaverse.Vector3" /> direction in destination sim agent will look at</param>
            <returns>true on success, false on failure</returns>
            <remarks>This call is blocking</remarks>
        </member>
        <member name="M:OpenMetaverse.AgentManager.RequestTeleport(System.UInt64,OpenMetaverse.Vector3)">
            <summary>
            Request teleport to a another simulator
            </summary>
            <param name="regionHandle">handle of region to teleport agent to</param>
            <param name="position">
                <seealso cref="T:OpenMetaverse.Vector3" /> position in destination sim to teleport to</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.RequestTeleport(System.UInt64,OpenMetaverse.Vector3,OpenMetaverse.Vector3)">
            <summary>
            Request teleport to a another simulator
            </summary>
            <param name="regionHandle">handle of region to teleport agent to</param>
            <param name="position">
                <seealso cref="T:OpenMetaverse.Vector3" /> position in destination sim to teleport to</param>
            <param name="lookAt">
                <seealso cref="T:OpenMetaverse.Vector3" /> direction in destination sim agent will look at</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.RequestTeleport(OpenMetaverse.UUID)">
            <summary>
            Teleport agent to a landmark
            </summary>
            <param name="landmark">
                <seealso cref="T:OpenMetaverse.UUID" /> of the landmark to teleport agent to</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.SendTeleportLure(OpenMetaverse.UUID)">
            <summary>
            Send a teleport lure to another avatar with default "Join me in ..." invitation message
            </summary>
            <param name="targetID">target avatars <seealso cref="T:OpenMetaverse.UUID" /> to lure</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.SendTeleportLure(OpenMetaverse.UUID,System.String)">
            <summary>
            Send a teleport lure to another avatar with custom invitation message
            </summary>
            <param name="targetID">target avatars <seealso cref="T:OpenMetaverse.UUID" /> to lure</param>
            <param name="message">custom message to send with invitation</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.TeleportLureRespond(OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Respond to a teleport lure by either accepting it and initiating
            the teleport, or denying it
            </summary>
            <param name="requesterID">
                <seealso cref="T:OpenMetaverse.UUID" /> of the avatar sending the lure</param>
            <param name="accept">true to accept the lure, false to decline it</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.UpdateProfile(OpenMetaverse.Avatar.AvatarProperties)">
            <summary>
            Update agent profile
            </summary>
            <param name="profile">
                <seealso cref="T:OpenMetaverse.Avatar.AvatarProperties" /> struct containing updated
            profile information</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.UpdateInterests(OpenMetaverse.Avatar.Interests)">
            <summary>
            Update agents profile interests
            </summary>
            <param name="interests">selection of interests from <seealso cref="T:OpenMetaverse.Avatar.Interests" /> struct</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.SetHeightWidth(System.UInt16,System.UInt16)">
            <summary>
            Set the height and the width of the client window. This is used
            by the server to build a virtual camera frustum for our avatar
            </summary>
            <param name="height">New height of the viewer window</param>
            <param name="width">New width of the viewer window</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.RequestMuteList">
            <summary>
            Request the list of muted objects and avatars for this agent
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentManager.SetHome">
            <summary>
            Sets home location to agents current position
            </summary>
            <remarks>will fire an AlertMessage (<seealso cref="E:OpenMetaverse.AgentManager.OnAlertMessage" />) with
            success or failure message</remarks>
        </member>
        <member name="M:OpenMetaverse.AgentManager.CompleteAgentMovement(OpenMetaverse.Simulator)">
            <summary>
            Move an agent in to a simulator. This packet is the last packet
            needed to complete the transition in to a new simulator
            </summary>
            <param name="simulator">
                <seealso cref="T:OpenMetaverse.Simulator" /> Object</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ScriptQuestionReply(OpenMetaverse.Simulator,OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.ScriptPermission)">
            <summary>
            Reply to script permissions request
            </summary>
            <param name="simulator">
                <seealso cref="T:OpenMetaverse.Simulator" /> Object</param>
            <param name="itemID">
                <seealso cref="T:OpenMetaverse.UUID" /> of the itemID requesting permissions</param>
            <param name="taskID">
                <seealso cref="T:OpenMetaverse.UUID" /> of the taskID requesting permissions</param>
            <param name="permissions">
                <seealso cref="T:OpenMetaverse.ScriptPermission" /> list of permissions to allow</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.GroupInviteRespond(OpenMetaverse.UUID,OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Respond to a group invitation by either accepting or denying it
            </summary>
            <param name="groupID">UUID of the group (sent in the AgentID field of the invite message)</param>
            <param name="imSessionID">IM Session ID from the group invitation message</param>
            <param name="accept">Accept the group invitation or deny it</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.RequestScriptSensor(System.String,OpenMetaverse.UUID,OpenMetaverse.ScriptSensorTypeFlags,System.Single,System.Single,OpenMetaverse.UUID,OpenMetaverse.Simulator)">
            <summary>
            Requests script detection of objects and avatars
            </summary>
            <param name="name">name of the object/avatar to search for</param>
            <param name="searchID">UUID of the object or avatar to search for</param>
            <param name="type">Type of search from ScriptSensorTypeFlags</param>
            <param name="range">range of scan (96 max?)</param>
            <param name="arc">the arc in radians to search within</param>
            <param name="requestID">an user generated ID to correlate replies with</param>
            <param name="sim">Simulator to perform search in</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.PickInfoUpdate(OpenMetaverse.UUID,System.Boolean,OpenMetaverse.UUID,System.String,OpenMetaverse.Vector3d,OpenMetaverse.UUID,System.String)">
            <summary>
            Create or update profile pick
            </summary>
            <param name="pickID">UUID of the pick to update, or random UUID to create a new pick</param>
            <param name="topPick">Is this a top pick? (typically false)</param>
            <param name="parcelID">UUID of the parcel (UUID.Zero for the current parcel)</param>
            <param name="name">Name of the pick</param>
            <param name="globalPosition">Global position of the pick landmark</param>
            <param name="textureID">UUID of the image displayed with the pick</param>
            <param name="description">Long description of the pick</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.PickDelete(OpenMetaverse.UUID)">
            <summary>
            Delete profile pick
            </summary>
            <param name="pickID">UUID of the pick to delete</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.UpdateClassifiedInfo(OpenMetaverse.UUID,OpenMetaverse.DirectoryManager.ClassifiedCategories,OpenMetaverse.UUID,System.Int32,OpenMetaverse.Vector3d,System.String,System.String,System.Boolean)">
            <summary>
            Create or update profile Classified
            </summary>
            <param name="classifiedID">UUID of the classified to update, or random UUID to create a new classified</param>
            <param name="category">Defines what catagory the classified is in</param>
            <param name="snapshotID">UUID of the image displayed with the classified</param>
            <param name="price">Price that the classified will cost to place for a week</param>
            <param name="position">Global position of the classified landmark</param>
            <param name="name">Name of the classified</param>
            <param name="desc">Long description of the classified</param>
            <param name="autoRenew">if true, auto renew classified after expiration</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.UpdateClassifiedInfo(OpenMetaverse.UUID,OpenMetaverse.DirectoryManager.ClassifiedCategories,OpenMetaverse.UUID,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Create or update profile Classified
            </summary>
            <param name="classifiedID">UUID of the classified to update, or random UUID to create a new classified</param>
            <param name="category">Defines what catagory the classified is in</param>
            <param name="snapshotID">UUID of the image displayed with the classified</param>
            <param name="price">Price that the classified will cost to place for a week</param>
            <param name="name">Name of the classified</param>
            <param name="desc">Long description of the classified</param>
            <param name="autoRenew">if true, auto renew classified after expiration</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.DeleteClassfied(OpenMetaverse.UUID)">
            <summary>
            Delete a classified ad
            </summary>
            <param name="classifiedID">The classified ads ID</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.GetAttachmentResources(OpenMetaverse.AgentManager.AttachmentResourcesCallback)">
            <summary>
            Fetches resource usage by agents attachmetns
            </summary>
            <param name="callback">Called when the requested information is collected</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.InstantMessageHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>
            Take an incoming ImprovedInstantMessage packet, auto-parse, and if
            OnInstantMessage is defined call that with the appropriate arguments
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ChatHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>
            Take an incoming Chat packet, auto-parse, and if OnChat is defined call
            that with the appropriate arguments.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ScriptDialogHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>
            Used for parsing llDialogs
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ScriptQuestionHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>
            Used for parsing llRequestPermissions dialogs
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ScriptControlChangeHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>
            Handles Script Control changes when Script with permissions releases or takes a control
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.LoadURLHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>
            Used for parsing llLoadURL Dialogs
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.MovementCompleteHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>
            Update client's Position, LookAt and region handle from incoming packet
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
            <remarks>This occurs when after an avatar moves into a new sim</remarks>
        </member>
        <member name="M:OpenMetaverse.AgentManager.HealthHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AgentDataUpdateHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.MoneyBalanceReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.TeleportFailedEventHandler(System.String,OpenMetaverse.Interfaces.IMessage,OpenMetaverse.Simulator)">
            <summary>
            Process TeleportFailed message sent via EventQueue, informs agent its last teleport has failed and why.
            </summary>
            <param name="messageKey">The Message Key</param>
            <param name="message">An IMessage object Deserialized from the recieved message event</param>
            <param name="simulator">The simulator originating the event message</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.TeleportFinishEventHandler(System.String,OpenMetaverse.Interfaces.IMessage,OpenMetaverse.Simulator)">
            <summary>
            Process TeleportFinish from Event Queue and pass it onto our TeleportHandler
            </summary>
            <param name="capsKey">The message system key for this event</param>
            <param name="message">IMessage object containing decoded data from OSD</param>
            <param name="simulator">The simulator originating the event message</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.TeleportHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AvatarAnimationHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.MeanCollisionAlertHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.CrossedRegionEventHandler(System.String,OpenMetaverse.Interfaces.IMessage,OpenMetaverse.Simulator)">
            <summary>
            Crossed region handler for message that comes across the EventQueue. Sent to an agent
            when the agent crosses a sim border into a new region.
            </summary>
            <param name="capsKey">The message key</param>
            <param name="message">the IMessage object containing the deserialized data sent from the simulator</param>
            <param name="simulator">The <see cref="T:OpenMetaverse.Simulator" /> which originated the packet</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.CrossedRegionHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
            <remarks>This packet is now being sent via the EventQueue</remarks>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ChatterBoxSessionEventReplyEventHandler(System.String,OpenMetaverse.Interfaces.IMessage,OpenMetaverse.Simulator)">
            <summary>
            Group Chat event handler
            </summary>
            <param name="capsKey">The capability Key</param>
            <param name="message">IMessage object containing decoded data from OSD</param>
            <param name="simulator">
            </param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ChatterBoxSessionStartReplyEventHandler(System.String,OpenMetaverse.Interfaces.IMessage,OpenMetaverse.Simulator)">
            <summary>
            Response from request to join a group chat
            </summary>
            <param name="capsKey">
            </param>
            <param name="message">IMessage object containing decoded data from OSD</param>
            <param name="simulator">
            </param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ChatterBoxSessionAgentListUpdatesEventHandler(System.String,OpenMetaverse.Interfaces.IMessage,OpenMetaverse.Simulator)">
            <summary>
            Someone joined or left group chat
            </summary>
            <param name="capsKey">
            </param>
            <param name="message">IMessage object containing decoded data from OSD</param>
            <param name="simulator">
            </param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ChatterBoxInvitationEventHandler(System.String,OpenMetaverse.Interfaces.IMessage,OpenMetaverse.Simulator)">
            <summary>
            Handle a group chat Invitation
            </summary>
            <param name="capsKey">Caps Key</param>
            <param name="message">IMessage object containing decoded data from OSD</param>
            <param name="simulator">Originating Simulator</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ModerateChatSessions(OpenMetaverse.UUID,OpenMetaverse.UUID,System.String,System.Boolean)">
            <summary>
            Moderate a chat session
            </summary>
            <param name="sessionID">the <see cref="T:OpenMetaverse.UUID" /> of the session to moderate, for group chats this will be the groups UUID</param>
            <param name="memberID">the <see cref="T:OpenMetaverse.UUID" /> of the avatar to moderate</param>
            <param name="key">Either "voice" to moderate users voice, or "text" to moderate users text session</param>
            <param name="moderate">true to moderate (silence user), false to allow avatar to speak</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AlertMessageHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.CameraConstraintHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.ScriptSensorReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AgentManager.AvatarSitResponseHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="T:OpenMetaverse.ChatEventArgs">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.ChatEventArgs.#ctor(OpenMetaverse.Simulator,System.String,OpenMetaverse.ChatAudibleLevel,OpenMetaverse.ChatType,OpenMetaverse.ChatSourceType,System.String,OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.Vector3)">
            <summary>
            Construct a new instance of the ChatEventArgs object
            </summary>
            <param name="simulator">Sim from which the message originates</param>
            <param name="message">The message sent</param>
            <param name="audible">The audible level of the message</param>
            <param name="type">The type of message sent: whisper, shout, etc</param>
            <param name="sourceType">The source type of the message sender</param>
            <param name="fromName">The name of the agent or object sending the message</param>
            <param name="sourceId">The ID of the agent or object sending the message</param>
            <param name="ownerid">The ID of the object owner, or the agent ID sending the message</param>
            <param name="position">The position of the agent or object sending the message</param>
        </member>
        <member name="P:OpenMetaverse.ChatEventArgs.Simulator">
            <summary>Get the simulator sending the message</summary>
        </member>
        <member name="P:OpenMetaverse.ChatEventArgs.Message">
            <summary>Get the message sent</summary>
        </member>
        <member name="P:OpenMetaverse.ChatEventArgs.AudibleLevel">
            <summary>Get the audible level of the message</summary>
        </member>
        <member name="P:OpenMetaverse.ChatEventArgs.Type">
            <summary>Get the type of message sent: whisper, shout, etc</summary>
        </member>
        <member name="P:OpenMetaverse.ChatEventArgs.SourceType">
            <summary>Get the source type of the message sender</summary>
        </member>
        <member name="P:OpenMetaverse.ChatEventArgs.FromName">
            <summary>Get the name of the agent or object sending the message</summary>
        </member>
        <member name="P:OpenMetaverse.ChatEventArgs.SourceID">
            <summary>Get the ID of the agent or object sending the message</summary>
        </member>
        <member name="P:OpenMetaverse.ChatEventArgs.OwnerID">
            <summary>Get the ID of the object owner, or the agent ID sending the message</summary>
        </member>
        <member name="P:OpenMetaverse.ChatEventArgs.Position">
            <summary>Get the position of the agent or object sending the message</summary>
        </member>
        <member name="T:OpenMetaverse.ScriptDialogEventArgs">
            <summary>Contains the data sent when a primitive opens a dialog with this agent</summary>
        </member>
        <member name="M:OpenMetaverse.ScriptDialogEventArgs.#ctor(System.String,System.String,OpenMetaverse.UUID,OpenMetaverse.UUID,System.String,System.String,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            Construct a new instance of the ScriptDialogEventArgs
            </summary>
            <param name="message">The dialog message</param>
            <param name="objectName">The name of the object that sent the dialog request</param>
            <param name="imageID">The ID of the image to be displayed</param>
            <param name="objectID">The ID of the primitive sending the dialog</param>
            <param name="firstName">The first name of the senders owner</param>
            <param name="lastName">The last name of the senders owner</param>
            <param name="chatChannel">The communication channel the dialog was sent on</param>
            <param name="buttons">The string labels containing the options presented in this dialog</param>
        </member>
        <member name="P:OpenMetaverse.ScriptDialogEventArgs.Message">
            <summary>Get the dialog message</summary>
        </member>
        <member name="P:OpenMetaverse.ScriptDialogEventArgs.ObjectName">
            <summary>Get the name of the object that sent the dialog request</summary>
        </member>
        <member name="P:OpenMetaverse.ScriptDialogEventArgs.ImageID">
            <summary>Get the ID of the image to be displayed</summary>
        </member>
        <member name="P:OpenMetaverse.ScriptDialogEventArgs.ObjectID">
            <summary>Get the ID of the primitive sending the dialog</summary>
        </member>
        <member name="P:OpenMetaverse.ScriptDialogEventArgs.FirstName">
            <summary>Get the first name of the senders owner</summary>
        </member>
        <member name="P:OpenMetaverse.ScriptDialogEventArgs.LastName">
            <summary>Get the last name of the senders owner</summary>
        </member>
        <member name="P:OpenMetaverse.ScriptDialogEventArgs.Channel">
            <summary>Get the communication channel the dialog was sent on, responses
            should also send responses on this same channel</summary>
        </member>
        <member name="P:OpenMetaverse.ScriptDialogEventArgs.ButtonLabels">
            <summary>Get the string labels containing the options presented in this dialog</summary>
        </member>
        <member name="T:OpenMetaverse.ScriptQuestionEventArgs">
            <summary>Contains the data sent when a primitive requests debit or other permissions
            requesting a YES or NO answer</summary>
        </member>
        <member name="M:OpenMetaverse.ScriptQuestionEventArgs.#ctor(OpenMetaverse.Simulator,OpenMetaverse.UUID,OpenMetaverse.UUID,System.String,System.String,OpenMetaverse.ScriptPermission)">
            <summary>
            Construct a new instance of the ScriptQuestionEventArgs
            </summary>
            <param name="simulator">The simulator containing the object sending the request</param>
            <param name="taskID">The ID of the script making the request</param>
            <param name="itemID">The ID of the primitive containing the script making the request</param>
            <param name="objectName">The name of the primitive making the request</param>
            <param name="objectOwner">The name of the owner of the object making the request</param>
            <param name="questions">The permissions being requested</param>
        </member>
        <member name="P:OpenMetaverse.ScriptQuestionEventArgs.Simulator">
            <summary>Get the simulator containing the object sending the request</summary>
        </member>
        <member name="P:OpenMetaverse.ScriptQuestionEventArgs.TaskID">
            <summary>Get the ID of the script making the request</summary>
        </member>
        <member name="P:OpenMetaverse.ScriptQuestionEventArgs.ItemID">
            <summary>Get the ID of the primitive containing the script making the request</summary>
        </member>
        <member name="P:OpenMetaverse.ScriptQuestionEventArgs.ObjectName">
            <summary>Get the name of the primitive making the request</summary>
        </member>
        <member name="P:OpenMetaverse.ScriptQuestionEventArgs.ObjectOwnerName">
            <summary>Get the name of the owner of the object making the request</summary>
        </member>
        <member name="P:OpenMetaverse.ScriptQuestionEventArgs.Questions">
            <summary>Get the permissions being requested</summary>
        </member>
        <member name="T:OpenMetaverse.LoadUrlEventArgs">
            <summary>Contains the data sent when a primitive sends a request
            to an agent to open the specified URL</summary>
        </member>
        <member name="M:OpenMetaverse.LoadUrlEventArgs.#ctor(System.String,OpenMetaverse.UUID,OpenMetaverse.UUID,System.Boolean,System.String,System.String)">
            <summary>
            Construct a new instance of the LoadUrlEventArgs
            </summary>
            <param name="objectName">The name of the object sending the request</param>
            <param name="objectID">The ID of the object sending the request</param>
            <param name="ownerID">The ID of the owner of the object sending the request</param>
            <param name="ownerIsGroup">True if the object is owned by a group</param>
            <param name="message">The message sent with the request</param>
            <param name="URL">The URL the object sent</param>
        </member>
        <member name="P:OpenMetaverse.LoadUrlEventArgs.ObjectName">
            <summary>Get the name of the object sending the request</summary>
        </member>
        <member name="P:OpenMetaverse.LoadUrlEventArgs.ObjectID">
            <summary>Get the ID of the object sending the request</summary>
        </member>
        <member name="P:OpenMetaverse.LoadUrlEventArgs.OwnerID">
            <summary>Get the ID of the owner of the object sending the request</summary>
        </member>
        <member name="P:OpenMetaverse.LoadUrlEventArgs.OwnerIsGroup">
            <summary>True if the object is owned by a group</summary>
        </member>
        <member name="P:OpenMetaverse.LoadUrlEventArgs.Message">
            <summary>Get the message sent with the request</summary>
        </member>
        <member name="P:OpenMetaverse.LoadUrlEventArgs.URL">
            <summary>Get the URL the object sent</summary>
        </member>
        <member name="T:OpenMetaverse.InstantMessageEventArgs">
            <summary>The date received from an ImprovedInstantMessage</summary>
        </member>
        <member name="M:OpenMetaverse.InstantMessageEventArgs.#ctor(OpenMetaverse.InstantMessage,OpenMetaverse.Simulator)">
            <summary>
            Construct a new instance of the InstantMessageEventArgs object
            </summary>
            <param name="im">the InstantMessage object</param>
            <param name="simulator">the simulator where the InstantMessage origniated</param>
        </member>
        <member name="P:OpenMetaverse.InstantMessageEventArgs.IM">
            <summary>Get the InstantMessage object</summary>
        </member>
        <member name="P:OpenMetaverse.InstantMessageEventArgs.Simulator">
            <summary>Get the simulator where the InstantMessage origniated</summary>
        </member>
        <member name="T:OpenMetaverse.BalanceEventArgs">
            <summary>Contains the currency balance</summary>
        </member>
        <member name="M:OpenMetaverse.BalanceEventArgs.#ctor(System.Int32)">
            <summary>
            Construct a new BalanceEventArgs object
            </summary>
            <param name="balance">The currenct balance</param>
        </member>
        <member name="P:OpenMetaverse.BalanceEventArgs.Balance">
            <summary>
            Get the currenct balance
            </summary>
        </member>
        <member name="T:OpenMetaverse.MoneyBalanceReplyEventArgs">
            <summary>Contains the transaction summary when an item is purchased,
            money is given, or land is purchased</summary>
        </member>
        <member name="M:OpenMetaverse.MoneyBalanceReplyEventArgs.#ctor(OpenMetaverse.UUID,System.Boolean,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Construct a new instance of the MoneyBalanceReplyEventArgs object
            </summary>
            <param name="transactionID">The ID of the transaction</param>
            <param name="transactionSuccess">True of the transaction was successful</param>
            <param name="balance">The current currency balance</param>
            <param name="metersCredit">The meters credited</param>
            <param name="metersCommitted">The meters comitted</param>
            <param name="description">A brief description of the transaction</param>
        </member>
        <member name="P:OpenMetaverse.MoneyBalanceReplyEventArgs.TransactionID">
            <summary>Get the ID of the transaction</summary>
        </member>
        <member name="P:OpenMetaverse.MoneyBalanceReplyEventArgs.Success">
            <summary>True of the transaction was successful</summary>
        </member>
        <member name="P:OpenMetaverse.MoneyBalanceReplyEventArgs.Balance">
            <summary>Get the remaining currency balance</summary>
        </member>
        <member name="P:OpenMetaverse.MoneyBalanceReplyEventArgs.MetersCredit">
            <summary>Get the meters credited</summary>
        </member>
        <member name="P:OpenMetaverse.MoneyBalanceReplyEventArgs.MetersCommitted">
            <summary>Get the meters comitted</summary>
        </member>
        <member name="P:OpenMetaverse.MoneyBalanceReplyEventArgs.Description">
            <summary>Get the description of the transaction</summary>
        </member>
        <member name="T:OpenMetaverse.AgentDataReplyEventArgs">
            <summary>Data sent from the simulator containing information about your agent and active group information</summary>
        </member>
        <member name="M:OpenMetaverse.AgentDataReplyEventArgs.#ctor(System.String,System.String,OpenMetaverse.UUID,System.String,OpenMetaverse.GroupPowers,System.String)">
            <summary>
            Construct a new instance of the AgentDataReplyEventArgs object
            </summary>
            <param name="firstName">The agents first name</param>
            <param name="lastName">The agents last name</param>
            <param name="activeGroupID">The agents active group ID</param>
            <param name="groupTitle">The group title of the agents active group</param>
            <param name="groupPowers">The combined group powers the agent has in the active group</param>
            <param name="groupName">The name of the group the agent has currently active</param>
        </member>
        <member name="P:OpenMetaverse.AgentDataReplyEventArgs.FirstName">
            <summary>Get the agents first name</summary>
        </member>
        <member name="P:OpenMetaverse.AgentDataReplyEventArgs.LastName">
            <summary>Get the agents last name</summary>
        </member>
        <member name="P:OpenMetaverse.AgentDataReplyEventArgs.ActiveGroupID">
            <summary>Get the active group ID of your agent</summary>
        </member>
        <member name="P:OpenMetaverse.AgentDataReplyEventArgs.GroupTitle">
            <summary>Get the active groups title of your agent</summary>
        </member>
        <member name="P:OpenMetaverse.AgentDataReplyEventArgs.GroupPowers">
            <summary>Get the combined group powers of your agent</summary>
        </member>
        <member name="P:OpenMetaverse.AgentDataReplyEventArgs.GroupName">
            <summary>Get the active group name of your agent</summary>
        </member>
        <member name="T:OpenMetaverse.AnimationsChangedEventArgs">
            <summary>Data sent by the simulator to indicate the active/changed animations
            applied to your agent</summary>
        </member>
        <member name="M:OpenMetaverse.AnimationsChangedEventArgs.#ctor(OpenMetaverse.InternalDictionary{OpenMetaverse.UUID,System.Int32})">
            <summary>
            Construct a new instance of the AnimationsChangedEventArgs class
            </summary>
            <param name="agentAnimations">The dictionary that contains the changed animations</param>
        </member>
        <member name="P:OpenMetaverse.AnimationsChangedEventArgs.Animations">
            <summary>Get the dictionary that contains the changed animations</summary>
        </member>
        <member name="T:OpenMetaverse.MeanCollisionEventArgs">
            <summary>
            Data sent from a simulator indicating a collision with your agent
            </summary>
        </member>
        <member name="M:OpenMetaverse.MeanCollisionEventArgs.#ctor(OpenMetaverse.MeanCollisionType,OpenMetaverse.UUID,OpenMetaverse.UUID,System.Single,System.DateTime)">
            <summary>
            Construct a new instance of the MeanCollisionEventArgs class
            </summary>
            <param name="type">The type of collision that occurred</param>
            <param name="perp">The ID of the agent or object that perpetrated the agression</param>
            <param name="victim">The ID of the Victim</param>
            <param name="magnitude">The strength of the collision</param>
            <param name="time">The Time the collision occurred</param>
        </member>
        <member name="P:OpenMetaverse.MeanCollisionEventArgs.Type">
            <summary>Get the Type of collision</summary>
        </member>
        <member name="P:OpenMetaverse.MeanCollisionEventArgs.Aggressor">
            <summary>Get the ID of the agent or object that collided with your agent</summary>
        </member>
        <member name="P:OpenMetaverse.MeanCollisionEventArgs.Victim">
            <summary>Get the ID of the agent that was attacked</summary>
        </member>
        <member name="P:OpenMetaverse.MeanCollisionEventArgs.Magnitude">
            <summary>A value indicating the strength of the collision</summary>
        </member>
        <member name="P:OpenMetaverse.MeanCollisionEventArgs.Time">
            <summary>Get the time the collision occurred</summary>
        </member>
        <member name="T:OpenMetaverse.RegionCrossedEventArgs">
            <summary>Data sent to your agent when it crosses region boundaries</summary>
        </member>
        <member name="M:OpenMetaverse.RegionCrossedEventArgs.#ctor(OpenMetaverse.Simulator,OpenMetaverse.Simulator)">
            <summary>
            Construct a new instance of the RegionCrossedEventArgs class
            </summary>
            <param name="oldSim">The simulator your agent just left</param>
            <param name="newSim">The simulator your agent is now in</param>
        </member>
        <member name="P:OpenMetaverse.RegionCrossedEventArgs.OldSimulator">
            <summary>Get the simulator your agent just left</summary>
        </member>
        <member name="P:OpenMetaverse.RegionCrossedEventArgs.NewSimulator">
            <summary>Get the simulator your agent is now in</summary>
        </member>
        <member name="T:OpenMetaverse.GroupChatJoinedEventArgs">
            <summary>Data sent from the simulator when your agent joins a group chat session</summary>
        </member>
        <member name="M:OpenMetaverse.GroupChatJoinedEventArgs.#ctor(OpenMetaverse.UUID,System.String,OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Construct a new instance of the GroupChatJoinedEventArgs class
            </summary>
            <param name="groupChatSessionID">The ID of the session</param>
            <param name="sessionName">The name of the session</param>
            <param name="tmpSessionID">A temporary session id used for establishing new sessions</param>
            <param name="success">True of your agent successfully joined the session</param>
        </member>
        <member name="P:OpenMetaverse.GroupChatJoinedEventArgs.SessionID">
            <summary>Get the ID of the group chat session</summary>
        </member>
        <member name="P:OpenMetaverse.GroupChatJoinedEventArgs.SessionName">
            <summary>Get the name of the session</summary>
        </member>
        <member name="P:OpenMetaverse.GroupChatJoinedEventArgs.TmpSessionID">
            <summary>Get the temporary session ID used for establishing new sessions</summary>
        </member>
        <member name="P:OpenMetaverse.GroupChatJoinedEventArgs.Success">
            <summary>True if your agent successfully joined the session</summary>
        </member>
        <member name="T:OpenMetaverse.GroupChatLeftEventArgs">
            <summary>The session information when your agent exits a group chat session</summary>
        </member>
        <member name="M:OpenMetaverse.GroupChatLeftEventArgs.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct a new instance of the GroupChatLeftEventArgs class
            </summary>
            <param name="chatSessionID">The ID of the session your agent left</param>
        </member>
        <member name="P:OpenMetaverse.GroupChatLeftEventArgs.SessionID">
            <summary>Get the ID of the session your agent left</summary>
        </member>
        <member name="T:OpenMetaverse.AlertMessageEventArgs">
            <summary>Data sent by the simulator containing urgent messages</summary>
        </member>
        <member name="M:OpenMetaverse.AlertMessageEventArgs.#ctor(System.String)">
            <summary>
            Construct a new instance of the AlertMessageEventArgs class
            </summary>
            <param name="message">The alert message</param>
        </member>
        <member name="P:OpenMetaverse.AlertMessageEventArgs.Message">
            <summary>Get the alert message</summary>
        </member>
        <member name="T:OpenMetaverse.ScriptControlEventArgs">
            <summary>Data sent by a script requesting to take or release specified controls to your agent</summary>
        </member>
        <member name="M:OpenMetaverse.ScriptControlEventArgs.#ctor(OpenMetaverse.ScriptControlChange,System.Boolean,System.Boolean)">
            <summary>
            Construct a new instance of the ScriptControlEventArgs class
            </summary>
            <param name="controls">The controls the script is attempting to take or release to the agent</param>
            <param name="pass">True if the script is passing controls back to the agent</param>
            <param name="take">True if the script is requesting controls be released to the script</param>
        </member>
        <member name="P:OpenMetaverse.ScriptControlEventArgs.Controls">
            <summary>Get the controls the script is attempting to take or release to the agent</summary>
        </member>
        <member name="P:OpenMetaverse.ScriptControlEventArgs.Pass">
            <summary>True if the script is passing controls back to the agent</summary>
        </member>
        <member name="P:OpenMetaverse.ScriptControlEventArgs.Take">
            <summary>True if the script is requesting controls be released to the script</summary>
        </member>
        <member name="T:OpenMetaverse.CameraConstraintEventArgs">
            <summary>
            Data sent from the simulator to an agent to indicate its view limits
            </summary>
        </member>
        <member name="M:OpenMetaverse.CameraConstraintEventArgs.#ctor(OpenMetaverse.Vector4)">
            <summary>
            Construct a new instance of the CameraConstraintEventArgs class
            </summary>
            <param name="collidePlane">The collision plane</param>
        </member>
        <member name="P:OpenMetaverse.CameraConstraintEventArgs.CollidePlane">
            <summary>Get the collision plane</summary>
        </member>
        <member name="T:OpenMetaverse.ScriptSensorReplyEventArgs">
            <summary>
            Data containing script sensor requests which allow an agent to know the specific details
            of a primitive sending script sensor requests
            </summary>
        </member>
        <member name="M:OpenMetaverse.ScriptSensorReplyEventArgs.#ctor(OpenMetaverse.UUID,OpenMetaverse.UUID,System.String,OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.Vector3,System.Single,OpenMetaverse.Quaternion,OpenMetaverse.ScriptSensorTypeFlags,OpenMetaverse.Vector3)">
            <summary>
            Construct a new instance of the ScriptSensorReplyEventArgs
            </summary>
            <param name="requestorID">The ID of the primitive sending the sensor</param>
            <param name="groupID">The ID of the group associated with the primitive</param>
            <param name="name">The name of the primitive sending the sensor</param>
            <param name="objectID">The ID of the primitive sending the sensor</param>
            <param name="ownerID">The ID of the owner of the primitive sending the sensor</param>
            <param name="position">The position of the primitive sending the sensor</param>
            <param name="range">The range the primitive specified to scan</param>
            <param name="rotation">The rotation of the primitive sending the sensor</param>
            <param name="type">The type of sensor the primitive sent</param>
            <param name="velocity">The velocity of the primitive sending the sensor</param>
        </member>
        <member name="P:OpenMetaverse.ScriptSensorReplyEventArgs.RequestorID">
            <summary>Get the ID of the primitive sending the sensor</summary>
        </member>
        <member name="P:OpenMetaverse.ScriptSensorReplyEventArgs.GroupID">
            <summary>Get the ID of the group associated with the primitive</summary>
        </member>
        <member name="P:OpenMetaverse.ScriptSensorReplyEventArgs.Name">
            <summary>Get the name of the primitive sending the sensor</summary>
        </member>
        <member name="P:OpenMetaverse.ScriptSensorReplyEventArgs.ObjectID">
            <summary>Get the ID of the primitive sending the sensor</summary>
        </member>
        <member name="P:OpenMetaverse.ScriptSensorReplyEventArgs.OwnerID">
            <summary>Get the ID of the owner of the primitive sending the sensor</summary>
        </member>
        <member name="P:OpenMetaverse.ScriptSensorReplyEventArgs.Position">
            <summary>Get the position of the primitive sending the sensor</summary>
        </member>
        <member name="P:OpenMetaverse.ScriptSensorReplyEventArgs.Range">
            <summary>Get the range the primitive specified to scan</summary>
        </member>
        <member name="P:OpenMetaverse.ScriptSensorReplyEventArgs.Rotation">
            <summary>Get the rotation of the primitive sending the sensor</summary>
        </member>
        <member name="P:OpenMetaverse.ScriptSensorReplyEventArgs.Type">
            <summary>Get the type of sensor the primitive sent</summary>
        </member>
        <member name="P:OpenMetaverse.ScriptSensorReplyEventArgs.Velocity">
            <summary>Get the velocity of the primitive sending the sensor</summary>
        </member>
        <member name="T:OpenMetaverse.AvatarSitResponseEventArgs">
            <summary>Contains the response data returned from the simulator in response to a <see cref="!:RequestSit" /></summary>
        </member>
        <member name="M:OpenMetaverse.AvatarSitResponseEventArgs.#ctor(OpenMetaverse.UUID,System.Boolean,OpenMetaverse.Vector3,OpenMetaverse.Vector3,System.Boolean,OpenMetaverse.Vector3,OpenMetaverse.Quaternion)">
            <summary>Construct a new instance of the AvatarSitResponseEventArgs object</summary>
        </member>
        <member name="P:OpenMetaverse.AvatarSitResponseEventArgs.ObjectID">
            <summary>Get the ID of the primitive the agent will be sitting on</summary>
        </member>
        <member name="P:OpenMetaverse.AvatarSitResponseEventArgs.Autopilot">
            <summary>True if the simulator Autopilot functions were involved</summary>
        </member>
        <member name="P:OpenMetaverse.AvatarSitResponseEventArgs.CameraAtOffset">
            <summary>Get the camera offset of the agent when seated</summary>
        </member>
        <member name="P:OpenMetaverse.AvatarSitResponseEventArgs.CameraEyeOffset">
            <summary>Get the camera eye offset of the agent when seated</summary>
        </member>
        <member name="P:OpenMetaverse.AvatarSitResponseEventArgs.ForceMouselook">
            <summary>True of the agent will be in mouselook mode when seated</summary>
        </member>
        <member name="P:OpenMetaverse.AvatarSitResponseEventArgs.SitPosition">
            <summary>Get the position of the agent when seated</summary>
        </member>
        <member name="P:OpenMetaverse.AvatarSitResponseEventArgs.SitRotation">
            <summary>Get the rotation of the agent when seated</summary>
        </member>
        <member name="T:OpenMetaverse.ChatSessionMemberAddedEventArgs">
            <summary>Data sent when an agent joins a chat session your agent is currently participating in</summary>
        </member>
        <member name="M:OpenMetaverse.ChatSessionMemberAddedEventArgs.#ctor(OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>
            Construct a new instance of the ChatSessionMemberAddedEventArgs object
            </summary>
            <param name="sessionID">The ID of the chat session</param>
            <param name="agentID">The ID of the agent joining</param>
        </member>
        <member name="P:OpenMetaverse.ChatSessionMemberAddedEventArgs.SessionID">
            <summary>Get the ID of the chat session</summary>
        </member>
        <member name="P:OpenMetaverse.ChatSessionMemberAddedEventArgs.AgentID">
            <summary>Get the ID of the agent that joined</summary>
        </member>
        <member name="T:OpenMetaverse.ChatSessionMemberLeftEventArgs">
            <summary>Data sent when an agent exits a chat session your agent is currently participating in</summary>
        </member>
        <member name="M:OpenMetaverse.ChatSessionMemberLeftEventArgs.#ctor(OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>
            Construct a new instance of the ChatSessionMemberLeftEventArgs object
            </summary>
            <param name="sessionID">The ID of the chat session</param>
            <param name="agentID">The ID of the Agent that left</param>
        </member>
        <member name="P:OpenMetaverse.ChatSessionMemberLeftEventArgs.SessionID">
            <summary>Get the ID of the chat session</summary>
        </member>
        <member name="P:OpenMetaverse.ChatSessionMemberLeftEventArgs.AgentID">
            <summary>Get the ID of the agent that left</summary>
        </member>
        <member name="T:OpenMetaverse.AgentThrottle">
            <summary>
            Throttles the network traffic for various different traffic types.
            Access this class through GridClient.Throttle
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentThrottle.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Default constructor, uses a default high total of 1500 KBps (1536000)
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentThrottle.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor that decodes an existing AgentThrottle packet in to
            individual values
            </summary>
            <param name="data">Reference to the throttle data in an AgentThrottle
            packet</param>
            <param name="pos">Offset position to start reading at in the
            throttle data</param>
            <remarks>This is generally not needed in clients as the server will
            never send a throttle packet to the client</remarks>
        </member>
        <member name="P:OpenMetaverse.AgentThrottle.Resend">
            <summary>Maximum bits per second for resending unacknowledged packets</summary>
        </member>
        <member name="P:OpenMetaverse.AgentThrottle.Land">
            <summary>Maximum bits per second for LayerData terrain</summary>
        </member>
        <member name="P:OpenMetaverse.AgentThrottle.Wind">
            <summary>Maximum bits per second for LayerData wind data</summary>
        </member>
        <member name="P:OpenMetaverse.AgentThrottle.Cloud">
            <summary>Maximum bits per second for LayerData clouds</summary>
        </member>
        <member name="P:OpenMetaverse.AgentThrottle.Task">
            <summary>Unknown, includes object data</summary>
        </member>
        <member name="P:OpenMetaverse.AgentThrottle.Texture">
            <summary>Maximum bits per second for textures</summary>
        </member>
        <member name="P:OpenMetaverse.AgentThrottle.Asset">
            <summary>Maximum bits per second for downloaded assets</summary>
        </member>
        <member name="P:OpenMetaverse.AgentThrottle.Total">
            <summary>Maximum bits per second the entire connection, divided up
            between invidiual streams using default multipliers</summary>
        </member>
        <member name="M:OpenMetaverse.AgentThrottle.Set">
            <summary>
            Send an AgentThrottle packet to the current server using the
            current values
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentThrottle.Set(OpenMetaverse.Simulator)">
            <summary>
            Send an AgentThrottle packet to the specified server using the
            current values
            </summary>
        </member>
        <member name="M:OpenMetaverse.AgentThrottle.ToBytes">
            <summary>
            Convert the current throttle values to a byte array that can be put
            in an AgentThrottle packet
            </summary>
            <returns>Byte array containing all the throttle values</returns>
        </member>
        <member name="T:OpenMetaverse.Animations">
            <summary>
            Static pre-defined animations available to all agents
            </summary>
        </member>
        <member name="F:OpenMetaverse.Animations.AFRAID">
            <summary>Agent with afraid expression on face</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.AIM_BAZOOKA_R">
            <summary>Agent aiming a bazooka (right handed)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.AIM_BOW_L">
            <summary>Agent aiming a bow (left handed)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.AIM_HANDGUN_R">
            <summary>Agent aiming a hand gun (right handed)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.AIM_RIFLE_R">
            <summary>Agent aiming a rifle (right handed)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.ANGRY">
            <summary>Agent with angry expression on face</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.AWAY">
            <summary>Agent hunched over (away)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.BACKFLIP">
            <summary>Agent doing a backflip</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.BELLY_LAUGH">
            <summary>Agent laughing while holding belly</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.BLOW_KISS">
            <summary>Agent blowing a kiss</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.BORED">
            <summary>Agent with bored expression on face</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.BOW">
            <summary>Agent bowing to audience</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.BRUSH">
            <summary>Agent brushing himself/herself off</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.BUSY">
            <summary>Agent in busy mode</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.CLAP">
            <summary>Agent clapping hands</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.COURTBOW">
            <summary>Agent doing a curtsey bow</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.CROUCH">
            <summary>Agent crouching</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.CROUCHWALK">
            <summary>Agent crouching while walking</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.CRY">
            <summary>Agent crying</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.CUSTOMIZE">
            <summary>Agent unanimated with arms out (e.g. setting appearance)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.CUSTOMIZE_DONE">
            <summary>Agent re-animated after set appearance finished</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.DANCE1">
            <summary>Agent dancing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.DANCE2">
            <summary>Agent dancing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.DANCE3">
            <summary>Agent dancing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.DANCE4">
            <summary>Agent dancing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.DANCE5">
            <summary>Agent dancing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.DANCE6">
            <summary>Agent dancing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.DANCE7">
            <summary>Agent dancing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.DANCE8">
            <summary>Agent dancing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.DEAD">
            <summary>Agent on ground unanimated</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.DRINK">
            <summary>Agent boozing it up</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EMBARRASSED">
            <summary>Agent with embarassed expression on face</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_AFRAID">
            <summary>Agent with afraid expression on face</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_ANGER">
            <summary>Agent with angry expression on face</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_BORED">
            <summary>Agent with bored expression on face</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_CRY">
            <summary>Agent crying</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_DISDAIN">
            <summary>Agent showing disdain (dislike) for something</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_EMBARRASSED">
            <summary>Agent with embarassed expression on face</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_FROWN">
            <summary>Agent with frowning expression on face</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_KISS">
            <summary>Agent with kissy face</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_LAUGH">
            <summary>Agent expressing laughgter</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_OPEN_MOUTH">
            <summary>Agent with open mouth</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_REPULSED">
            <summary>Agent with repulsed expression on face</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_SAD">
            <summary>Agent expressing sadness</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_SHRUG">
            <summary>Agent shrugging shoulders</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_SMILE">
            <summary>Agent with a smile</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_SURPRISE">
            <summary>Agent expressing surprise</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_TONGUE_OUT">
            <summary>Agent sticking tongue out</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_TOOTHSMILE">
            <summary>Agent with big toothy smile</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_WINK">
            <summary>Agent winking</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.EXPRESS_WORRY">
            <summary>Agent expressing worry</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.FALLDOWN">
            <summary>Agent falling down</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.FEMALE_WALK">
            <summary>Agent walking (feminine version)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.FINGER_WAG">
            <summary>Agent wagging finger (disapproval)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.FIST_PUMP">
            <summary>I'm not sure I want to know</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.FLY">
            <summary>Agent in superman position</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.FLYSLOW">
            <summary>Agent in superman position</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.HELLO">
            <summary>Agent greeting another</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.HOLD_BAZOOKA_R">
            <summary>Agent holding bazooka (right handed)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.HOLD_BOW_L">
            <summary>Agent holding a bow (left handed)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.HOLD_HANDGUN_R">
            <summary>Agent holding a handgun (right handed)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.HOLD_RIFLE_R">
            <summary>Agent holding a rifle (right handed)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.HOLD_THROW_R">
            <summary>Agent throwing an object (right handed)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.HOVER">
            <summary>Agent in static hover</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.HOVER_DOWN">
            <summary>Agent hovering downward</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.HOVER_UP">
            <summary>Agent hovering upward</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.IMPATIENT">
            <summary>Agent being impatient</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.JUMP">
            <summary>Agent jumping</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.JUMP_FOR_JOY">
            <summary>Agent jumping with fervor</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.KISS_MY_BUTT">
            <summary>Agent point to lips then rear end</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.LAND">
            <summary>Agent landing from jump, finished flight, etc</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.LAUGH_SHORT">
            <summary>Agent laughing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.MEDIUM_LAND">
            <summary>Agent landing from jump, finished flight, etc</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.MOTORCYCLE_SIT">
            <summary>Agent sitting on a motorcycle</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.MUSCLE_BEACH">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Animations.NO">
            <summary>Agent moving head side to side</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.NO_UNHAPPY">
            <summary>Agent moving head side to side with unhappy expression</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.NYAH_NYAH">
            <summary>Agent taunting another</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.ONETWO_PUNCH">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Animations.PEACE">
            <summary>Agent giving peace sign</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.POINT_ME">
            <summary>Agent pointing at self</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.POINT_YOU">
            <summary>Agent pointing at another</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.PRE_JUMP">
            <summary>Agent preparing for jump (bending knees)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.PUNCH_LEFT">
            <summary>Agent punching with left hand</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.PUNCH_RIGHT">
            <summary>Agent punching with right hand</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.REPULSED">
            <summary>Agent acting repulsed</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.ROUNDHOUSE_KICK">
            <summary>Agent trying to be Chuck Norris</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.RPS_COUNTDOWN">
            <summary>Rocks, Paper, Scissors 1, 2, 3</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.RPS_PAPER">
            <summary>Agent with hand flat over other hand</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.RPS_ROCK">
            <summary>Agent with fist over other hand</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.RPS_SCISSORS">
            <summary>Agent with two fingers spread over other hand</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.RUN">
            <summary>Agent running</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SAD">
            <summary>Agent appearing sad</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SALUTE">
            <summary>Agent saluting</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SHOOT_BOW_L">
            <summary>Agent shooting bow (left handed)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SHOUT">
            <summary>Agent cupping mouth as if shouting</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SHRUG">
            <summary>Agent shrugging shoulders</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SIT">
            <summary>Agent in sit position</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SIT_FEMALE">
            <summary>Agent in sit position (feminine)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SIT_GENERIC">
            <summary>Agent in sit position (generic)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SIT_GROUND">
            <summary>Agent sitting on ground</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SIT_GROUND_staticRAINED">
            <summary>Agent sitting on ground</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SIT_TO_STAND">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SLEEP">
            <summary>Agent sleeping on side</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SMOKE_IDLE">
            <summary>Agent smoking</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SMOKE_INHALE">
            <summary>Agent inhaling smoke</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SMOKE_THROW_DOWN">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SNAPSHOT">
            <summary>Agent taking a picture</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.STAND">
            <summary>Agent standing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.STANDUP">
            <summary>Agent standing up</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.STAND_1">
            <summary>Agent standing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.STAND_2">
            <summary>Agent standing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.STAND_3">
            <summary>Agent standing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.STAND_4">
            <summary>Agent standing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.STRETCH">
            <summary>Agent stretching</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.STRIDE">
            <summary>Agent in stride (fast walk)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SURF">
            <summary>Agent surfing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SURPRISE">
            <summary>Agent acting surprised</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.SWORD_STRIKE">
            <summary>Agent striking with a sword</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.TALK">
            <summary>Agent talking (lips moving)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.TANTRUM">
            <summary>Agent throwing a tantrum</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.THROW_R">
            <summary>Agent throwing an object (right handed)</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.TRYON_SHIRT">
            <summary>Agent trying on a shirt</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.TURNLEFT">
            <summary>Agent turning to the left</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.TURNRIGHT">
            <summary>Agent turning to the right</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.TYPE">
            <summary>Agent typing</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.WALK">
            <summary>Agent walking</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.WHISPER">
            <summary>Agent whispering</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.WHISTLE">
            <summary>Agent whispering with fingers in mouth</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.WINK">
            <summary>Agent winking</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.WINK_HOLLYWOOD">
            <summary>Agent winking</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.WORRY">
            <summary>Agent worried</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.YES">
            <summary>Agent nodding yes</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.YES_HAPPY">
            <summary>Agent nodding yes with happy face</summary>
        </member>
        <member name="F:OpenMetaverse.Animations.YOGA_FLOAT">
            <summary>Agent floating with legs and arms crossed</summary>
        </member>
        <member name="M:OpenMetaverse.Animations.ToDictionary">
            <summary>
            A dictionary containing all pre-defined animations
            </summary>
            <returns>A dictionary containing the pre-defined animations,
            where the key is the animations ID, and the value is a string
            containing a name to identify the purpose of the animation</returns>
        </member>
        <member name="T:OpenMetaverse.AvatarTextureIndex">
            <summary>
            Index of TextureEntry slots for avatar appearances
            </summary>
        </member>
        <member name="T:OpenMetaverse.BakeType">
            <summary>
            Bake layers for avatar appearance
            </summary>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Default constructor
            </summary>
            <param name="client">A reference to our agent</param>
        </member>
        <member name="T:OpenMetaverse.AppearanceManager.WearableData">
            <summary>
            Contains information about a wearable inventory item
            </summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.WearableData.ItemID">
            <summary>Inventory ItemID of the wearable</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.WearableData.AssetID">
            <summary>AssetID of the wearable asset</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.WearableData.WearableType">
            <summary>WearableType of the wearable</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.WearableData.AssetType">
            <summary>AssetType of the wearable</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.WearableData.Asset">
            <summary>Asset data for the wearable</summary>
        </member>
        <member name="T:OpenMetaverse.AppearanceManager.ColorParamInfo">
            <summary>
            Data collected from visual params for each wearable
            needed for the calculation of the color
            </summary>
        </member>
        <member name="T:OpenMetaverse.AppearanceManager.TextureData">
            <summary>
            Holds a texture assetID and the data needed to bake this layer into
            an outfit texture. Used to keep track of currently worn textures
            and baking data
            </summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.TextureData.TextureID">
            <summary>A texture AssetID</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.TextureData.Texture">
            <summary>Asset data for the texture</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.TextureData.AlphaMasks">
            <summary>Collection of alpha masks that needs applying</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.TextureData.Color">
            <summary>Tint that should be applied to the texture</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.MAX_CONCURRENT_DOWNLOADS">
            <summary>Maximum number of concurrent downloads for wearable assets and textures</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.MAX_CONCURRENT_UPLOADS">
            <summary>Maximum number of concurrent uploads for baked textures</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.INVENTORY_TIMEOUT">
            <summary>Timeout for fetching inventory listings</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.WEARABLE_TIMEOUT">
            <summary>Timeout for fetching a single wearable, or receiving a single packet response</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.TEXTURE_TIMEOUT">
            <summary>Timeout for fetching a single texture</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.UPLOAD_TIMEOUT">
            <summary>Timeout for uploading a single baked texture</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.UPLOAD_RETRIES">
            <summary>Number of times to retry bake upload</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.REBAKE_DELAY">
            <summary>When changing outfit, kick off rebake after
            20 seconds has passed since the last change</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.WEARABLE_COUNT">
            <summary>Total number of wearables for each avatar</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.BAKED_TEXTURE_COUNT">
            <summary>Total number of baked textures on each avatar</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.WEARABLES_PER_LAYER">
            <summary>Total number of wearables per bake layer</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.AVATAR_TEXTURE_COUNT">
            <summary>Total number of textures on an avatar, baked or not</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.BakeIndexToTextureIndex">
            <summary>Mapping between BakeType and AvatarTextureIndex</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.WEARABLE_BAKE_MAP">
            <summary>Map of what wearables are included in each bake</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.BAKED_TEXTURE_HASH">
            <summary>Magic values to finalize the cache check hashes for each
            bake</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.DEFAULT_AVATAR_TEXTURE">
            <summary>Default avatar texture, used to detect when a custom
            texture is not set for a face</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.m_AgentWearablesReply">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.m_AgentWearablesLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.m_AgentCachedBakesReply">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.m_AgentCachedBakesLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.m_AppearanceSet">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.m_AppearanceSetLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.m_RebakeAvatarReply">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.m_RebakeAvatarLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.Wearables">
            <summary>A cache of wearables currently being worn</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.Textures">
            <summary>A cache of textures currently being worn</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.CacheCheckSerialNum">
            <summary>Incrementing serial number for AgentCachedTexture packets</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.SetAppearanceSerialNum">
            <summary>Incrementing serial number for AgentSetAppearance packets</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.AppearanceThreadRunning">
            <summary>Indicates whether or not the appearance thread is currently
            running, to prevent multiple appearance threads from running
            simultaneously</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.Client">
            <summary>Reference to our agent</summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.RebakeScheduleTimer">
            <summary>
            Timer used for delaying rebake on changing outfit
            </summary>
        </member>
        <member name="F:OpenMetaverse.AppearanceManager.AppearanceThread">
            <summary>
            Main appearance thread
            </summary>
        </member>
        <member name="E:OpenMetaverse.AppearanceManager.AgentWearablesReply">
            <summary>Triggered when an AgentWearablesUpdate packet is received,
            telling us what our avatar is currently wearing
            <see cref="M:OpenMetaverse.AppearanceManager.RequestAgentWearables" /> request.</summary>
        </member>
        <member name="E:OpenMetaverse.AppearanceManager.CachedBakesReply">
            <summary>Raised when an AgentCachedTextureResponse packet is
            received, giving a list of cached bakes that were found on the
            simulator
            <seealso cref="M:OpenMetaverse.AppearanceManager.RequestCachedBakes" /> request.</summary>
        </member>
        <member name="E:OpenMetaverse.AppearanceManager.AppearanceSet">
            <summary>
            Raised when appearance data is sent to the simulator, also indicates
            the main appearance thread is finished.
            </summary>
            <seealso cref="M:OpenMetaverse.AppearanceManager.RequestAgentSetAppearance" /> request.</member>
        <member name="E:OpenMetaverse.AppearanceManager.RebakeAvatarRequested">
            <summary>
            Triggered when the simulator requests the agent rebake its appearance.
            </summary>
            <seealso cref="!:RebakeAvatarRequest" />
        </member>
        <member name="P:OpenMetaverse.AppearanceManager.ManagerBusy">
            <summary>
            Returns true if AppearanceManager is busy and trying to set or change appearance will fail
            </summary>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.OnAgentWearables(OpenMetaverse.AgentWearablesReplyEventArgs)">
            <summary>Raises the AgentWearablesReply event</summary>
            <param name="e">An AgentWearablesReplyEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.OnAgentCachedBakes(OpenMetaverse.AgentCachedBakesReplyEventArgs)">
            <summary>Raises the CachedBakesReply event</summary>
            <param name="e">An AgentCachedBakesReplyEventArgs object containing the
            data returned from the data server AgentCachedTextureResponse</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.OnAppearanceSet(OpenMetaverse.AppearanceSetEventArgs)">
            <summary>Raises the AppearanceSet event</summary>
            <param name="e">An AppearanceSetEventArgs object indicating if the operatin was successfull</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.OnRebakeAvatar(OpenMetaverse.RebakeAvatarTexturesEventArgs)">
            <summary>Raises the RebakeAvatarRequested event</summary>
            <param name="e">An RebakeAvatarTexturesEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.SetPreviousAppearance">
            <summary>
            Obsolete method for setting appearance. This function no longer does anything.
            Use RequestSetAppearance() to manually start the appearance thread
            </summary>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.SetPreviousAppearance(System.Boolean)">
            <summary>
            Obsolete method for setting appearance. This function no longer does anything.
            Use RequestSetAppearance() to manually start the appearance thread
            </summary>
            <param name="allowBake">Unused parameter</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.RequestSetAppearance">
            <summary>
            Starts the appearance setting thread
            </summary>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.RequestSetAppearance(System.Boolean)">
            <summary>
            Starts the appearance setting thread
            </summary>
            <param name="forceRebake">True to force rebaking, otherwise false</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.RequestAgentWearables">
            <summary>
            Ask the server what textures our agent is currently wearing
            </summary>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.RequestCachedBakes">
            <summary>
            Build hashes out of the texture assetIDs for each baking layer to
            ask the simulator whether it has cached copies of each baked texture
            </summary>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.GetWearableAsset(OpenMetaverse.WearableType)">
            <summary>
            Returns the AssetID of the asset that is currently being worn in a
            given WearableType slot
            </summary>
            <param name="type">WearableType slot to get the AssetID for</param>
            <returns>The UUID of the asset being worn in the given slot, or
            UUID.Zero if no wearable is attached to the given slot or wearables
            have not been downloaded yet</returns>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.AddToOutfit(OpenMetaverse.InventoryItem)">
            <summary>
            Add a wearable to the current outfit and set appearance
            </summary>
            <param name="wearableItem">Wearable to be added to the outfit</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.AddToOutfit(System.Collections.Generic.List{OpenMetaverse.InventoryItem})">
            <summary>
            Add a list of wearables to the current outfit and set appearance
            </summary>
            <param name="wearableItems">List of wearable inventory items to
            be added to the outfit</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.RemoveFromOutfit(OpenMetaverse.InventoryItem)">
            <summary>
            Remove a wearable from the current outfit and set appearance
            </summary>
            <param name="wearableItem">Wearable to be removed from the outfit</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.RemoveFromOutfit(System.Collections.Generic.List{OpenMetaverse.InventoryItem})">
            <summary>
            Removes a list of wearables from the current outfit and set appearance
            </summary>
            <param name="wearableItems">List of wearable inventory items to
            be removed from the outfit</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.ReplaceOutfit(System.Collections.Generic.List{OpenMetaverse.InventoryItem})">
            <summary>
            Replace the current outfit with a list of wearables and set appearance
            </summary>
            <param name="wearableItems">List of wearable inventory items that
            define a new outfit</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.IsItemWorn(OpenMetaverse.InventoryItem)">
            <summary>
            Checks if an inventory item is currently being worn
            </summary>
            <param name="item">The inventory item to check against the agent
            wearables</param>
            <returns>The WearableType slot that the item is being worn in,
            or WearbleType.Invalid if it is not currently being worn</returns>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.GetWearables">
            <summary>
            Returns a copy of the agents currently worn wearables
            </summary>
            <returns>A copy of the agents currently worn wearables</returns>
            <remarks>Avoid calling this function multiple times as it will make
            a copy of all of the wearable data each time</remarks>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.WearOutfit(System.Collections.Generic.List{OpenMetaverse.InventoryBase},System.Boolean)">
            <summary>
            Calls either <seealso cref="M:OpenMetaverse.AppearanceManager.ReplaceOutfit(System.Collections.Generic.List{OpenMetaverse.InventoryWearable})" /> or
            <seealso cref="M:OpenMetaverse.AppearanceManager.AddToOutfit(System.Collections.Generic.List{OpenMetaverse.InventoryItem})" /> depending on the value of
            replaceItems
            </summary>
            <param name="wearables">List of wearable inventory items to add
            to the outfit or become a new outfit</param>
            <param name="replaceItems">True to replace existing items with the
            new list of items, false to add these items to the existing outfit</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.AddAttachments(System.Collections.Generic.List{OpenMetaverse.InventoryItem},System.Boolean)">
            <summary>
            Adds a list of attachments to our agent
            </summary>
            <param name="attachments">A List containing the attachments to add</param>
            <param name="removeExistingFirst">If true, tells simulator to remove existing attachment
            first</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.Attach(OpenMetaverse.InventoryItem,OpenMetaverse.AttachmentPoint)">
            <summary>
            Attach an item to our agent at a specific attach point
            </summary>
            <param name="item">A <seealso cref="T:OpenMetaverse.InventoryItem" /> to attach</param>
            <param name="attachPoint">the <seealso cref="T:OpenMetaverse.AttachmentPoint" /> on the avatar
            to attach the item to</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.Attach(OpenMetaverse.UUID,OpenMetaverse.UUID,System.String,System.String,OpenMetaverse.Permissions,System.UInt32,OpenMetaverse.AttachmentPoint)">
            <summary>
            Attach an item to our agent specifying attachment details
            </summary>
            <param name="itemID">The <seealso cref="T:OpenMetaverse.UUID" /> of the item to attach</param>
            <param name="ownerID">The <seealso cref="T:OpenMetaverse.UUID" /> attachments owner</param>
            <param name="name">The name of the attachment</param>
            <param name="description">The description of the attahment</param>
            <param name="perms">The <seealso cref="T:OpenMetaverse.Permissions" /> to apply when attached</param>
            <param name="itemFlags">The <seealso cref="T:OpenMetaverse.InventoryItemFlags" /> of the attachment</param>
            <param name="attachPoint">The <seealso cref="T:OpenMetaverse.AttachmentPoint" /> on the agent
            to attach the item to</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.Detach(OpenMetaverse.InventoryItem)">
            <summary>
            Detach an item from our agent using an <seealso cref="T:OpenMetaverse.InventoryItem" /> object
            </summary>
            <param name="item">An <seealso cref="T:OpenMetaverse.InventoryItem" /> object</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.Detach(OpenMetaverse.UUID)">
            <summary>
            Detach an item from our agent
            </summary>
            <param name="itemID">The inventory itemID of the item to detach</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.SendAgentIsNowWearing">
            <summary>
            Inform the sim which wearables are part of our current outfit
            </summary>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.ReplaceOutfit(System.Collections.Generic.List{OpenMetaverse.InventoryWearable})">
            <summary>
            Replaces the Wearables collection with a list of new wearable items
            </summary>
            <param name="wearableItems">Wearable items to replace the Wearables collection with</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.GetColorFromParams(System.Collections.Generic.List{OpenMetaverse.AppearanceManager.ColorParamInfo})">
            <summary>
            Calculates base color/tint for a specific wearable
            based on its params
            </summary>
            <param name="param">All the color info gathered from wearable's VisualParams
            passed as list of ColorParamInfo tuples</param>
            <returns>Base color/tint for the wearable</returns>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.GetAgentWearables">
            <summary>
            Blocking method to populate the Wearables dictionary
            </summary>
            <returns>True on success, otherwise false</returns>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.GetCachedBakes">
            <summary>
            Blocking method to populate the Textures array with cached bakes
            </summary>
            <returns>True on success, otherwise false</returns>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.DecodeWearableParams(OpenMetaverse.AppearanceManager.WearableData)">
            <summary>
            Populates textures and visual params from a decoded asset
            </summary>
            <param name="wearable">Wearable to decode</param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.DownloadWearables">
            <summary>
            Blocking method to download and parse currently worn wearable assets
            </summary>
            <returns>True on success, otherwise false</returns>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.GetTextureDownloadList(OpenMetaverse.BakeType)">
            <summary>
            Get a list of all of the textures that need to be downloaded for a
            single bake layer
            </summary>
            <param name="bakeType">Bake layer to get texture AssetIDs for</param>
            <returns>A list of texture AssetIDs to download</returns>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.AddTextureDownload(OpenMetaverse.AvatarTextureIndex,System.Collections.Generic.List{OpenMetaverse.UUID})">
            <summary>
            Helper method to lookup the TextureID for a single layer and add it
            to a list if it is not already present
            </summary>
            <param name="index">
            </param>
            <param name="textures">
            </param>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.DownloadTextures(System.Collections.Generic.List{OpenMetaverse.BakeType})">
            <summary>
            Blocking method to download all of the textures needed for baking
            the given bake layers
            </summary>
            <param name="bakeLayers">A list of layers that need baking</param>
            <remarks>No return value is given because the baking will happen
            whether or not all textures are successfully downloaded</remarks>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.CreateBakes">
            <summary>
            Blocking method to create and upload baked textures for all of the
            missing bakes
            </summary>
            <returns>True on success, otherwise false</returns>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.CreateBake(OpenMetaverse.BakeType)">
            <summary>
            Blocking method to create and upload a baked texture for a single
            bake layer
            </summary>
            <param name="bakeType">Layer to bake</param>
            <returns>True on success, otherwise false</returns>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.UploadBake(System.Byte[])">
            <summary>
            Blocking method to upload a baked texture
            </summary>
            <param name="textureData">Five channel JPEG2000 texture data to upload</param>
            <returns>UUID of the newly created asset on success, otherwise UUID.Zero</returns>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.MakeParamValues">
            <summary>
            Creates a dictionary of visual param values from the downloaded wearables
            </summary>
            <returns>A dictionary of visual param indices mapping to visual param
            values for our agent that can be fed to the Baker class</returns>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.RequestAgentSetAppearance">
            <summary>
            Create an AgentSetAppearance packet from Wearables data and the
            Textures array and send it
            </summary>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.WearableTypeToAssetType(OpenMetaverse.WearableType)">
            <summary>
            Converts a WearableType to a bodypart or clothing WearableType
            </summary>
            <param name="type">A WearableType</param>
            <returns>AssetType.Bodypart or AssetType.Clothing or AssetType.Unknown</returns>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.BakeTypeToAgentTextureIndex(OpenMetaverse.BakeType)">
            <summary>
            Converts a BakeType to the corresponding baked texture slot in AvatarTextureIndex
            </summary>
            <param name="index">A BakeType</param>
            <returns>The AvatarTextureIndex slot that holds the given BakeType</returns>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.MorphLayerForBakeType(OpenMetaverse.BakeType)">
            <summary>
            Gives the layer number that is used for morph mask
            </summary>
            <param name="bakeType">&gt;A BakeType</param>
            <returns>Which layer number as defined in BakeTypeToTextures is used for morph mask</returns>
        </member>
        <member name="M:OpenMetaverse.AppearanceManager.BakeTypeToTextures(OpenMetaverse.BakeType)">
            <summary>
            Converts a BakeType to a list of the texture slots that make up that bake
            </summary>
            <param name="bakeType">A BakeType</param>
            <returns>A list of texture slots that are inputs for the given bake</returns>
        </member>
        <member name="T:OpenMetaverse.AgentWearablesReplyEventArgs">
            <summary>Contains the Event data returned from the data server from an AgentWearablesRequest</summary>
        </member>
        <member name="M:OpenMetaverse.AgentWearablesReplyEventArgs.#ctor">
            <summary>Construct a new instance of the AgentWearablesReplyEventArgs class</summary>
        </member>
        <member name="T:OpenMetaverse.AgentCachedBakesReplyEventArgs">
            <summary>Contains the Event data returned from the data server from an AgentCachedTextureResponse</summary>
        </member>
        <member name="M:OpenMetaverse.AgentCachedBakesReplyEventArgs.#ctor">
            <summary>Construct a new instance of the AgentCachedBakesReplyEventArgs class</summary>
        </member>
        <member name="T:OpenMetaverse.AppearanceSetEventArgs">
            <summary>Contains the Event data returned from an AppearanceSetRequest</summary>
        </member>
        <member name="M:OpenMetaverse.AppearanceSetEventArgs.#ctor(System.Boolean)">
            <summary>
            Triggered when appearance data is sent to the sim and
            the main appearance thread is done.</summary>
            <param name="success">Indicates whether appearance setting was successful</param>
        </member>
        <member name="P:OpenMetaverse.AppearanceSetEventArgs.Success">
            <summary>Indicates whether appearance setting was successful</summary>
        </member>
        <member name="T:OpenMetaverse.RebakeAvatarTexturesEventArgs">
            <summary>Contains the Event data returned from the data server from an RebakeAvatarTextures</summary>
        </member>
        <member name="M:OpenMetaverse.RebakeAvatarTexturesEventArgs.#ctor(OpenMetaverse.UUID)">
            <summary>
            Triggered when the simulator sends a request for this agent to rebake
            its appearance
            </summary>
            <param name="textureID">The ID of the Texture Layer to bake</param>
        </member>
        <member name="P:OpenMetaverse.RebakeAvatarTexturesEventArgs.TextureID">
            <summary>The ID of the Texture Layer to bake</summary>
        </member>
        <member name="T:OpenMetaverse.AssetCache">
            <summary>
            Class that handles the local asset cache
            </summary>
        </member>
        <member name="M:OpenMetaverse.AssetCache.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Default constructor
            </summary>
            <param name="client">A reference to the GridClient object</param>
        </member>
        <member name="T:OpenMetaverse.AssetCache.SortFilesByAccesTimeHelper">
            <summary>
            Helper class for sorting files by their last accessed time
            </summary>
        </member>
        <member name="P:OpenMetaverse.AssetCache.AutoPruneEnabled">
            <summary>
            Allows setting weather to periodicale prune the cache if it grows too big
            Default is enabled, when caching is enabled
            </summary>
        </member>
        <member name="P:OpenMetaverse.AssetCache.AutoPruneInterval">
            <summary>
            How long (in ms) between cache checks (default is 5 min.)
            </summary>
        </member>
        <member name="M:OpenMetaverse.AssetCache.DestroyTimer">
            <summary>
            Disposes cleanup timer
            </summary>
        </member>
        <member name="M:OpenMetaverse.AssetCache.SetupTimer">
            <summary>
            Only create timer when needed
            </summary>
        </member>
        <member name="M:OpenMetaverse.AssetCache.GetCachedAssetBytes(OpenMetaverse.UUID)">
            <summary>
            Return bytes read from the local asset cache, null if it does not exist
            </summary>
            <param name="assetID">UUID of the asset we want to get</param>
            <returns>Raw bytes of the asset, or null on failure</returns>
        </member>
        <member name="M:OpenMetaverse.AssetCache.GetCachedImage(OpenMetaverse.UUID)">
            <summary>
            Returns ImageDownload object of the
            image from the local image cache, null if it does not exist
            </summary>
            <param name="imageID">UUID of the image we want to get</param>
            <returns>ImageDownload object containing the image, or null on failure</returns>
        </member>
        <member name="M:OpenMetaverse.AssetCache.FileName(OpenMetaverse.UUID)">
            <summary>
            Constructs a file name of the cached asset
            </summary>
            <param name="assetID">UUID of the asset</param>
            <returns>String with the file name of the cahced asset</returns>
        </member>
        <member name="M:OpenMetaverse.AssetCache.SaveAssetToCache(OpenMetaverse.UUID,System.Byte[])">
            <summary>
            Saves an asset to the local cache
            </summary>
            <param name="assetID">UUID of the asset</param>
            <param name="assetData">Raw bytes the asset consists of</param>
            <returns>Weather the operation was successfull</returns>
        </member>
        <member name="M:OpenMetaverse.AssetCache.AssetFileName(OpenMetaverse.UUID)">
            <summary>
            Get the file name of the asset stored with gived UUID
            </summary>
            <param name="assetID">UUID of the asset</param>
            <returns>Null if we don't have that UUID cached on disk, file name if found in the cache folder</returns>
        </member>
        <member name="M:OpenMetaverse.AssetCache.HasAsset(OpenMetaverse.UUID)">
            <summary>
            Checks if the asset exists in the local cache
            </summary>
            <param name="assetID">UUID of the asset</param>
            <returns>True is the asset is stored in the cache, otherwise false</returns>
        </member>
        <member name="M:OpenMetaverse.AssetCache.Clear">
            <summary>
            Wipes out entire cache
            </summary>
        </member>
        <member name="M:OpenMetaverse.AssetCache.Prune">
            <summary>
            Brings cache size to the 90% of the max size
            </summary>
        </member>
        <member name="M:OpenMetaverse.AssetCache.BeginPrune">
            <summary>
            Asynchronously brings cache size to the 90% of the max size
            </summary>
        </member>
        <member name="M:OpenMetaverse.AssetCache.GetFileSize(System.IO.FileInfo[])">
            <summary>
            Adds up file sizes passes in a FileInfo array
            </summary>
        </member>
        <member name="M:OpenMetaverse.AssetCache.Operational">
            <summary>
            Checks whether caching is enabled
            </summary>
        </member>
        <member name="M:OpenMetaverse.AssetCache.cleanerTimer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Periodically prune the cache
            </summary>
        </member>
        <member name="M:OpenMetaverse.AssetCache.NiceFileSize(System.Int64)">
            <summary>
            Nicely formats file sizes
            </summary>
            <param name="byteCount">Byte size we want to output</param>
            <returns>String with humanly readable file size</returns>
        </member>
        <member name="T:OpenMetaverse.StatusCode">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.StatusCode.OK">
            <summary>OK</summary>
        </member>
        <member name="F:OpenMetaverse.StatusCode.Done">
            <summary>Transfer completed</summary>
        </member>
        <member name="F:OpenMetaverse.StatusCode.Skip">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.StatusCode.Abort">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.StatusCode.Error">
            <summary>Unknown error occurred</summary>
        </member>
        <member name="F:OpenMetaverse.StatusCode.UnknownSource">
            <summary>Equivalent to a 404 error</summary>
        </member>
        <member name="F:OpenMetaverse.StatusCode.InsufficientPermissions">
            <summary>Client does not have permission for that resource</summary>
        </member>
        <member name="F:OpenMetaverse.StatusCode.Unknown">
            <summary>Unknown status</summary>
        </member>
        <member name="T:OpenMetaverse.ChannelType">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ChannelType.Unknown">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ChannelType.Misc">
            <summary>Unknown</summary>
        </member>
        <member name="F:OpenMetaverse.ChannelType.Asset">
            <summary>Virtually all asset transfers use this channel</summary>
        </member>
        <member name="T:OpenMetaverse.SourceType">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.SourceType.Unknown">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.SourceType.Asset">
            <summary>Asset from the asset server</summary>
        </member>
        <member name="F:OpenMetaverse.SourceType.SimInventoryItem">
            <summary>Inventory item</summary>
        </member>
        <member name="F:OpenMetaverse.SourceType.SimEstate">
            <summary>Estate asset, such as an estate covenant</summary>
        </member>
        <member name="T:OpenMetaverse.TargetType">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TargetType.Unknown">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TargetType.File">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TargetType.VFile">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.ImageType">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ImageType.Normal">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ImageType.Baked">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.ImageCodec">
            <summary>
            Image file format
            </summary>
        </member>
        <member name="T:OpenMetaverse.Transfer">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.Transfer.TimeSinceLastPacket">
            <summary>Number of milliseconds passed since the last transfer
            packet was received</summary>
        </member>
        <member name="T:OpenMetaverse.AssetDownload">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.XferDownload">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.ImageDownload">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.AssetUpload">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.ImageRequest">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.ImageRequest.#ctor(OpenMetaverse.UUID,OpenMetaverse.ImageType,System.Single,System.Int32)">
            <summary>
            </summary>
            <param name="imageid">
            </param>
            <param name="type">
            </param>
            <param name="priority">
            </param>
            <param name="discardLevel">
            </param>
        </member>
        <member name="T:OpenMetaverse.AssetManager">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.AssetManager.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Default constructor
            </summary>
            <param name="client">A reference to the GridClient object</param>
        </member>
        <member name="T:OpenMetaverse.AssetManager.AssetReceivedCallback">
            <summary>
            Callback used for various asset download requests
            </summary>
            <param name="transfer">Transfer information</param>
            <param name="asset">Downloaded asset, null on fail</param>
        </member>
        <member name="T:OpenMetaverse.AssetManager.BakedTextureUploadedCallback">
            <summary>
            Callback used upon competition of baked texture upload
            </summary>
            <param name="newAssetID">Asset UUID of the newly uploaded baked texture</param>
        </member>
        <member name="F:OpenMetaverse.AssetManager.TRANSFER_HEADER_TIMEOUT">
            <summary>Number of milliseconds to wait for a transfer header packet if out of order data was received</summary>
        </member>
        <member name="F:OpenMetaverse.AssetManager.m_XferReceivedEvent">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AssetManager.m_XferReceivedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AssetManager.m_AssetUploadedEvent">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AssetManager.m_AssetUploadedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AssetManager.m_UploadProgressEvent">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AssetManager.m_UploadProgressLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AssetManager.m_InitiateDownloadEvent">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AssetManager.m_InitiateDownloadLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AssetManager.m_ImageReceiveProgressEvent">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.AssetManager.m_ImageReceiveProgressLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AssetManager.Cache">
            <summary>Texture download cache</summary>
        </member>
        <member name="E:OpenMetaverse.AssetManager.XferReceived">
            <summary>Raised when the simulator responds sends </summary>
        </member>
        <member name="E:OpenMetaverse.AssetManager.AssetUploaded">
            <summary>Raised during upload completes</summary>
        </member>
        <member name="E:OpenMetaverse.AssetManager.UploadProgress">
            <summary>Raised during upload with progres update</summary>
        </member>
        <member name="E:OpenMetaverse.AssetManager.InitiateDownload">
            <summary>Fired when the simulator sends an InitiateDownloadPacket, used to download terrain .raw files</summary>
        </member>
        <member name="E:OpenMetaverse.AssetManager.ImageReceiveProgress">
            <summary>Fired when a texture is in the process of being downloaded by the TexturePipeline class</summary>
        </member>
        <member name="M:OpenMetaverse.AssetManager.OnXferReceived(OpenMetaverse.XferReceivedEventArgs)">
            <summary>Raises the XferReceived event</summary>
            <param name="e">A XferReceivedEventArgs object containing the
            data returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.OnAssetUploaded(OpenMetaverse.AssetUploadEventArgs)">
            <summary>Raises the AssetUploaded event</summary>
            <param name="e">A AssetUploadedEventArgs object containing the
            data returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.OnUploadProgress(OpenMetaverse.AssetUploadEventArgs)">
            <summary>Raises the UploadProgress event</summary>
            <param name="e">A UploadProgressEventArgs object containing the
            data returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.OnInitiateDownload(OpenMetaverse.InitiateDownloadEventArgs)">
            <summary>Raises the InitiateDownload event</summary>
            <param name="e">A InitiateDownloadEventArgs object containing the
            data returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.OnImageReceiveProgress(OpenMetaverse.ImageReceiveProgressEventArgs)">
            <summary>Raises the ImageReceiveProgress event</summary>
            <param name="e">A ImageReceiveProgressEventArgs object containing the
            data returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.RequestAsset(OpenMetaverse.UUID,OpenMetaverse.AssetType,System.Boolean,OpenMetaverse.AssetManager.AssetReceivedCallback)">
            <summary>
            Request an asset download
            </summary>
            <param name="assetID">Asset UUID</param>
            <param name="type">Asset type, must be correct for the transfer to succeed</param>
            <param name="priority">Whether to give this transfer an elevated priority</param>
            <param name="callback">The callback to fire when the simulator responds with the asset data</param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.RequestAsset(OpenMetaverse.UUID,OpenMetaverse.AssetType,System.Boolean,OpenMetaverse.SourceType,OpenMetaverse.AssetManager.AssetReceivedCallback)">
            <summary>
            Request an asset download
            </summary>
            <param name="assetID">Asset UUID</param>
            <param name="type">Asset type, must be correct for the transfer to succeed</param>
            <param name="priority">Whether to give this transfer an elevated priority</param>
            <param name="sourceType">Source location of the requested asset</param>
            <param name="callback">The callback to fire when the simulator responds with the asset data</param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.RequestAsset(OpenMetaverse.UUID,OpenMetaverse.AssetType,System.Boolean,OpenMetaverse.SourceType,OpenMetaverse.UUID,OpenMetaverse.AssetManager.AssetReceivedCallback)">
            <summary>
            Request an asset download
            </summary>
            <param name="assetID">Asset UUID</param>
            <param name="type">Asset type, must be correct for the transfer to succeed</param>
            <param name="priority">Whether to give this transfer an elevated priority</param>
            <param name="sourceType">Source location of the requested asset</param>
            <param name="transactionID">UUID of the transaction</param>
            <param name="callback">The callback to fire when the simulator responds with the asset data</param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.RequestAssetXfer(System.String,System.Boolean,System.Boolean,OpenMetaverse.UUID,OpenMetaverse.AssetType,System.Boolean)">
            <summary>
            Request an asset download through the almost deprecated Xfer system
            </summary>
            <param name="filename">Filename of the asset to request</param>
            <param name="deleteOnCompletion">Whether or not to delete the asset
            off the server after it is retrieved</param>
            <param name="useBigPackets">Use large transfer packets or not</param>
            <param name="vFileID">UUID of the file to request, if filename is
            left empty</param>
            <param name="vFileType">Asset type of <code>vFileID</code>, or
            <code>AssetType.Unknown</code> if filename is not empty</param>
            <param name="fromCache">Sets the FilePath in the request to Cache
            (4) if true, otherwise Unknown (0) is used</param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.AssetManager.RequestInventoryAsset(OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.AssetType,System.Boolean,OpenMetaverse.AssetManager.AssetReceivedCallback)">
            <summary>
            </summary>
            <param name="assetID">Use UUID.Zero if you do not have the
            asset ID but have all the necessary permissions</param>
            <param name="itemID">The item ID of this asset in the inventory</param>
            <param name="taskID">Use UUID.Zero if you are not requesting an
            asset from an object inventory</param>
            <param name="ownerID">The owner of this asset</param>
            <param name="type">Asset type</param>
            <param name="priority">Whether to prioritize this asset download or not</param>
            <param name="callback">
            </param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.SetPendingAssetUploadData(OpenMetaverse.AssetUpload)">
            <summary>
            Used to force asset data into the PendingUpload property, ie: for raw terrain uploads
            </summary>
            <param name="assetData">An AssetUpload object containing the data to upload to the simulator</param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.RequestUpload(OpenMetaverse.Assets.Asset,System.Boolean)">
            <summary>
            Request an asset be uploaded to the simulator
            </summary>
            <param name="asset">The <seealso cref="T:OpenMetaverse.Assets.Asset" /> Object containing the asset data</param>
            <param name="storeLocal">If True, the asset once uploaded will be stored on the simulator
            in which the client was connected in addition to being stored on the asset server</param>
            <returns>The <seealso cref="T:OpenMetaverse.UUID" /> of the transfer, can be used to correlate the upload with
            events being fired</returns>
        </member>
        <member name="M:OpenMetaverse.AssetManager.RequestUpload(OpenMetaverse.AssetType,System.Byte[],System.Boolean)">
            <summary>
            Request an asset be uploaded to the simulator
            </summary>
            <param name="type">The <seealso cref="T:OpenMetaverse.AssetType" /> of the asset being uploaded</param>
            <param name="data">A byte array containing the encoded asset data</param>
            <param name="storeLocal">If True, the asset once uploaded will be stored on the simulator
            in which the client was connected in addition to being stored on the asset server</param>
            <returns>The <seealso cref="T:OpenMetaverse.UUID" /> of the transfer, can be used to correlate the upload with
            events being fired</returns>
        </member>
        <member name="M:OpenMetaverse.AssetManager.RequestUpload(OpenMetaverse.UUID@,OpenMetaverse.AssetType,System.Byte[],System.Boolean)">
            <summary>
            Request an asset be uploaded to the simulator
            </summary>
            <param name="assetID">
            </param>
            <param name="type">Asset type to upload this data as</param>
            <param name="data">A byte array containing the encoded asset data</param>
            <param name="storeLocal">If True, the asset once uploaded will be stored on the simulator
            in which the client was connected in addition to being stored on the asset server</param>
            <returns>The <seealso cref="T:OpenMetaverse.UUID" /> of the transfer, can be used to correlate the upload with
            events being fired</returns>
        </member>
        <member name="M:OpenMetaverse.AssetManager.RequestUpload(OpenMetaverse.UUID@,OpenMetaverse.AssetType,System.Byte[],System.Boolean,OpenMetaverse.UUID)">
            <summary>
            Initiate an asset upload
            </summary>
            <param name="assetID">The ID this asset will have if the
            upload succeeds</param>
            <param name="type">Asset type to upload this data as</param>
            <param name="data">Raw asset data to upload</param>
            <param name="storeLocal">Whether to store this asset on the local
            simulator or the grid-wide asset server</param>
            <param name="transactionID">The tranaction id for the upload <see cref="!:RequestCreateItem" /></param>
            <returns>The transaction ID of this transfer</returns>
        </member>
        <member name="M:OpenMetaverse.AssetManager.RequestImage(OpenMetaverse.UUID,OpenMetaverse.ImageType,System.Single,System.Int32,System.UInt32,OpenMetaverse.TextureDownloadCallback,System.Boolean)">
            <summary>
            Request a texture asset from the simulator using the <see cref="T:OpenMetaverse.TexturePipeline" /> system to
            manage the requests and re-assemble the image from the packets received from the simulator
            </summary>
            <param name="textureID">The <see cref="T:OpenMetaverse.UUID" /> of the texture asset to download</param>
            <param name="imageType">The <see cref="T:OpenMetaverse.ImageType" /> of the texture asset.
            Use <see cref="F:OpenMetaverse.ImageType.Normal" /> for most textures, or <see cref="F:OpenMetaverse.ImageType.Baked" /> for baked layer texture assets</param>
            <param name="priority">A float indicating the requested priority for the transfer. Higher priority values tell the simulator
            to prioritize the request before lower valued requests. An image already being transferred using the <see cref="T:OpenMetaverse.TexturePipeline" /> can have
            its priority changed by resending the request with the new priority value</param>
            <param name="discardLevel">Number of quality layers to discard.
            This controls the end marker of the data sent. Sending with value -1 combined with priority of 0 cancels an in-progress
            transfer.</param>
            <remarks>A bug exists in the Linden Simulator where a -1 will occasionally be sent with a non-zero priority
            indicating an off-by-one error.</remarks>
            <param name="packetStart">The packet number to begin the request at. A value of 0 begins the request
            from the start of the asset texture</param>
            <param name="callback">The <see cref="T:OpenMetaverse.TextureDownloadCallback" /> callback to fire when the image is retrieved. The callback
            will contain the result of the request and the texture asset data</param>
            <param name="progress">If true, the callback will be fired for each chunk of the downloaded image.
            The callback asset parameter will contain all previously received chunks of the texture asset starting
            from the beginning of the request</param>
            <example>
            Request an image and fire a callback when the request is complete
            <code>
            Client.Assets.RequestImage(UUID.Parse("c307629f-e3a1-4487-5e88-0d96ac9d4965"), ImageType.Normal, TextureDownloader_OnDownloadFinished);
            private void TextureDownloader_OnDownloadFinished(TextureRequestState state, AssetTexture asset)
            {
            if(state == TextureRequestState.Finished)
            {
            Console.WriteLine("Texture {0} ({1} bytes) has been successfully downloaded",
            asset.AssetID,
            asset.AssetData.Length);
            }
            }
            </code>
            Request an image and use an inline anonymous method to handle the downloaded texture data
            <code>
            Client.Assets.RequestImage(UUID.Parse("c307629f-e3a1-4487-5e88-0d96ac9d4965"), ImageType.Normal, delegate(TextureRequestState state, AssetTexture asset)
            {
            if(state == TextureRequestState.Finished)
            {
            Console.WriteLine("Texture {0} ({1} bytes) has been successfully downloaded",
            asset.AssetID,
            asset.AssetData.Length);
            }
            }
            );
            </code>
            Request a texture, decode the texture to a bitmap image and apply it to a imagebox
            <code>
            Client.Assets.RequestImage(UUID.Parse("c307629f-e3a1-4487-5e88-0d96ac9d4965"), ImageType.Normal, TextureDownloader_OnDownloadFinished);
            private void TextureDownloader_OnDownloadFinished(TextureRequestState state, AssetTexture asset)
            {
            if(state == TextureRequestState.Finished)
            {
            ManagedImage imgData;
            Image bitmap;
            if (state == TextureRequestState.Finished)
            {
            OpenJPEG.DecodeToImage(assetTexture.AssetData, out imgData, out bitmap);
            picInsignia.Image = bitmap;
            }
            }
            }
            </code></example>
        </member>
        <member name="M:OpenMetaverse.AssetManager.RequestImage(OpenMetaverse.UUID,OpenMetaverse.TextureDownloadCallback)">
            <summary>
            Overload: Request a texture asset from the simulator using the <see cref="T:OpenMetaverse.TexturePipeline" /> system to
            manage the requests and re-assemble the image from the packets received from the simulator
            </summary>
            <param name="textureID">The <see cref="T:OpenMetaverse.UUID" /> of the texture asset to download</param>
            <param name="callback">The <see cref="T:OpenMetaverse.TextureDownloadCallback" /> callback to fire when the image is retrieved. The callback
            will contain the result of the request and the texture asset data</param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.RequestImage(OpenMetaverse.UUID,OpenMetaverse.ImageType,OpenMetaverse.TextureDownloadCallback)">
            <summary>
            Overload: Request a texture asset from the simulator using the <see cref="T:OpenMetaverse.TexturePipeline" /> system to
            manage the requests and re-assemble the image from the packets received from the simulator
            </summary>
            <param name="textureID">The <see cref="T:OpenMetaverse.UUID" /> of the texture asset to download</param>
            <param name="imageType">The <see cref="T:OpenMetaverse.ImageType" /> of the texture asset.
            Use <see cref="F:OpenMetaverse.ImageType.Normal" /> for most textures, or <see cref="F:OpenMetaverse.ImageType.Baked" /> for baked layer texture assets</param>
            <param name="callback">The <see cref="T:OpenMetaverse.TextureDownloadCallback" /> callback to fire when the image is retrieved. The callback
            will contain the result of the request and the texture asset data</param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.RequestImage(OpenMetaverse.UUID,OpenMetaverse.ImageType,OpenMetaverse.TextureDownloadCallback,System.Boolean)">
            <summary>
            Overload: Request a texture asset from the simulator using the <see cref="T:OpenMetaverse.TexturePipeline" /> system to
            manage the requests and re-assemble the image from the packets received from the simulator
            </summary>
            <param name="textureID">The <see cref="T:OpenMetaverse.UUID" /> of the texture asset to download</param>
            <param name="imageType">The <see cref="T:OpenMetaverse.ImageType" /> of the texture asset.
            Use <see cref="F:OpenMetaverse.ImageType.Normal" /> for most textures, or <see cref="F:OpenMetaverse.ImageType.Baked" /> for baked layer texture assets</param>
            <param name="callback">The <see cref="T:OpenMetaverse.TextureDownloadCallback" /> callback to fire when the image is retrieved. The callback
            will contain the result of the request and the texture asset data</param>
            <param name="progress">If true, the callback will be fired for each chunk of the downloaded image.
            The callback asset parameter will contain all previously received chunks of the texture asset starting
            from the beginning of the request</param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.RequestImageCancel(OpenMetaverse.UUID)">
            <summary>
            Cancel a texture request
            </summary>
            <param name="textureID">The texture assets <see cref="T:OpenMetaverse.UUID" /></param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.FireImageProgressEvent(OpenMetaverse.UUID,System.Int32,System.Int32)">
            <summary>
            Lets TexturePipeline class fire the progress event
            </summary>
            <param name="texureID">The texture ID currently being downloaded</param>
            <param name="transferredBytes">the number of bytes transferred</param>
            <param name="totalBytes">the total number of bytes expected</param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.TransferInfoHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.TransferPacketHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.InitiateDownloadPacketHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.RequestXferHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.ConfirmXferPacketHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.AssetUploadCompleteHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.SendXferPacketHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AssetManager.AbortXferHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="P:OpenMetaverse.XferReceivedEventArgs.Xfer">
            <summary>Xfer data</summary>
        </member>
        <member name="P:OpenMetaverse.AssetUploadEventArgs.Upload">
            <summary>Upload data</summary>
        </member>
        <member name="P:OpenMetaverse.InitiateDownloadEventArgs.SimFileName">
            <summary>Filename used on the simulator</summary>
        </member>
        <member name="P:OpenMetaverse.InitiateDownloadEventArgs.ViewerFileName">
            <summary>Filename used by the client</summary>
        </member>
        <member name="P:OpenMetaverse.ImageReceiveProgressEventArgs.ImageID">
            <summary>UUID of the image that is in progress</summary>
        </member>
        <member name="P:OpenMetaverse.ImageReceiveProgressEventArgs.Received">
            <summary>Number of bytes received so far</summary>
        </member>
        <member name="P:OpenMetaverse.ImageReceiveProgressEventArgs.Total">
            <summary>Image size in bytes</summary>
        </member>
        <member name="T:OpenMetaverse.ProfileFlags">
            <summary>
            Avatar profile flags
            </summary>
        </member>
        <member name="T:OpenMetaverse.Avatar">
            <summary>
            Represents an avatar (other than your own)
            </summary>
        </member>
        <member name="M:OpenMetaverse.Avatar.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:OpenMetaverse.Avatar.Statistics">
            <summary>
            Positive and negative ratings
            </summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Statistics.BehaviorPositive">
            <summary>Positive ratings for Behavior</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Statistics.BehaviorNegative">
            <summary>Negative ratings for Behavior</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Statistics.AppearancePositive">
            <summary>Positive ratings for Appearance</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Statistics.AppearanceNegative">
            <summary>Negative ratings for Appearance</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Statistics.BuildingPositive">
            <summary>Positive ratings for Building</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Statistics.BuildingNegative">
            <summary>Negative ratings for Building</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Statistics.GivenPositive">
            <summary>Positive ratings given by this avatar</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Statistics.GivenNegative">
            <summary>Negative ratings given by this avatar</summary>
        </member>
        <member name="T:OpenMetaverse.Avatar.AvatarProperties">
            <summary>
            Avatar properties including about text, profile URL, image IDs and
            publishing settings
            </summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.AvatarProperties.FirstLifeText">
            <summary>First Life about text</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.AvatarProperties.FirstLifeImage">
            <summary>First Life image ID</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.AvatarProperties.Partner">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.AvatarProperties.AboutText">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.AvatarProperties.BornOn">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.AvatarProperties.CharterMember">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.AvatarProperties.ProfileImage">
            <summary>Profile image ID</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.AvatarProperties.Flags">
            <summary>Flags of the profile</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.AvatarProperties.ProfileURL">
            <summary>Web URL for this profile</summary>
        </member>
        <member name="P:OpenMetaverse.Avatar.AvatarProperties.AllowPublish">
            <summary>Should this profile be published on the web</summary>
        </member>
        <member name="P:OpenMetaverse.Avatar.AvatarProperties.Online">
            <summary>Avatar Online Status</summary>
        </member>
        <member name="P:OpenMetaverse.Avatar.AvatarProperties.MaturePublish">
            <summary>Is this a mature profile</summary>
        </member>
        <member name="P:OpenMetaverse.Avatar.AvatarProperties.Identified">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.Avatar.AvatarProperties.Transacted">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.Avatar.Interests">
            <summary>
            Avatar interests including spoken languages, skills, and "want to"
            choices
            </summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Interests.LanguagesText">
            <summary>Languages profile field</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Interests.SkillsMask">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Interests.SkillsText">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Interests.WantToMask">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Interests.WantToText">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.Groups">
            <summary>Groups that this avatar is a member of</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.ProfileStatistics">
            <summary>Positive and negative ratings</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.ProfileProperties">
            <summary>Avatar properties including about text, profile URL, image IDs and
            publishing settings</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.ProfileInterests">
            <summary>Avatar interests including spoken languages, skills, and "want to"
            choices</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.ControlFlags">
            <summary>Movement control flags for avatars. Typically not set or used by
            clients. To move your avatar, use Client.Self.Movement instead</summary>
        </member>
        <member name="F:OpenMetaverse.Avatar.VisualParameters">
            <summary>
            Contains the visual parameters describing the deformation of the avatar
            </summary>
        </member>
        <member name="P:OpenMetaverse.Avatar.FirstName">
            <summary>First name</summary>
        </member>
        <member name="P:OpenMetaverse.Avatar.LastName">
            <summary>Last name</summary>
        </member>
        <member name="P:OpenMetaverse.Avatar.Name">
            <summary>Full name</summary>
        </member>
        <member name="P:OpenMetaverse.Avatar.GroupName">
            <summary>Active group</summary>
        </member>
        <member name="T:OpenMetaverse.AvatarGroup">
            <summary>
            Holds group information for Avatars such as those you might find in a profile
            </summary>
        </member>
        <member name="F:OpenMetaverse.AvatarGroup.AcceptNotices">
            <summary>true of Avatar accepts group notices</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarGroup.GroupID">
            <summary>Groups Key</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarGroup.GroupInsigniaID">
            <summary>Texture Key for groups insignia</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarGroup.GroupName">
            <summary>Name of the group</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarGroup.GroupPowers">
            <summary>Powers avatar has in the group</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarGroup.GroupTitle">
            <summary>Avatars Currently selected title</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarGroup.ListInProfile">
            <summary>true of Avatar has chosen to list this in their profile</summary>
        </member>
        <member name="T:OpenMetaverse.Animation">
            <summary>
            Contains an animation currently being played by an agent
            </summary>
        </member>
        <member name="F:OpenMetaverse.Animation.AnimationID">
            <summary>The ID of the animation asset</summary>
        </member>
        <member name="F:OpenMetaverse.Animation.AnimationSequence">
            <summary>A number to indicate start order of currently playing animations</summary>
            <remarks>On Linden Grids this number is unique per region, with OpenSim it is per client</remarks>
        </member>
        <member name="F:OpenMetaverse.Animation.AnimationSourceObjectID">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.ProfilePick">
            <summary>
            Holds group information on an individual profile pick
            </summary>
        </member>
        <member name="T:OpenMetaverse.AvatarManager">
            <summary>
            Retrieve friend status notifications, and retrieve avatar names and
            profiles
            </summary>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Represents other avatars
            </summary>
            <param name="client">
            </param>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_AvatarAnimation">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_AvatarAnimationLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_AvatarAppearance">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_AvatarAppearanceLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_UUIDNameReply">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_UUIDNameReplyLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_AvatarInterestsReply">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_AvatarInterestsReplyLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_AvatarPropertiesReply">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_AvatarPropertiesReplyLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_AvatarGroupsReply">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_AvatarGroupsReplyLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_AvatarPickerReply">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_AvatarPickerReplyLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_ViewerEffectPointAt">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_ViewerEffectPointAtLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_ViewerEffectLookAt">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_ViewerEffectLookAtLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_ViewerEffect">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_ViewerEffectLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_AvatarPicksReply">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_AvatarPicksReplyLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_PickInfoReply">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_PickInfoReplyLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_AvatarClassifiedReply">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_AvatarClassifiedReplyLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_ClassifiedInfoReply">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.AvatarManager.m_ClassifiedInfoReplyLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.AvatarAnimation">
            <summary>Raised when the simulator sends us data containing
            an agents animation playlist</summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.AvatarAppearance">
            <summary>Raised when the simulator sends us data containing
            the appearance information for an agent</summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.UUIDNameReply">
            <summary>Raised when the simulator sends us data containing
            agent names/id values</summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.AvatarInterestsReply">
            <summary>Raised when the simulator sends us data containing
            the interests listed in an agents profile</summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.AvatarPropertiesReply">
            <summary>Raised when the simulator sends us data containing
            profile property information for an agent</summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.AvatarGroupsReply">
            <summary>Raised when the simulator sends us data containing
            the group membership an agent is a member of</summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.AvatarPickerReply">
            <summary>Raised when the simulator sends us data containing
            name/id pair</summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.ViewerEffectPointAt">
            <summary>Raised when the simulator sends us data containing
            the objects and effect when an agent is pointing at</summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.ViewerEffectLookAt">
            <summary>Raised when the simulator sends us data containing
            the objects and effect when an agent is looking at</summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.ViewerEffect">
            <summary>Raised when the simulator sends us data containing
            an agents viewer effect information</summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.AvatarPicksReply">
            <summary>Raised when the simulator sends us data containing
            the top picks from an agents profile</summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.PickInfoReply">
            <summary>Raised when the simulator sends us data containing
            the Pick details</summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.AvatarClassifiedReply">
            <summary>Raised when the simulator sends us data containing
            the classified ads an agent has placed</summary>
        </member>
        <member name="E:OpenMetaverse.AvatarManager.ClassifiedInfoReply">
            <summary>Raised when the simulator sends us data containing
            the details of a classified ad</summary>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.OnAvatarAnimation(OpenMetaverse.AvatarAnimationEventArgs)">
            <summary>Raises the AvatarAnimation Event</summary>
            <param name="e">An AvatarAnimationEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.OnAvatarAppearance(OpenMetaverse.AvatarAppearanceEventArgs)">
            <summary>Raises the AvatarAppearance Event</summary>
            <param name="e">A AvatarAppearanceEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.OnUUIDNameReply(OpenMetaverse.UUIDNameReplyEventArgs)">
            <summary>Raises the UUIDNameReply Event</summary>
            <param name="e">A UUIDNameReplyEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.OnAvatarInterestsReply(OpenMetaverse.AvatarInterestsReplyEventArgs)">
            <summary>Raises the AvatarInterestsReply Event</summary>
            <param name="e">A AvatarInterestsReplyEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.OnAvatarPropertiesReply(OpenMetaverse.AvatarPropertiesReplyEventArgs)">
            <summary>Raises the AvatarPropertiesReply Event</summary>
            <param name="e">A AvatarPropertiesReplyEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.OnAvatarGroupsReply(OpenMetaverse.AvatarGroupsReplyEventArgs)">
            <summary>Raises the AvatarGroupsReply Event</summary>
            <param name="e">A AvatarGroupsReplyEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.OnAvatarPickerReply(OpenMetaverse.AvatarPickerReplyEventArgs)">
            <summary>Raises the AvatarPickerReply Event</summary>
            <param name="e">A AvatarPickerReplyEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.OnViewerEffectPointAt(OpenMetaverse.ViewerEffectPointAtEventArgs)">
            <summary>Raises the ViewerEffectPointAt Event</summary>
            <param name="e">A ViewerEffectPointAtEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.OnViewerEffectLookAt(OpenMetaverse.ViewerEffectLookAtEventArgs)">
            <summary>Raises the ViewerEffectLookAt Event</summary>
            <param name="e">A ViewerEffectLookAtEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.OnViewerEffect(OpenMetaverse.ViewerEffectEventArgs)">
            <summary>Raises the ViewerEffect Event</summary>
            <param name="e">A ViewerEffectEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.OnAvatarPicksReply(OpenMetaverse.AvatarPicksReplyEventArgs)">
            <summary>Raises the AvatarPicksReply Event</summary>
            <param name="e">A AvatarPicksReplyEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.OnPickInfoReply(OpenMetaverse.PickInfoReplyEventArgs)">
            <summary>Raises the PickInfoReply Event</summary>
            <param name="e">A PickInfoReplyEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.OnAvatarClassifiedReply(OpenMetaverse.AvatarClassifiedReplyEventArgs)">
            <summary>Raises the AvatarClassifiedReply Event</summary>
            <param name="e">A AvatarClassifiedReplyEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.OnClassifiedInfoReply(OpenMetaverse.ClassifiedInfoReplyEventArgs)">
            <summary>Raises the ClassifiedInfoReply Event</summary>
            <param name="e">A ClassifiedInfoReplyEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.RequestTrackAgent(OpenMetaverse.UUID)">
            <summary>Tracks the specified avatar on your map</summary>
            <param name="preyID">Avatar ID to track</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.RequestAvatarName(OpenMetaverse.UUID)">
            <summary>
            Request a single avatar name
            </summary>
            <param name="id">The avatar key to retrieve a name for</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.RequestAvatarNames(System.Collections.Generic.List{OpenMetaverse.UUID})">
            <summary>
            Request a list of avatar names
            </summary>
            <param name="ids">The avatar keys to retrieve names for</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.RequestAvatarProperties(OpenMetaverse.UUID)">
            <summary>
            Start a request for Avatar Properties
            </summary>
            <param name="avatarid">
            </param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.RequestAvatarNameSearch(System.String,OpenMetaverse.UUID)">
            <summary>
            Search for an avatar (first name, last name)
            </summary>
            <param name="name">The name to search for</param>
            <param name="queryID">An ID to associate with this query</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.RequestAvatarPicks(OpenMetaverse.UUID)">
            <summary>
            Start a request for Avatar Picks
            </summary>
            <param name="avatarid">UUID of the avatar</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.RequestAvatarClassified(OpenMetaverse.UUID)">
            <summary>
            Start a request for Avatar Classifieds
            </summary>
            <param name="avatarid">UUID of the avatar</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.RequestPickInfo(OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>
            Start a request for details of a specific profile pick
            </summary>
            <param name="avatarid">UUID of the avatar</param>
            <param name="pickid">UUID of the profile pick</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.RequestClassifiedInfo(OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>
            Start a request for details of a specific profile classified
            </summary>
            <param name="avatarid">UUID of the avatar</param>
            <param name="classifiedid">UUID of the profile classified</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.UUIDNameReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.AvatarAnimationHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.AvatarAppearanceHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.AvatarPropertiesHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.AvatarInterestsHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.AvatarGroupsReplyMessageHandler(System.String,OpenMetaverse.Interfaces.IMessage,OpenMetaverse.Simulator)">
            <summary>
            Crossed region handler for message that comes across the EventQueue. Sent to an agent
            when the agent crosses a sim border into a new region.
            </summary>
            <param name="capsKey">The message key</param>
            <param name="message">the IMessage object containing the deserialized data sent from the simulator</param>
            <param name="simulator">The <see cref="T:OpenMetaverse.Simulator" /> which originated the packet</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.AvatarGroupsReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.AvatarPickerReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.ViewerEffectHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.AvatarPicksReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.PickInfoReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.AvatarClassifiedReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.AvatarManager.ClassifiedInfoReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="T:OpenMetaverse.AvatarAnimationEventArgs">
            <summary>Provides data for the <see cref="E:OpenMetaverse.AvatarManager.AvatarAnimation" /> event</summary>
            <remarks>The <see cref="E:OpenMetaverse.AvatarManager.AvatarAnimation" /> event occurs when the simulator sends
            the animation playlist for an agent</remarks>
            <example>
            The following code example uses the <see cref="P:OpenMetaverse.AvatarAnimationEventArgs.AvatarID" /> and <see cref="P:OpenMetaverse.AvatarAnimationEventArgs.Animations" />
            properties to display the animation playlist of an avatar on the <see cref="T:System.Console" /> window.
            <code>
            // subscribe to the event
            Client.Avatars.AvatarAnimation += Avatars_AvatarAnimation;
            private void Avatars_AvatarAnimation(object sender, AvatarAnimationEventArgs e)
            {
            // create a dictionary of "known" animations from the Animations class using System.Reflection
            Dictionary&lt;UUID, string&gt; systemAnimations = new Dictionary&lt;UUID, string&gt;();
            Type type = typeof(Animations);
            System.Reflection.FieldInfo[] fields = type.GetFields(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static);
            foreach (System.Reflection.FieldInfo field in fields)
            {
            systemAnimations.Add((UUID)field.GetValue(type), field.Name);
            }
            // find out which animations being played are known animations and which are assets
            foreach (Animation animation in e.Animations)
            {
            if (systemAnimations.ContainsKey(animation.AnimationID))
            {
            Console.WriteLine("{0} is playing {1} ({2}) sequence {3}", e.AvatarID,
            systemAnimations[animation.AnimationID], animation.AnimationSequence);
            }
            else
            {
            Console.WriteLine("{0} is playing {1} (Asset) sequence {2}", e.AvatarID,
            animation.AnimationID, animation.AnimationSequence);
            }
            }
            }
            </code></example>
        </member>
        <member name="M:OpenMetaverse.AvatarAnimationEventArgs.#ctor(OpenMetaverse.UUID,System.Collections.Generic.List{OpenMetaverse.Animation})">
            <summary>
            Construct a new instance of the AvatarAnimationEventArgs class
            </summary>
            <param name="avatarID">The ID of the agent</param>
            <param name="anims">The list of animations to start</param>
        </member>
        <member name="P:OpenMetaverse.AvatarAnimationEventArgs.AvatarID">
            <summary>Get the ID of the agent</summary>
        </member>
        <member name="P:OpenMetaverse.AvatarAnimationEventArgs.Animations">
            <summary>Get the list of animations to start</summary>
        </member>
        <member name="T:OpenMetaverse.AvatarAppearanceEventArgs">
            <summary>Provides data for the <see cref="E:OpenMetaverse.AvatarManager.AvatarAppearance" /> event</summary>
            <remarks>The <see cref="E:OpenMetaverse.AvatarManager.AvatarAppearance" /> event occurs when the simulator sends
            the appearance data for an avatar</remarks>
            <example>
            The following code example uses the <see cref="P:OpenMetaverse.AvatarAppearanceEventArgs.AvatarID" /> and <see cref="P:OpenMetaverse.AvatarAppearanceEventArgs.VisualParams" />
            properties to display the selected shape of an avatar on the <see cref="T:System.Console" /> window.
            <code>
            // subscribe to the event
            Client.Avatars.AvatarAppearance += Avatars_AvatarAppearance;
            // handle the data when the event is raised
            void Avatars_AvatarAppearance(object sender, AvatarAppearanceEventArgs e)
            {
            Console.WriteLine("The Agent {0} is using a {1} shape.", e.AvatarID, (e.VisualParams[31] &gt; 0) : "male" ? "female")
            }
            </code></example>
        </member>
        <member name="M:OpenMetaverse.AvatarAppearanceEventArgs.#ctor(OpenMetaverse.Simulator,OpenMetaverse.UUID,System.Boolean,OpenMetaverse.Primitive.TextureEntryFace,OpenMetaverse.Primitive.TextureEntryFace[],System.Collections.Generic.List{System.Byte})">
            <summary>
            Construct a new instance of the AvatarAppearanceEventArgs class
            </summary>
            <param name="sim">The simulator request was from</param>
            <param name="avatarID">The ID of the agent</param>
            <param name="isTrial">true of the agent is a trial account</param>
            <param name="defaultTexture">The default agent texture</param>
            <param name="faceTextures">The agents appearance layer textures</param>
            <param name="visualParams">The <see cref="T:OpenMetaverse.VisualParams" /> for the agent</param>
        </member>
        <member name="P:OpenMetaverse.AvatarAppearanceEventArgs.Simulator">
            <summary>Get the Simulator this request is from of the agent</summary>
        </member>
        <member name="P:OpenMetaverse.AvatarAppearanceEventArgs.AvatarID">
            <summary>Get the ID of the agent</summary>
        </member>
        <member name="P:OpenMetaverse.AvatarAppearanceEventArgs.IsTrial">
            <summary>true if the agent is a trial account</summary>
        </member>
        <member name="P:OpenMetaverse.AvatarAppearanceEventArgs.DefaultTexture">
            <summary>Get the default agent texture</summary>
        </member>
        <member name="P:OpenMetaverse.AvatarAppearanceEventArgs.FaceTextures">
            <summary>Get the agents appearance layer textures</summary>
        </member>
        <member name="P:OpenMetaverse.AvatarAppearanceEventArgs.VisualParams">
            <summary>Get the <see cref="T:OpenMetaverse.VisualParams" /> for the agent</summary>
        </member>
        <member name="T:OpenMetaverse.AvatarInterestsReplyEventArgs">
            <summary>Represents the interests from the profile of an agent</summary>
        </member>
        <member name="P:OpenMetaverse.AvatarInterestsReplyEventArgs.AvatarID">
            <summary>Get the ID of the agent</summary>
        </member>
        <member name="T:OpenMetaverse.AvatarPropertiesReplyEventArgs">
            <summary>The properties of an agent</summary>
        </member>
        <member name="P:OpenMetaverse.AvatarPropertiesReplyEventArgs.AvatarID">
            <summary>Get the ID of the agent</summary>
        </member>
        <member name="P:OpenMetaverse.AvatarGroupsReplyEventArgs.AvatarID">
            <summary>Get the ID of the agent</summary>
        </member>
        <member name="P:OpenMetaverse.AvatarPicksReplyEventArgs.AvatarID">
            <summary>Get the ID of the agent</summary>
        </member>
        <member name="P:OpenMetaverse.AvatarClassifiedReplyEventArgs.AvatarID">
            <summary>Get the ID of the avatar</summary>
        </member>
        <member name="T:OpenMetaverse.BinBVHAnimationReader">
            <summary>
            Reads in a byte array of an Animation Asset created by the SecondLife(tm) client.
            </summary>
        </member>
        <member name="M:OpenMetaverse.BinBVHAnimationReader.#ctor(System.Byte[])">
            <summary>
            Searialize an animation asset into it's joints/keyframes/meta data
            </summary>
            <param name="animationdata">
            </param>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.rotationkeys">
            <summary>
            Rotation Keyframe count (used internally)
            </summary>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.positionkeys">
            <summary>
            Position Keyframe count (used internally)
            </summary>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.Priority">
            <summary>
            Animation Priority
            </summary>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.Length">
            <summary>
            The animation length in seconds.
            </summary>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.ExpressionName">
            <summary>
            Expression set in the client.  Null if [None] is selected
            </summary>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.InPoint">
            <summary>
            The time in seconds to start the animation
            </summary>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.OutPoint">
            <summary>
            The time in seconds to end the animation
            </summary>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.Loop">
            <summary>
            Loop the animation
            </summary>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.EaseInTime">
            <summary>
            Meta data. Ease in Seconds.
            </summary>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.EaseOutTime">
            <summary>
            Meta data. Ease out seconds.
            </summary>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.HandPose">
            <summary>
            Meta Data for the Hand Pose
            </summary>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.JointCount">
            <summary>
            Number of joints defined in the animation
            </summary>
        </member>
        <member name="F:OpenMetaverse.BinBVHAnimationReader.joints">
            <summary>
            Contains an array of joints
            </summary>
        </member>
        <member name="M:OpenMetaverse.BinBVHAnimationReader.ReadBytesUntilNull(System.Byte[],System.Int32@)">
            <summary>
            Variable length strings seem to be null terminated in the animation asset..    but..
            use with caution, home grown.
            advances the index.
            </summary>
            <param name="data">The animation asset byte array</param>
            <param name="i">The offset to start reading</param>
            <returns>a string</returns>
        </member>
        <member name="M:OpenMetaverse.BinBVHAnimationReader.readJoint(System.Byte[],System.Int32@)">
            <summary>
            Read in a Joint from an animation asset byte array
            Variable length Joint fields, yay!
            Advances the index
            </summary>
            <param name="data">animation asset byte array</param>
            <param name="i">Byte Offset of the start of the joint</param>
            <returns>The Joint data serialized into the binBVHJoint structure</returns>
        </member>
        <member name="M:OpenMetaverse.BinBVHAnimationReader.readKeys(System.Byte[],System.Int32@,System.Int32,System.Single,System.Single)">
            <summary>
            Read Keyframes of a certain type
            advance i
            </summary>
            <param name="data">Animation Byte array</param>
            <param name="i">Offset in the Byte Array.  Will be advanced</param>
            <param name="keycount">Number of Keyframes</param>
            <param name="min">Scaling Min to pass to the Uint16ToFloat method</param>
            <param name="max">Scaling Max to pass to the Uint16ToFloat method</param>
            <returns>
            </returns>
        </member>
        <member name="T:OpenMetaverse.binBVHJoint">
            <summary>
            A Joint and it's associated meta data and keyframes
            </summary>
        </member>
        <member name="F:OpenMetaverse.binBVHJoint.Name">
            <summary>
            Name of the Joint.  Matches the avatar_skeleton.xml in client distros
            </summary>
        </member>
        <member name="F:OpenMetaverse.binBVHJoint.Priority">
            <summary>
            Joint Animation Override?   Was the same as the Priority in testing..
            </summary>
        </member>
        <member name="F:OpenMetaverse.binBVHJoint.rotationkeys">
            <summary>
            Array of Rotation Keyframes in order from earliest to latest
            </summary>
        </member>
        <member name="F:OpenMetaverse.binBVHJoint.positionkeys">
            <summary>
            Array of Position Keyframes in order from earliest to latest
            This seems to only be for the Pelvis?
            </summary>
        </member>
        <member name="T:OpenMetaverse.binBVHJointKey">
            <summary>
            A Joint Keyframe.  This is either a position or a rotation.
            </summary>
        </member>
        <member name="F:OpenMetaverse.binBVHJointKey.key_element">
            <summary>
            Either a Vector3 position or a Vector3 Euler rotation
            </summary>
        </member>
        <member name="T:OpenMetaverse.HandPose">
            <summary>
            Poses set in the animation metadata for the hands.
            </summary>
        </member>
        <member name="T:OpenMetaverse.BitPack">
            <summary>
            Wrapper around a byte array that allows bit to be packed and unpacked
            one at a time or by a variable amount. Useful for very tightly packed
            data like LayerData packets
            </summary>
        </member>
        <member name="M:OpenMetaverse.BitPack.#ctor(System.Byte[],System.Int32)">
            <summary>
            Default constructor, initialize the bit packer / bit unpacker
            with a byte array and starting position
            </summary>
            <param name="data">Byte array to pack bits in to or unpack from</param>
            <param name="pos">Starting position in the byte array</param>
        </member>
        <member name="F:OpenMetaverse.BitPack.Data">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.BitPack.BytePos">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.BitPack.BitPos">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.BitPack.PackFloat(System.Single)">
            <summary>
            Pack a floating point value in to the data
            </summary>
            <param name="data">Floating point value to pack</param>
        </member>
        <member name="M:OpenMetaverse.BitPack.PackBits(System.Int32,System.Int32)">
            <summary>
            Pack part or all of an integer in to the data
            </summary>
            <param name="data">Integer containing the data to pack</param>
            <param name="totalCount">Number of bits of the integer to pack</param>
        </member>
        <member name="M:OpenMetaverse.BitPack.PackBits(System.UInt32,System.Int32)">
            <summary>
            Pack part or all of an unsigned integer in to the data
            </summary>
            <param name="data">Unsigned integer containing the data to pack</param>
            <param name="totalCount">Number of bits of the integer to pack</param>
        </member>
        <member name="M:OpenMetaverse.BitPack.PackFixed(System.Single,System.Boolean,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="data">
            </param>
            <param name="isSigned">
            </param>
            <param name="intBits">
            </param>
            <param name="fracBits">
            </param>
        </member>
        <member name="M:OpenMetaverse.BitPack.PackUUID(OpenMetaverse.UUID)">
            <summary>
            </summary>
            <param name="data">
            </param>
        </member>
        <member name="M:OpenMetaverse.BitPack.PackColor(OpenMetaverse.Color4)">
            <summary>
            </summary>
            <param name="data">
            </param>
        </member>
        <member name="M:OpenMetaverse.BitPack.UnpackFloat">
            <summary>
            Unpacking a floating point value from the data
            </summary>
            <returns>Unpacked floating point value</returns>
        </member>
        <member name="M:OpenMetaverse.BitPack.UnpackBits(System.Int32)">
            <summary>
            Unpack a variable number of bits from the data in to integer format
            </summary>
            <param name="totalCount">Number of bits to unpack</param>
            <returns>An integer containing the unpacked bits</returns>
            <remarks>This function is only useful up to 32 bits</remarks>
        </member>
        <member name="M:OpenMetaverse.BitPack.UnpackUBits(System.Int32)">
            <summary>
            Unpack a variable number of bits from the data in to unsigned
            integer format
            </summary>
            <param name="totalCount">Number of bits to unpack</param>
            <returns>An unsigned integer containing the unpacked bits</returns>
            <remarks>This function is only useful up to 32 bits</remarks>
        </member>
        <member name="M:OpenMetaverse.BitPack.UnpackShort">
            <summary>
            Unpack a 16-bit signed integer
            </summary>
            <returns>16-bit signed integer</returns>
        </member>
        <member name="M:OpenMetaverse.BitPack.UnpackUShort">
            <summary>
            Unpack a 16-bit unsigned integer
            </summary>
            <returns>16-bit unsigned integer</returns>
        </member>
        <member name="M:OpenMetaverse.BitPack.UnpackInt">
            <summary>
            Unpack a 32-bit signed integer
            </summary>
            <returns>32-bit signed integer</returns>
        </member>
        <member name="M:OpenMetaverse.BitPack.UnpackUInt">
            <summary>
            Unpack a 32-bit unsigned integer
            </summary>
            <returns>32-bit unsigned integer</returns>
        </member>
        <member name="T:OpenMetaverse.Caps">
            <summary>
            Capabilities is the name of the bi-directional HTTP REST protocol
            used to communicate non real-time transactions such as teleporting or
            group messaging
            </summary>
        </member>
        <member name="M:OpenMetaverse.Caps.#ctor(OpenMetaverse.Simulator,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="simulator">
            </param>
            <param name="seedcaps">
            </param>
        </member>
        <member name="T:OpenMetaverse.Caps.EventQueueCallback">
            <summary>
            Triggered when an event is received via the EventQueueGet
            capability
            </summary>
            <param name="capsKey">Event name</param>
            <param name="message">Decoded event data</param>
            <param name="simulator">The simulator that generated the event</param>
        </member>
        <member name="F:OpenMetaverse.Caps.Simulator">
            <summary>Reference to the simulator this system is connected to</summary>
        </member>
        <member name="P:OpenMetaverse.Caps.SeedCapsURI">
            <summary>Capabilities URI this system was initialized with</summary>
        </member>
        <member name="P:OpenMetaverse.Caps.IsEventQueueRunning">
            <summary>Whether the capabilities event queue is connected and
            listening for incoming events</summary>
        </member>
        <member name="M:OpenMetaverse.Caps.CapabilityURI(System.String)">
            <summary>
            Request the URI of a named capability
            </summary>
            <param name="capability">Name of the capability to request</param>
            <returns>The URI of the requested capability, or String.Empty if
            the capability does not exist</returns>
        </member>
        <member name="M:OpenMetaverse.Caps.EventQueueEventHandler(System.String,OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Process any incoming events, check to see if we have a message created for the event,
            </summary>
            <param name="eventName">
            </param>
            <param name="body">
            </param>
        </member>
        <member name="M:OpenMetaverse.Packets.Packet.BuildPacket(System.String,OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Attempts to convert an LLSD structure to a known Packet type
            </summary>
            <param name="capsEventName">Event name, this must match an actual
            packet name for a Packet to be successfully built</param>
            <param name="body">LLSD to convert to a Packet</param>
            <returns>A Packet on success, otherwise null</returns>
        </member>
        <member name="P:OpenMetaverse.CoordinateFrame.Origin">
            <summary>Origin position of this coordinate frame</summary>
        </member>
        <member name="P:OpenMetaverse.CoordinateFrame.XAxis">
            <summary>X axis of this coordinate frame, or Forward/At in grid terms</summary>
        </member>
        <member name="P:OpenMetaverse.CoordinateFrame.YAxis">
            <summary>Y axis of this coordinate frame, or Left in grid terms</summary>
        </member>
        <member name="P:OpenMetaverse.CoordinateFrame.ZAxis">
            <summary>Z axis of this coordinate frame, or Up in grid terms</summary>
        </member>
        <member name="M:OpenMetaverse.CoordinateFrame.LookDirection(OpenMetaverse.Vector3,OpenMetaverse.Vector3)">
            <summary>
            </summary>
            <param name="at">Looking direction, must be a normalized vector</param>
            <param name="upDirection">Up direction, must be a normalized vector</param>
        </member>
        <member name="M:OpenMetaverse.CoordinateFrame.LookDirection(System.Double)">
            <summary>
            Align the coordinate frame X and Y axis with a given rotation
            around the Z axis in radians
            </summary>
            <param name="heading">Absolute rotation around the Z axis in
            radians</param>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager">
            <summary>
            Access to the data server which allows searching for land, events, people, etc
            </summary>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Constructs a new instance of the DirectoryManager class
            </summary>
            <param name="client">An instance of GridClient</param>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.ClassifiedCategories">
            <summary>Classified Ad categories</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedCategories.Any">
            <summary>Classified is listed in the Any category</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedCategories.Shopping">
            <summary>Classified is shopping related</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedCategories.LandRental">
            <summary>Classified is </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedCategories.PropertyRental">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedCategories.SpecialAttraction">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedCategories.NewProducts">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedCategories.Employment">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedCategories.Wanted">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedCategories.Service">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedCategories.Personal">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.EventCategories">
            <summary>Event Categories</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventCategories.All">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventCategories.Discussion">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventCategories.Sports">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventCategories.LiveMusic">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventCategories.Commercial">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventCategories.Nightlife">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventCategories.Games">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventCategories.Pageants">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventCategories.Education">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventCategories.Arts">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventCategories.Charity">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventCategories.Miscellaneous">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.DirFindFlags">
            <summary>
            Query Flags used in many of the DirectoryManager methods to specify which query to execute and how to return the results.
            Flags can be combined using the | (pipe) character, not all flags are available in all queries
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.People">
            <summary>Query the People database</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.Online">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.Events">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.Groups">
            <summary>Query the Groups database</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.DateEvents">
            <summary>Query the Events database</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.AgentOwned">
            <summary>Query the land holdings database for land owned by the currently connected agent</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.ForSale">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.GroupOwned">
            <summary>Query the land holdings database for land which is owned by a Group</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.DwellSort">
            <summary>Specifies the query should pre sort the results based upon traffic
            when searching the Places database</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.PgSimsOnly">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.PicturesOnly">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.PgEventsOnly">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.MatureSimsOnly">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.SortAsc">
            <summary>Specifies the query should pre sort the results in an ascending order when searching the land sales database.
            This flag is only used when searching the land sales database</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.PricesSort">
            <summary>Specifies the query should pre sort the results using the SalePrice field when searching the land sales database.
            This flag is only used when searching the land sales database</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.PerMeterSort">
            <summary>Specifies the query should pre sort the results by calculating the average price/sq.m (SalePrice / Area) when searching the land sales database.
            This flag is only used when searching the land sales database</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.AreaSort">
            <summary>Specifies the query should pre sort the results using the ParcelSize field when searching the land sales database.
            This flag is only used when searching the land sales database</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.NameSort">
            <summary>Specifies the query should pre sort the results using the Name field when searching the land sales database.
            This flag is only used when searching the land sales database</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.LimitByPrice">
            <summary>When set, only parcels less than the specified Price will be included when searching the land sales database.
            This flag is only used when searching the land sales database</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.LimitByArea">
            <summary>When set, only parcels greater than the specified Size will be included when searching the land sales database.
            This flag is only used when searching the land sales database</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.FilterMature">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.PGOnly">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.IncludePG">
            <summary>Include PG land in results. This flag is used when searching both the Groups, Events and Land sales databases</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.IncludeMature">
            <summary>Include Mature land in results. This flag is used when searching both the Groups, Events and Land sales databases</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.IncludeAdult">
            <summary>Include Adult land in results. This flag is used when searching both the Groups, Events and Land sales databases</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirFindFlags.AdultOnly">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.SearchTypeFlags">
            <summary>
            Land types to search dataserver for
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.SearchTypeFlags.Any">
            <summary>Search Auction, Mainland and Estate</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.SearchTypeFlags.Auction">
            <summary>Land which is currently up for auction</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.SearchTypeFlags.Mainland">
            <summary>Parcels which are on the mainland (Linden owned) continents</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.SearchTypeFlags.Estate">
            <summary>Parcels which are on privately owned simulators</summary>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.EventFlags">
            <summary>
            The content rating of the event
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventFlags.PG">
            <summary>Event is PG</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventFlags.Mature">
            <summary>Event is Mature</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventFlags.Adult">
            <summary>Event is Adult</summary>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.ClassifiedFlags">
            <summary>
            Classified Ad Options
            </summary>
            <remarks>There appear to be two formats the flags are packed in.
            This set of flags is for the newer style</remarks>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedFlags.None">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedFlags.Mature">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedFlags.Enabled">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedFlags.UpdateTime">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedFlags.AutoRenew">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.ClassifiedQueryFlags">
            <summary>
            Classified ad query options
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedQueryFlags.All">
            <summary>Include all ads in results</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedQueryFlags.PG">
            <summary>Include PG ads in results</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedQueryFlags.Mature">
            <summary>Include Mature ads in results</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.ClassifiedQueryFlags.Adult">
            <summary>Include Adult ads in results</summary>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.PlacesFlags">
            <summary>
            The For Sale flag in PlacesReplyData
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.PlacesFlags.NotForSale">
            <summary>Parcel is not listed for sale</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.PlacesFlags.ForSale">
            <summary>Parcel is For Sale</summary>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.Classified">
            <summary>
            A classified ad on the grid
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.Classified.ID">
            <summary>UUID for this ad, useful for looking up detailed
            information about it</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.Classified.Name">
            <summary>The title of this classified ad</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.Classified.Flags">
            <summary>Flags that show certain options applied to the classified</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.Classified.CreationDate">
            <summary>Creation date of the ad</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.Classified.ExpirationDate">
            <summary>Expiration date of the ad</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.Classified.Price">
            <summary>Price that was paid for this ad</summary>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.Classified.ToString">
            <summary>Print the struct data as a string</summary>
            <returns>A string containing the field name, and field value</returns>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.DirectoryParcel">
            <summary>
            A parcel retrieved from the dataserver such as results from the
            "For-Sale" listings or "Places" Search
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirectoryParcel.ID">
            <summary>The unique dataserver parcel ID</summary>
            <remarks>This id is used to obtain additional information from the entry
            by using the <see cref="!:ParcelManager.InfoRequest" /> method</remarks>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirectoryParcel.Name">
            <summary>A string containing the name of the parcel</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirectoryParcel.ActualArea">
            <summary>The size of the parcel</summary>
            <remarks>This field is not returned for Places searches</remarks>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirectoryParcel.SalePrice">
            <summary>The price of the parcel</summary>
            <remarks>This field is not returned for Places searches</remarks>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirectoryParcel.Auction">
            <summary>If True, this parcel is flagged to be auctioned</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirectoryParcel.ForSale">
            <summary>If true, this parcel is currently set for sale</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.DirectoryParcel.Dwell">
            <summary>Parcel traffic</summary>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.DirectoryParcel.ToString">
            <summary>Print the struct data as a string</summary>
            <returns>A string containing the field name, and field value</returns>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.AgentSearchData">
            <summary>
            An Avatar returned from the dataserver
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.AgentSearchData.Online">
            <summary>Online status of agent</summary>
            <remarks>This field appears to be obsolete and always returns false</remarks>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.AgentSearchData.FirstName">
            <summary>The agents first name</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.AgentSearchData.LastName">
            <summary>The agents last name</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.AgentSearchData.AgentID">
            <summary>The agents <see cref="T:OpenMetaverse.UUID" /></summary>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.AgentSearchData.ToString">
            <summary>Print the struct data as a string</summary>
            <returns>A string containing the field name, and field value</returns>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.GroupSearchData">
            <summary>
            Response to a "Groups" Search
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.GroupSearchData.GroupID">
            <summary>The Group ID</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.GroupSearchData.GroupName">
            <summary>The name of the group</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.GroupSearchData.Members">
            <summary>The current number of members</summary>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.GroupSearchData.ToString">
            <summary>Print the struct data as a string</summary>
            <returns>A string containing the field name, and field value</returns>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.PlacesSearchData">
            <summary>
            Parcel information returned from a <see cref="M:OpenMetaverse.DirectoryManager.StartPlacesSearch(OpenMetaverse.DirectoryManager.DirFindFlags,OpenMetaverse.ParcelCategory,System.String,System.String,OpenMetaverse.UUID,OpenMetaverse.UUID)" /> request
            <para>
            Represents one of the following:
            A parcel of land on the grid that has its Show In Search flag set
            A parcel of land owned by the agent making the request
            A parcel of land owned by a group the agent making the request is a member of
            </para><para>
            In a request for Group Land, the First record will contain an empty record
            </para>
            Note: This is not the same as searching the land for sale data source
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.PlacesSearchData.OwnerID">
            <summary>The ID of the Agent of Group that owns the parcel</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.PlacesSearchData.Name">
            <summary>The name</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.PlacesSearchData.Desc">
            <summary>The description</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.PlacesSearchData.ActualArea">
            <summary>The Size of the parcel</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.PlacesSearchData.BillableArea">
            <summary>The billable Size of the parcel, for mainland
            parcels this will match the ActualArea field. For Group owned land this will be 10 percent smaller
            than the ActualArea. For Estate land this will always be 0</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.PlacesSearchData.Flags">
            <summary>Indicates the ForSale status of the parcel</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.PlacesSearchData.GlobalX">
            <summary>The Gridwide X position</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.PlacesSearchData.GlobalY">
            <summary>The Gridwide Y position</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.PlacesSearchData.GlobalZ">
            <summary>The Z position of the parcel, or 0 if no landing point set</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.PlacesSearchData.SimName">
            <summary>The name of the Region the parcel is located in</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.PlacesSearchData.SnapshotID">
            <summary>The Asset ID of the parcels Snapshot texture</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.PlacesSearchData.Dwell">
            <summary>The calculated visitor traffic</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.PlacesSearchData.SKU">
            <summary>The billing product SKU</summary>
            <remarks>Known values are:
            <list type="table"><item><term>023</term><description>Mainland / Full Region</description></item><item><term>024</term><description>Estate / Full Region</description></item><item><term>027</term><description>Estate / Openspace</description></item><item><term>029</term><description>Estate / Homestead</description></item><item><term>129</term><description>Mainland / Homestead (Linden Owned)</description></item></list></remarks>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.PlacesSearchData.Price">
            <summary>No longer used, will always be 0</summary>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.PlacesSearchData.ToSLurl">
            <summary>Get a SL URL for the parcel</summary>
            <returns>A string, containing a standard SLURL</returns>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.PlacesSearchData.ToString">
            <summary>Print the struct data as a string</summary>
            <returns>A string containing the field name, and field value</returns>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.EventsSearchData">
            <summary>
            An "Event" Listing summary
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventsSearchData.Owner">
            <summary>The ID of the event creator</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventsSearchData.Name">
            <summary>The name of the event</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventsSearchData.ID">
            <summary>The events ID</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventsSearchData.Date">
            <summary>A string containing the short date/time the event will begin</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventsSearchData.Time">
            <summary>The event start time in Unixtime (seconds since epoch)</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventsSearchData.Flags">
            <summary>The events maturity rating</summary>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.EventsSearchData.ToString">
            <summary>Print the struct data as a string</summary>
            <returns>A string containing the field name, and field value</returns>
        </member>
        <member name="T:OpenMetaverse.DirectoryManager.EventInfo">
            <summary>
            The details of an "Event"
            </summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventInfo.ID">
            <summary>The events ID</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventInfo.Creator">
            <summary>The ID of the event creator</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventInfo.Name">
            <summary>The name of the event</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventInfo.Category">
            <summary>The category</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventInfo.Desc">
            <summary>The events description</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventInfo.Date">
            <summary>The short date/time the event will begin</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventInfo.DateUTC">
            <summary>The event start time in Unixtime (seconds since epoch) UTC adjusted</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventInfo.Duration">
            <summary>The length of the event in minutes</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventInfo.Cover">
            <summary>0 if no cover charge applies</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventInfo.Amount">
            <summary>The cover charge amount in L$ if applicable</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventInfo.SimName">
            <summary>The name of the region where the event is being held</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventInfo.GlobalPos">
            <summary>The gridwide location of the event</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.EventInfo.Flags">
            <summary>The maturity rating</summary>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.EventInfo.ToSLurl">
            <summary>Get a SL URL for the parcel where the event is hosted</summary>
            <returns>A string, containing a standard SLURL</returns>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.EventInfo.ToString">
            <summary>Print the struct data as a string</summary>
            <returns>A string containing the field name, and field value</returns>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.m_EventInfoReply">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.m_EventDetailLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.m_DirEvents">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.m_DirEventsLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.m_Places">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.m_PlacesLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.m_DirPlaces">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.m_DirPlacesLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.m_DirClassifieds">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.m_DirClassifiedsLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.m_DirGroups">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.m_DirGroupsLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.m_DirPeople">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.m_DirPeopleLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.m_DirLandReply">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.DirectoryManager.m_DirLandLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="E:OpenMetaverse.DirectoryManager.EventInfoReply">
            <summary>Raised when the data server responds to a <see cref="M:OpenMetaverse.DirectoryManager.EventInfoRequest(System.UInt32)" /> request.</summary>
        </member>
        <member name="E:OpenMetaverse.DirectoryManager.DirEventsReply">
            <summary>Raised when the data server responds to a <see cref="M:OpenMetaverse.DirectoryManager.StartEventsSearch(System.String,OpenMetaverse.DirectoryManager.DirFindFlags,System.String,System.UInt32,OpenMetaverse.DirectoryManager.EventCategories)" /> request.</summary>
        </member>
        <member name="E:OpenMetaverse.DirectoryManager.PlacesReply">
            <summary>Raised when the data server responds to a <see cref="M:OpenMetaverse.DirectoryManager.StartPlacesSearch(OpenMetaverse.DirectoryManager.DirFindFlags,OpenMetaverse.ParcelCategory,System.String,System.String,OpenMetaverse.UUID,OpenMetaverse.UUID)" /> request.</summary>
        </member>
        <member name="E:OpenMetaverse.DirectoryManager.DirPlacesReply">
            <summary>Raised when the data server responds to a <see cref="M:OpenMetaverse.DirectoryManager.StartDirPlacesSearch(System.String,OpenMetaverse.DirectoryManager.DirFindFlags,OpenMetaverse.ParcelCategory,System.Int32)" /> request.</summary>
        </member>
        <member name="E:OpenMetaverse.DirectoryManager.DirClassifiedsReply">
            <summary>Raised when the data server responds to a <see cref="M:OpenMetaverse.DirectoryManager.StartClassifiedSearch(System.String,OpenMetaverse.DirectoryManager.ClassifiedCategories,OpenMetaverse.DirectoryManager.ClassifiedQueryFlags)" /> request.</summary>
        </member>
        <member name="E:OpenMetaverse.DirectoryManager.DirGroupsReply">
            <summary>Raised when the data server responds to a <see cref="M:OpenMetaverse.DirectoryManager.StartGroupSearch(System.String,System.Int32,OpenMetaverse.DirectoryManager.DirFindFlags)" /> request.</summary>
        </member>
        <member name="E:OpenMetaverse.DirectoryManager.DirPeopleReply">
            <summary>Raised when the data server responds to a <see cref="M:OpenMetaverse.DirectoryManager.StartPeopleSearch(System.String,System.Int32)" /> request.</summary>
        </member>
        <member name="E:OpenMetaverse.DirectoryManager.DirLandReply">
            <summary>Raised when the data server responds to a <see cref="M:OpenMetaverse.DirectoryManager.StartLandSearch(OpenMetaverse.DirectoryManager.DirFindFlags,OpenMetaverse.DirectoryManager.SearchTypeFlags,System.Int32,System.Int32,System.Int32)" /> request.</summary>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.OnEventInfo(OpenMetaverse.EventInfoReplyEventArgs)">
            <summary>Raises the EventInfoReply event</summary>
            <param name="e">An EventInfoReplyEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.OnDirEvents(OpenMetaverse.DirEventsReplyEventArgs)">
            <summary>Raises the DirEventsReply event</summary>
            <param name="e">An DirEventsReplyEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.OnPlaces(OpenMetaverse.PlacesReplyEventArgs)">
            <summary>Raises the PlacesReply event</summary>
            <param name="e">A PlacesReplyEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.OnDirPlaces(OpenMetaverse.DirPlacesReplyEventArgs)">
            <summary>Raises the DirPlacesReply event</summary>
            <param name="e">A DirPlacesReplyEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.OnDirClassifieds(OpenMetaverse.DirClassifiedsReplyEventArgs)">
            <summary>Raises the DirClassifiedsReply event</summary>
            <param name="e">A DirClassifiedsReplyEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.OnDirGroups(OpenMetaverse.DirGroupsReplyEventArgs)">
            <summary>Raises the DirGroupsReply event</summary>
            <param name="e">A DirGroupsReplyEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.OnDirPeople(OpenMetaverse.DirPeopleReplyEventArgs)">
            <summary>Raises the DirPeopleReply event</summary>
            <param name="e">A DirPeopleReplyEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.OnDirLand(OpenMetaverse.DirLandReplyEventArgs)">
            <summary>Raises the DirLandReply event</summary>
            <param name="e">A DirLandReplyEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartClassifiedSearch(System.String)">
            <summary>
            Query the data server for a list of classified ads containing the specified string.
            Defaults to searching for classified placed in any category, and includes PG, Adult and Mature
            results.
            Responses are sent 16 per response packet, there is no way to know how many results a query reply will contain however assuming
            the reply packets arrived ordered, a response with less than 16 entries would indicate all results have been received
            The <see cref="!:OnClassifiedReply" /> event is raised when a response is received from the simulator
            </summary>
            <param name="searchText">A string containing a list of keywords to search for</param>
            <returns>A UUID to correlate the results when the <see cref="!:OnClassifiedReply" /> event is raised</returns>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartClassifiedSearch(System.String,OpenMetaverse.DirectoryManager.ClassifiedCategories,OpenMetaverse.DirectoryManager.ClassifiedQueryFlags)">
            <summary>
            Query the data server for a list of classified ads which contain specified keywords (Overload)
            The <see cref="!:OnClassifiedReply" /> event is raised when a response is received from the simulator
            </summary>
            <param name="searchText">A string containing a list of keywords to search for</param>
            <param name="category">The category to search</param>
            <param name="queryFlags">A set of flags which can be ORed to modify query options
            such as classified maturity rating.</param>
            <returns>A UUID to correlate the results when the <see cref="!:OnClassifiedReply" /> event is raised</returns>
            <example>
            Search classified ads containing the key words "foo" and "bar" in the "Any" category that are either PG or Mature
            <code>
            UUID searchID = StartClassifiedSearch("foo bar", ClassifiedCategories.Any, ClassifiedQueryFlags.PG | ClassifiedQueryFlags.Mature);
            </code></example>
            <remarks>
            Responses are sent 16 at a time, there is no way to know how many results a query reply will contain however assuming
            the reply packets arrived ordered, a response with less than 16 entries would indicate all results have been received
            </remarks>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartDirPlacesSearch(System.String,System.Int32)">
            <summary>
            Starts search for places (Overloaded)
            The <see cref="!:OnDirPlacesReply" /> event is raised when a response is received from the simulator
            </summary>
            <param name="searchText">Search text</param>
            <param name="queryStart">Each request is limited to 100 places
            being returned. To get the first 100 result entries of a request use 0,
            from 100-199 use 1, 200-299 use 2, etc.</param>
            <returns>A UUID to correlate the results when the <see cref="!:OnDirPlacesReply" /> event is raised</returns>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartDirPlacesSearch(System.String,OpenMetaverse.DirectoryManager.DirFindFlags,OpenMetaverse.ParcelCategory,System.Int32)">
            <summary>
            Queries the dataserver for parcels of land which are flagged to be shown in search
            The <see cref="!:OnDirPlacesReply" /> event is raised when a response is received from the simulator
            </summary>
            <param name="searchText">A string containing a list of keywords to search for separated by a space character</param>
            <param name="queryFlags">A set of flags which can be ORed to modify query options
            such as classified maturity rating.</param>
            <param name="category">The category to search</param>
            <param name="queryStart">Each request is limited to 100 places
            being returned. To get the first 100 result entries of a request use 0,
            from 100-199 use 1, 200-299 use 2, etc.</param>
            <returns>A UUID to correlate the results when the <see cref="!:OnDirPlacesReply" /> event is raised</returns>
            <example>
            Search places containing the key words "foo" and "bar" in the "Any" category that are either PG or Adult
            <code>
            UUID searchID = StartDirPlacesSearch("foo bar", DirFindFlags.DwellSort | DirFindFlags.IncludePG | DirFindFlags.IncludeAdult, ParcelCategory.Any, 0);
            </code></example>
            <remarks>
            Additional information on the results can be obtained by using the ParcelManager.InfoRequest method
            </remarks>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartLandSearch(OpenMetaverse.DirectoryManager.SearchTypeFlags)">
            <summary>
            Starts a search for land sales using the directory
            The <see cref="!:OnDirLandReply" /> event is raised when a response is received from the simulator
            </summary>
            <param name="typeFlags">What type of land to search for. Auction,
            estate, mainland, "first land", etc</param>
            <remarks>The OnDirLandReply event handler must be registered before
            calling this function. There is no way to determine how many
            results will be returned, or how many times the callback will be
            fired other than you won't get more than 100 total parcels from
            each query.</remarks>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartLandSearch(OpenMetaverse.DirectoryManager.SearchTypeFlags,System.Int32,System.Int32,System.Int32)">
            <summary>
            Starts a search for land sales using the directory
            The <seealso cref="!:OnDirLandReply" /> event is raised when a response is received from the simulator
            </summary>
            <param name="typeFlags">What type of land to search for. Auction,
            estate, mainland, "first land", etc</param>
            <param name="priceLimit">Maximum price to search for</param>
            <param name="areaLimit">Maximum area to search for</param>
            <param name="queryStart">Each request is limited to 100 parcels
            being returned. To get the first 100 parcels of a request use 0,
            from 100-199 use 1, 200-299 use 2, etc.</param>
            <remarks>The OnDirLandReply event handler must be registered before
            calling this function. There is no way to determine how many
            results will be returned, or how many times the callback will be
            fired other than you won't get more than 100 total parcels from
            each query.</remarks>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartLandSearch(OpenMetaverse.DirectoryManager.DirFindFlags,OpenMetaverse.DirectoryManager.SearchTypeFlags,System.Int32,System.Int32,System.Int32)">
            <summary>
            Send a request to the data server for land sales listings
            </summary>
            <param name="findFlags">Flags sent to specify query options
            Available flags:
            Specify the parcel rating with one or more of the following:
            IncludePG IncludeMature IncludeAdult
            Specify the field to pre sort the results with ONLY ONE of the following:
            PerMeterSort NameSort AreaSort PricesSort
            Specify the order the results are returned in, if not specified the results are pre sorted in a Descending Order
            SortAsc
            Specify additional filters to limit the results with one or both of the following:
            LimitByPrice LimitByArea
            Flags can be combined by separating them with the | (pipe) character
            Additional details can be found in <see cref="T:OpenMetaverse.DirectoryManager.DirFindFlags" /></param>
            <param name="typeFlags">What type of land to search for. Auction,
            Estate or Mainland</param>
            <param name="priceLimit">Maximum price to search for when the
            DirFindFlags.LimitByPrice flag is specified in findFlags</param>
            <param name="areaLimit">Maximum area to search for when the
            DirFindFlags.LimitByArea flag is specified in findFlags</param>
            <param name="queryStart">Each request is limited to 100 parcels
            being returned. To get the first 100 parcels of a request use 0,
            from 100-199 use 100, 200-299 use 200, etc.</param>
            <remarks>
                <para>The <seealso cref="!:OnDirLandReply" /> event will be raised with the response from the simulator
            There is no way to determine how many results will be returned, or how many times the callback will be
            fired other than you won't get more than 100 total parcels from
            each reply.</para>
                <para>Any land set for sale to either anybody or specific to the connected agent will be included in the
            results if the land is included in the query</para>
            </remarks>
            <example>
                <code>
            // request all mainland, any maturity rating that is larger than 512 sq.m
            StartLandSearch(DirFindFlags.SortAsc | DirFindFlags.PerMeterSort | DirFindFlags.LimitByArea | DirFindFlags.IncludePG | DirFindFlags.IncludeMature | DirFindFlags.IncludeAdult, SearchTypeFlags.Mainland, 0, 512, 0);
            </code>
            </example>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartGroupSearch(System.String,System.Int32)">
            <summary>
            Search for Groups
            </summary>
            <param name="searchText">The name or portion of the name of the group you wish to search for</param>
            <param name="queryStart">Start from the match number</param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartGroupSearch(System.String,System.Int32,OpenMetaverse.DirectoryManager.DirFindFlags)">
            <summary>
            Search for Groups
            </summary>
            <param name="searchText">The name or portion of the name of the group you wish to search for</param>
            <param name="queryStart">Start from the match number</param>
            <param name="flags">Search flags</param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartPeopleSearch(System.String,System.Int32)">
            <summary>
            Search the People directory for other avatars
            </summary>
            <param name="searchText">The name or portion of the name of the avatar you wish to search for</param>
            <param name="queryStart">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartPlacesSearch">
            <summary>
            Search Places for parcels of land you personally own
            </summary>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartPlacesSearch(OpenMetaverse.UUID)">
            <summary>
            Searches Places for land owned by the specified group
            </summary>
            <param name="groupID">ID of the group you want to recieve land list for (You must be a member of the group)</param>
            <returns>Transaction (Query) ID which can be associated with results from your request.</returns>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartPlacesSearch(System.String)">
            <summary>
            Search the Places directory for parcels that are listed in search and contain the specified keywords
            </summary>
            <param name="searchText">A string containing the keywords to search for</param>
            <returns>Transaction (Query) ID which can be associated with results from your request.</returns>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartPlacesSearch(OpenMetaverse.DirectoryManager.DirFindFlags,OpenMetaverse.ParcelCategory,System.String,System.String,OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>
            Search Places - All Options
            </summary>
            <param name="findFlags">One of the Values from the DirFindFlags struct, ie: AgentOwned, GroupOwned, etc.</param>
            <param name="searchCategory">One of the values from the SearchCategory Struct, ie: Any, Linden, Newcomer</param>
            <param name="searchText">A string containing a list of keywords to search for separated by a space character</param>
            <param name="simulatorName">String Simulator Name to search in</param>
            <param name="groupID">LLUID of group you want to recieve results for</param>
            <param name="transactionID">Transaction (Query) ID which can be associated with results from your request.</param>
            <returns>Transaction (Query) ID which can be associated with results from your request.</returns>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartEventsSearch(System.String,System.UInt32)">
            <summary>
            Search All Events with specifid searchText in all categories, includes PG, Mature and Adult
            </summary>
            <param name="searchText">A string containing a list of keywords to search for separated by a space character</param>
            <param name="queryStart">Each request is limited to 100 entries
            being returned. To get the first group of entries of a request use 0,
            from 100-199 use 100, 200-299 use 200, etc.</param>
            <returns>UUID of query to correlate results in callback.</returns>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.StartEventsSearch(System.String,OpenMetaverse.DirectoryManager.DirFindFlags,System.String,System.UInt32,OpenMetaverse.DirectoryManager.EventCategories)">
            <summary>
            Search Events
            </summary>
            <param name="searchText">A string containing a list of keywords to search for separated by a space character</param>
            <param name="queryFlags">One or more of the following flags: DateEvents, IncludePG, IncludeMature, IncludeAdult
            from the <see cref="T:OpenMetaverse.DirectoryManager.DirFindFlags" /> Enum
            Multiple flags can be combined by separating the flags with the | (pipe) character</param>
            <param name="eventDay">"u" for in-progress and upcoming events, -or- number of days since/until event is scheduled
            For example "0" = Today, "1" = tomorrow, "2" = following day, "-1" = yesterday, etc.</param>
            <param name="queryStart">Each request is limited to 100 entries
            being returned. To get the first group of entries of a request use 0,
            from 100-199 use 100, 200-299 use 200, etc.</param>
            <param name="category">EventCategory event is listed under.</param>
            <returns>UUID of query to correlate results in callback.</returns>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.EventInfoRequest(System.UInt32)">
            <summary>Requests Event Details</summary>
            <param name="eventID">ID of Event returned from the <see cref="M:OpenMetaverse.DirectoryManager.StartEventsSearch(System.String,OpenMetaverse.DirectoryManager.DirFindFlags,System.String,System.UInt32,OpenMetaverse.DirectoryManager.EventCategories)" /> method</param>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.DirClassifiedReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.DirLandReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.DirLandReplyEventHandler(System.String,OpenMetaverse.Interfaces.IMessage,OpenMetaverse.Simulator)">
            <summary>Process an incoming <see cref="T:OpenMetaverse.Messages.Linden.DirLandReplyMessage" /> event message</summary>
            <param name="capsKey">The Unique Capabilities Key</param>
            <param name="message">The <see cref="T:OpenMetaverse.Messages.Linden.DirLandReplyMessage" /> event message containing the data</param>
            <param name="simulator">The simulator the message originated from</param>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.DirPeopleReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.DirGroupsReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.PlacesReplyEventHandler(System.String,OpenMetaverse.Interfaces.IMessage,OpenMetaverse.Simulator)">
            <summary>Process an incoming <see cref="T:OpenMetaverse.Messages.Linden.PlacesReplyMessage" /> event message</summary>
            <param name="capsKey">The Unique Capabilities Key</param>
            <param name="message">The <see cref="T:OpenMetaverse.Messages.Linden.PlacesReplyMessage" /> event message containing the data</param>
            <param name="simulator">The simulator the message originated from</param>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.PlacesReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.EventsReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.EventInfoReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.DirectoryManager.DirPlacesReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="T:OpenMetaverse.EventInfoReplyEventArgs">
            <summary>Contains the Event data returned from the data server from an EventInfoRequest</summary>
        </member>
        <member name="M:OpenMetaverse.EventInfoReplyEventArgs.#ctor(OpenMetaverse.DirectoryManager.EventInfo)">
            <summary>Construct a new instance of the EventInfoReplyEventArgs class</summary>
            <param name="matchedEvent">A single EventInfo object containing the details of an event</param>
        </member>
        <member name="P:OpenMetaverse.EventInfoReplyEventArgs.MatchedEvent">
            <summary>
            A single EventInfo object containing the details of an event
            </summary>
        </member>
        <member name="T:OpenMetaverse.DirEventsReplyEventArgs">
            <summary>Contains the "Event" detail data returned from the data server</summary>
        </member>
        <member name="M:OpenMetaverse.DirEventsReplyEventArgs.#ctor(OpenMetaverse.UUID,System.Collections.Generic.List{OpenMetaverse.DirectoryManager.EventsSearchData})">
            <summary>Construct a new instance of the DirEventsReplyEventArgs class</summary>
            <param name="queryID">The ID of the query returned by the data server.
            This will correlate to the ID returned by the <see cref="!:StartEventsSearch" /> method</param>
            <param name="matchedEvents">A list containing the "Events" returned by the search query</param>
        </member>
        <member name="P:OpenMetaverse.DirEventsReplyEventArgs.QueryID">
            <summary>The ID returned by <see cref="M:OpenMetaverse.DirectoryManager.StartEventsSearch(System.String,OpenMetaverse.DirectoryManager.DirFindFlags,System.String,System.UInt32,OpenMetaverse.DirectoryManager.EventCategories)" /></summary>
        </member>
        <member name="P:OpenMetaverse.DirEventsReplyEventArgs.MatchedEvents">
            <summary>A list of "Events" returned by the data server</summary>
        </member>
        <member name="T:OpenMetaverse.PlacesReplyEventArgs">
            <summary>Contains the "Event" list data returned from the data server</summary>
        </member>
        <member name="M:OpenMetaverse.PlacesReplyEventArgs.#ctor(OpenMetaverse.UUID,System.Collections.Generic.List{OpenMetaverse.DirectoryManager.PlacesSearchData})">
            <summary>Construct a new instance of PlacesReplyEventArgs class</summary>
            <param name="queryID">The ID of the query returned by the data server.
            This will correlate to the ID returned by the <see cref="!:StartPlacesSearch" /> method</param>
            <param name="matchedPlaces">A list containing the "Places" returned by the data server query</param>
        </member>
        <member name="P:OpenMetaverse.PlacesReplyEventArgs.QueryID">
            <summary>The ID returned by <see cref="M:OpenMetaverse.DirectoryManager.StartPlacesSearch(OpenMetaverse.DirectoryManager.DirFindFlags,OpenMetaverse.ParcelCategory,System.String,System.String,OpenMetaverse.UUID,OpenMetaverse.UUID)" /></summary>
        </member>
        <member name="P:OpenMetaverse.PlacesReplyEventArgs.MatchedPlaces">
            <summary>A list of "Places" returned by the data server</summary>
        </member>
        <member name="T:OpenMetaverse.DirPlacesReplyEventArgs">
            <summary>Contains the places data returned from the data server</summary>
        </member>
        <member name="M:OpenMetaverse.DirPlacesReplyEventArgs.#ctor(OpenMetaverse.UUID,System.Collections.Generic.List{OpenMetaverse.DirectoryManager.DirectoryParcel})">
            <summary>Construct a new instance of the DirPlacesReplyEventArgs class</summary>
            <param name="queryID">The ID of the query returned by the data server.
            This will correlate to the ID returned by the <see cref="!:StartDirPlacesSearch" /> method</param>
            <param name="matchedParcels">A list containing land data returned by the data server</param>
        </member>
        <member name="P:OpenMetaverse.DirPlacesReplyEventArgs.QueryID">
            <summary>The ID returned by <see cref="M:OpenMetaverse.DirectoryManager.StartDirPlacesSearch(System.String,OpenMetaverse.DirectoryManager.DirFindFlags,OpenMetaverse.ParcelCategory,System.Int32)" /></summary>
        </member>
        <member name="P:OpenMetaverse.DirPlacesReplyEventArgs.MatchedParcels">
            <summary>A list containing Places data returned by the data server</summary>
        </member>
        <member name="T:OpenMetaverse.DirClassifiedsReplyEventArgs">
            <summary>Contains the classified data returned from the data server</summary>
        </member>
        <member name="M:OpenMetaverse.DirClassifiedsReplyEventArgs.#ctor(System.Collections.Generic.List{OpenMetaverse.DirectoryManager.Classified})">
            <summary>Construct a new instance of the DirClassifiedsReplyEventArgs class</summary>
            <param name="classifieds">A list of classified ad data returned from the data server</param>
        </member>
        <member name="P:OpenMetaverse.DirClassifiedsReplyEventArgs.Classifieds">
            <summary>A list containing Classified Ads returned by the data server</summary>
        </member>
        <member name="T:OpenMetaverse.DirGroupsReplyEventArgs">
            <summary>Contains the group data returned from the data server</summary>
        </member>
        <member name="M:OpenMetaverse.DirGroupsReplyEventArgs.#ctor(OpenMetaverse.UUID,System.Collections.Generic.List{OpenMetaverse.DirectoryManager.GroupSearchData})">
            <summary>Construct a new instance of the DirGroupsReplyEventArgs class</summary>
            <param name="queryID">The ID of the query returned by the data server.
            This will correlate to the ID returned by the <see cref="!:StartGroupSearch" /> method</param>
            <param name="matchedGroups">A list of groups data returned by the data server</param>
        </member>
        <member name="P:OpenMetaverse.DirGroupsReplyEventArgs.QueryID">
            <summary>The ID returned by <see cref="M:OpenMetaverse.DirectoryManager.StartGroupSearch(System.String,System.Int32,OpenMetaverse.DirectoryManager.DirFindFlags)" /></summary>
        </member>
        <member name="P:OpenMetaverse.DirGroupsReplyEventArgs.MatchedGroups">
            <summary>A list containing Groups data returned by the data server</summary>
        </member>
        <member name="T:OpenMetaverse.DirPeopleReplyEventArgs">
            <summary>Contains the people data returned from the data server</summary>
        </member>
        <member name="M:OpenMetaverse.DirPeopleReplyEventArgs.#ctor(OpenMetaverse.UUID,System.Collections.Generic.List{OpenMetaverse.DirectoryManager.AgentSearchData})">
            <summary>Construct a new instance of the DirPeopleReplyEventArgs class</summary>
            <param name="queryID">The ID of the query returned by the data server.
            This will correlate to the ID returned by the <see cref="!:StartPeopleSearch" /> method</param>
            <param name="matchedPeople">A list of people data returned by the data server</param>
        </member>
        <member name="P:OpenMetaverse.DirPeopleReplyEventArgs.QueryID">
            <summary>The ID returned by <see cref="M:OpenMetaverse.DirectoryManager.StartPeopleSearch(System.String,System.Int32)" /></summary>
        </member>
        <member name="P:OpenMetaverse.DirPeopleReplyEventArgs.MatchedPeople">
            <summary>A list containing People data returned by the data server</summary>
        </member>
        <member name="T:OpenMetaverse.DirLandReplyEventArgs">
            <summary>Contains the land sales data returned from the data server</summary>
        </member>
        <member name="M:OpenMetaverse.DirLandReplyEventArgs.#ctor(System.Collections.Generic.List{OpenMetaverse.DirectoryManager.DirectoryParcel})">
            <summary>Construct a new instance of the DirLandReplyEventArgs class</summary>
            <param name="dirParcels">A list of parcels for sale returned by the data server</param>
        </member>
        <member name="P:OpenMetaverse.DirLandReplyEventArgs.DirParcels">
            <summary>A list containing land forsale data returned by the data server</summary>
        </member>
        <member name="T:OpenMetaverse.EstateTask">
            <summary>Describes tasks returned in LandStatReply</summary>
        </member>
        <member name="T:OpenMetaverse.EstateTools">
            <summary>
            Estate level administration and utilities
            </summary>
        </member>
        <member name="M:OpenMetaverse.EstateTools.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Constructor for EstateTools class
            </summary>
            <param name="client">
            </param>
        </member>
        <member name="T:OpenMetaverse.EstateTools.LandStatReportType">
            <summary>Used in the ReportType field of a LandStatRequest</summary>
        </member>
        <member name="T:OpenMetaverse.EstateTools.EstateAccessDelta">
            <summary>Used by EstateOwnerMessage packets</summary>
        </member>
        <member name="T:OpenMetaverse.EstateTools.EstateAccessReplyDelta">
            <summary>Used by EstateOwnerMessage packets</summary>
        </member>
        <member name="T:OpenMetaverse.EstateTools.EstateReturnFlags">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.EstateTools.EstateReturnFlags.None">
            <summary>No flags set</summary>
        </member>
        <member name="F:OpenMetaverse.EstateTools.EstateReturnFlags.ReturnScripted">
            <summary>Only return targets scripted objects</summary>
        </member>
        <member name="F:OpenMetaverse.EstateTools.EstateReturnFlags.ReturnOnOthersLand">
            <summary>Only return targets objects if on others land</summary>
        </member>
        <member name="F:OpenMetaverse.EstateTools.EstateReturnFlags.ReturnScriptedAndOnOthers">
            <summary>Returns target's scripted objects and objects on other parcels</summary>
        </member>
        <member name="T:OpenMetaverse.EstateTools.GroundTextureSettings">
            <summary>Ground texture settings for each corner of the region</summary>
        </member>
        <member name="T:OpenMetaverse.EstateTools.GroundTextureHeight">
            <summary>Used by GroundTextureHeightSettings</summary>
        </member>
        <member name="T:OpenMetaverse.EstateTools.GroundTextureHeightSettings">
            <summary>The high and low texture thresholds for each corner of the sim</summary>
        </member>
        <member name="F:OpenMetaverse.EstateTools.GroundTextures">
            <summary>Textures for each of the four terrain height levels</summary>
        </member>
        <member name="F:OpenMetaverse.EstateTools.GroundTextureLimits">
            <summary>Upper/lower texture boundaries for each corner of the sim</summary>
        </member>
        <member name="F:OpenMetaverse.EstateTools.m_TopCollidersReply">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.EstateTools.m_TopCollidersReply_Lock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.EstateTools.m_TopScriptsReply">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.EstateTools.m_TopScriptsReply_Lock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.EstateTools.m_EstateUsersReply">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.EstateTools.m_EstateUsersReply_Lock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.EstateTools.m_EstateGroupsReply">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.EstateTools.m_EstateGroupsReply_Lock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.EstateTools.m_EstateManagersReply">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.EstateTools.m_EstateManagersReply_Lock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.EstateTools.m_EstateBansReply">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.EstateTools.m_EstateBansReply_Lock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.EstateTools.m_EstateCovenantReply">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.EstateTools.m_EstateCovenantReply_Lock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.EstateTools.m_EstateUpdateInfoReply">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.EstateTools.m_EstateUpdateInfoReply_Lock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="E:OpenMetaverse.EstateTools.TopCollidersReply">
            <summary>Raised when the data server responds to a <see cref="M:OpenMetaverse.EstateTools.LandStatRequest(System.Int32,OpenMetaverse.EstateTools.LandStatReportType,System.UInt32,System.String)" /> request.</summary>
        </member>
        <member name="E:OpenMetaverse.EstateTools.TopScriptsReply">
            <summary>Raised when the data server responds to a <see cref="M:OpenMetaverse.EstateTools.LandStatRequest(System.Int32,OpenMetaverse.EstateTools.LandStatReportType,System.UInt32,System.String)" /> request.</summary>
        </member>
        <member name="E:OpenMetaverse.EstateTools.EstateUsersReply">
            <summary>Raised when the data server responds to a <see cref="M:OpenMetaverse.EstateTools.LandStatRequest(System.Int32,OpenMetaverse.EstateTools.LandStatReportType,System.UInt32,System.String)" /> request.</summary>
        </member>
        <member name="E:OpenMetaverse.EstateTools.EstateGroupsReply">
            <summary>Raised when the data server responds to a <see cref="M:OpenMetaverse.EstateTools.LandStatRequest(System.Int32,OpenMetaverse.EstateTools.LandStatReportType,System.UInt32,System.String)" /> request.</summary>
        </member>
        <member name="E:OpenMetaverse.EstateTools.EstateManagersReply">
            <summary>Raised when the data server responds to a <see cref="M:OpenMetaverse.EstateTools.LandStatRequest(System.Int32,OpenMetaverse.EstateTools.LandStatReportType,System.UInt32,System.String)" /> request.</summary>
        </member>
        <member name="E:OpenMetaverse.EstateTools.EstateBansReply">
            <summary>Raised when the data server responds to a <see cref="M:OpenMetaverse.EstateTools.LandStatRequest(System.Int32,OpenMetaverse.EstateTools.LandStatReportType,System.UInt32,System.String)" /> request.</summary>
        </member>
        <member name="E:OpenMetaverse.EstateTools.EstateCovenantReply">
            <summary>Raised when the data server responds to a <see cref="M:OpenMetaverse.EstateTools.LandStatRequest(System.Int32,OpenMetaverse.EstateTools.LandStatReportType,System.UInt32,System.String)" /> request.</summary>
        </member>
        <member name="E:OpenMetaverse.EstateTools.EstateUpdateInfoReply">
            <summary>Raised when the data server responds to a <see cref="M:OpenMetaverse.EstateTools.LandStatRequest(System.Int32,OpenMetaverse.EstateTools.LandStatReportType,System.UInt32,System.String)" /> request.</summary>
        </member>
        <member name="M:OpenMetaverse.EstateTools.OnTopCollidersReply(OpenMetaverse.TopCollidersReplyEventArgs)">
            <summary>Raises the TopCollidersReply event</summary>
            <param name="e">A TopCollidersReplyEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.OnTopScriptsReply(OpenMetaverse.TopScriptsReplyEventArgs)">
            <summary>Raises the TopScriptsReply event</summary>
            <param name="e">A TopScriptsReplyEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.OnEstateUsersReply(OpenMetaverse.EstateUsersReplyEventArgs)">
            <summary>Raises the EstateUsersReply event</summary>
            <param name="e">A EstateUsersReplyEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.OnEstateGroupsReply(OpenMetaverse.EstateGroupsReplyEventArgs)">
            <summary>Raises the EstateGroupsReply event</summary>
            <param name="e">A EstateGroupsReplyEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.OnEstateManagersReply(OpenMetaverse.EstateManagersReplyEventArgs)">
            <summary>Raises the EstateManagersReply event</summary>
            <param name="e">A EstateManagersReplyEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.OnEstateBansReply(OpenMetaverse.EstateBansReplyEventArgs)">
            <summary>Raises the EstateBansReply event</summary>
            <param name="e">A EstateBansReplyEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.OnEstateCovenantReply(OpenMetaverse.EstateCovenantReplyEventArgs)">
            <summary>Raises the EstateCovenantReply event</summary>
            <param name="e">A EstateCovenantReplyEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.OnEstateUpdateInfoReply(OpenMetaverse.EstateUpdateInfoReplyEventArgs)">
            <summary>Raises the EstateUpdateInfoReply event</summary>
            <param name="e">A EstateUpdateInfoReplyEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.LandStatRequest(System.Int32,OpenMetaverse.EstateTools.LandStatReportType,System.UInt32,System.String)">
            <summary>
            Requests estate information such as top scripts and colliders
            </summary>
            <param name="parcelLocalID">
            </param>
            <param name="reportType">
            </param>
            <param name="requestFlags">
            </param>
            <param name="filter">
            </param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.RequestInfo">
            <summary>Requests estate settings, including estate manager and access/ban lists</summary>
        </member>
        <member name="M:OpenMetaverse.EstateTools.RequestTopScripts">
            <summary>Requests the "Top Scripts" list for the current region</summary>
        </member>
        <member name="M:OpenMetaverse.EstateTools.RequestTopColliders">
            <summary>Requests the "Top Colliders" list for the current region</summary>
        </member>
        <member name="M:OpenMetaverse.EstateTools.SetTerrainVariables(System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Single)">
            <summary>
            Set several estate specific configuration variables
            </summary>
            <param name="WaterHeight">The Height of the waterlevel over the entire estate. Defaults to 20</param>
            <param name="TerrainRaiseLimit">The maximum height change allowed above the baked terrain. Defaults to 4</param>
            <param name="TerrainLowerLimit">The minimum height change allowed below the baked terrain. Defaults to -4</param>
            <param name="UseEstateSun">true to use</param>
            <param name="FixedSun">if True forces the sun position to the position in SunPosition</param>
            <param name="SunPosition">The current position of the sun on the estate, or when FixedSun is true the static position
            the sun will remain. <remarks>6.0 = Sunrise, 30.0 = Sunset</remarks></param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.SimWideReturn(OpenMetaverse.UUID,OpenMetaverse.EstateTools.EstateReturnFlags,System.Boolean)">
            <summary>
            Request return of objects owned by specified avatar
            </summary>
            <param name="Target">The Agents <see cref="T:OpenMetaverse.UUID" /> owning the primitives to return</param>
            <param name="flag">specify the coverage and type of objects to be included in the return</param>
            <param name="EstateWide">true to perform return on entire estate</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.EstateOwnerMessage(System.String,System.String)">
            <summary>
            </summary>
            <param name="method">
            </param>
            <param name="param">
            </param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.EstateOwnerMessage(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Used for setting and retrieving various estate panel settings
            </summary>
            <param name="method">EstateOwnerMessage Method field</param>
            <param name="listParams">List of parameters to include</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.KickUser(OpenMetaverse.UUID)">
            <summary>
            Kick an avatar from an estate
            </summary>
            <param name="userID">Key of Agent to remove</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.BanUser(OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Ban an avatar from an estate</summary>
            <param name="userID">Key of Agent to remove</param>
            <param name="allEstates">Ban user from this estate and all others owned by the estate owner</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.UnbanUser(OpenMetaverse.UUID,System.Boolean)">
            <summary>Unban an avatar from an estate</summary>
            <param name="userID">Key of Agent to remove</param>
            /// <param name="allEstates">Unban user from this estate and all others owned by the estate owner</param></member>
        <member name="M:OpenMetaverse.EstateTools.EstateMessage(System.String)">
            <summary>
            Send a message dialog to everyone in an entire estate
            </summary>
            <param name="message">Message to send all users in the estate</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.SimulatorMessage(System.String)">
            <summary>
            Send a message dialog to everyone in a simulator
            </summary>
            <param name="message">Message to send all users in the simulator</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.TeleportHomeUser(OpenMetaverse.UUID)">
            <summary>
            Send an avatar back to their home location
            </summary>
            <param name="pest">Key of avatar to send home</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.RestartRegion">
            <summary>
            Begin the region restart process
            </summary>
        </member>
        <member name="M:OpenMetaverse.EstateTools.CancelRestart">
            <summary>
            Cancels a region restart
            </summary>
        </member>
        <member name="M:OpenMetaverse.EstateTools.SetRegionInfo(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Single,System.Boolean)">
            <summary>Estate panel "Region" tab settings</summary>
        </member>
        <member name="M:OpenMetaverse.EstateTools.SetRegionDebug(System.Boolean,System.Boolean,System.Boolean)">
            <summary>Estate panel "Debug" tab settings</summary>
        </member>
        <member name="M:OpenMetaverse.EstateTools.SetRegionTerrain(OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>Used for setting the region's terrain textures for its four height levels</summary>
            <param name="low">
            </param>
            <param name="midLow">
            </param>
            <param name="midHigh">
            </param>
            <param name="high">
            </param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.SetRegionTerrainHeights(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Used for setting sim terrain texture heights</summary>
        </member>
        <member name="M:OpenMetaverse.EstateTools.RequestCovenant">
            <summary>Requests the estate covenant</summary>
        </member>
        <member name="M:OpenMetaverse.EstateTools.UploadTerrain(System.Byte[],System.String)">
            <summary>
            Upload a terrain RAW file
            </summary>
            <param name="fileData">A byte array containing the encoded terrain data</param>
            <param name="fileName">The name of the file being uploaded</param>
            <returns>The Id of the transfer request</returns>
        </member>
        <member name="M:OpenMetaverse.EstateTools.TeleportHomeAllUsers">
            <summary>
            Teleports all users home in current Estate
            </summary>
        </member>
        <member name="M:OpenMetaverse.EstateTools.RemoveEstateManager(OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Remove estate manager</summary>
            <param name="userID">Key of Agent to Remove</param>
            <param name="allEstates">removes manager to this estate and all others owned by the estate owner</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.AddEstateManager(OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Add estate manager</summary>
            <param name="userID">Key of Agent to Add</param>
            <param name="allEstates">Add agent as manager to this estate and all others owned by the estate owner</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.AddAllowedUser(OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Add's an agent to the estate Allowed list</summary>
            <param name="userID">Key of Agent to Add</param>
            <param name="allEstates">Add agent as an allowed reisdent to All estates if true</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.RemoveAllowedUser(OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Removes an agent from the estate Allowed list</summary>
            <param name="userID">Key of Agent to Remove</param>
            <param name="allEstates">Removes agent as an allowed reisdent from All estates if true</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.AddAllowedGroup(OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Add's a group to the estate Allowed list</summary>
            <param name="groupID">Key of Group to Add</param>
            <param name="allEstates">Add Group as an allowed group to All estates if true</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.RemoveAllowedGroup(OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Removes a group from the estate Allowed list</summary>
            <param name="groupID">Key of Group to Remove</param>
            <param name="allEstates">Removes Group as an allowed Group from All estates if true</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.EstateCovenantReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.EstateOwnerMessageHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.EstateTools.LandStatReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="T:OpenMetaverse.TopCollidersReplyEventArgs">
            <summary>Raised on LandStatReply when the report type is for "top colliders"</summary>
        </member>
        <member name="M:OpenMetaverse.TopCollidersReplyEventArgs.#ctor(System.Int32,System.Collections.Generic.Dictionary{OpenMetaverse.UUID,OpenMetaverse.EstateTask})">
            <summary>Construct a new instance of the TopCollidersReplyEventArgs class</summary>
            <param name="objectCount">The number of returned items in LandStatReply</param>
            <param name="tasks">Dictionary of Object UUIDs to tasks returned in LandStatReply</param>
        </member>
        <member name="P:OpenMetaverse.TopCollidersReplyEventArgs.ObjectCount">
            <summary>
            The number of returned items in LandStatReply
            </summary>
        </member>
        <member name="P:OpenMetaverse.TopCollidersReplyEventArgs.Tasks">
            <summary>
            A Dictionary of Object UUIDs to tasks returned in LandStatReply
            </summary>
        </member>
        <member name="T:OpenMetaverse.TopScriptsReplyEventArgs">
            <summary>Raised on LandStatReply when the report type is for "top Scripts"</summary>
        </member>
        <member name="M:OpenMetaverse.TopScriptsReplyEventArgs.#ctor(System.Int32,System.Collections.Generic.Dictionary{OpenMetaverse.UUID,OpenMetaverse.EstateTask})">
            <summary>Construct a new instance of the TopScriptsReplyEventArgs class</summary>
            <param name="objectCount">The number of returned items in LandStatReply</param>
            <param name="tasks">Dictionary of Object UUIDs to tasks returned in LandStatReply</param>
        </member>
        <member name="P:OpenMetaverse.TopScriptsReplyEventArgs.ObjectCount">
            <summary>
            The number of scripts returned in LandStatReply
            </summary>
        </member>
        <member name="P:OpenMetaverse.TopScriptsReplyEventArgs.Tasks">
            <summary>
            A Dictionary of Object UUIDs to tasks returned in LandStatReply
            </summary>
        </member>
        <member name="T:OpenMetaverse.EstateBansReplyEventArgs">
            <summary>Returned, along with other info, upon a successful .RequestInfo()</summary>
        </member>
        <member name="M:OpenMetaverse.EstateBansReplyEventArgs.#ctor(System.UInt32,System.Int32,System.Collections.Generic.List{OpenMetaverse.UUID})">
            <summary>Construct a new instance of the EstateBansReplyEventArgs class</summary>
            <param name="estateID">The estate's identifier on the grid</param>
            <param name="count">The number of returned items in LandStatReply</param>
            <param name="banned">User UUIDs banned</param>
        </member>
        <member name="P:OpenMetaverse.EstateBansReplyEventArgs.EstateID">
            <summary>
            The identifier of the estate
            </summary>
        </member>
        <member name="P:OpenMetaverse.EstateBansReplyEventArgs.Count">
            <summary>
            The number of returned itmes
            </summary>
        </member>
        <member name="P:OpenMetaverse.EstateBansReplyEventArgs.Banned">
            <summary>
            List of UUIDs of Banned Users
            </summary>
        </member>
        <member name="T:OpenMetaverse.EstateUsersReplyEventArgs">
            <summary>Returned, along with other info, upon a successful .RequestInfo()</summary>
        </member>
        <member name="M:OpenMetaverse.EstateUsersReplyEventArgs.#ctor(System.UInt32,System.Int32,System.Collections.Generic.List{OpenMetaverse.UUID})">
            <summary>Construct a new instance of the EstateUsersReplyEventArgs class</summary>
            <param name="estateID">The estate's identifier on the grid</param>
            <param name="count">The number of users</param>
            <param name="allowedUsers">Allowed users UUIDs</param>
        </member>
        <member name="P:OpenMetaverse.EstateUsersReplyEventArgs.EstateID">
            <summary>
            The identifier of the estate
            </summary>
        </member>
        <member name="P:OpenMetaverse.EstateUsersReplyEventArgs.Count">
            <summary>
            The number of returned items
            </summary>
        </member>
        <member name="P:OpenMetaverse.EstateUsersReplyEventArgs.AllowedUsers">
            <summary>
            List of UUIDs of Allowed Users
            </summary>
        </member>
        <member name="T:OpenMetaverse.EstateGroupsReplyEventArgs">
            <summary>Returned, along with other info, upon a successful .RequestInfo()</summary>
        </member>
        <member name="M:OpenMetaverse.EstateGroupsReplyEventArgs.#ctor(System.UInt32,System.Int32,System.Collections.Generic.List{OpenMetaverse.UUID})">
            <summary>Construct a new instance of the EstateGroupsReplyEventArgs class</summary>
            <param name="estateID">The estate's identifier on the grid</param>
            <param name="count">The number of Groups</param>
            <param name="allowedGroups">Allowed Groups UUIDs</param>
        </member>
        <member name="P:OpenMetaverse.EstateGroupsReplyEventArgs.EstateID">
            <summary>
            The identifier of the estate
            </summary>
        </member>
        <member name="P:OpenMetaverse.EstateGroupsReplyEventArgs.Count">
            <summary>
            The number of returned items
            </summary>
        </member>
        <member name="P:OpenMetaverse.EstateGroupsReplyEventArgs.AllowedGroups">
            <summary>
            List of UUIDs of Allowed Groups
            </summary>
        </member>
        <member name="T:OpenMetaverse.EstateManagersReplyEventArgs">
            <summary>Returned, along with other info, upon a successful .RequestInfo()</summary>
        </member>
        <member name="M:OpenMetaverse.EstateManagersReplyEventArgs.#ctor(System.UInt32,System.Int32,System.Collections.Generic.List{OpenMetaverse.UUID})">
            <summary>Construct a new instance of the EstateManagersReplyEventArgs class</summary>
            <param name="estateID">The estate's identifier on the grid</param>
            <param name="count">The number of Managers</param>
            <param name="managers"> Managers UUIDs</param>
        </member>
        <member name="P:OpenMetaverse.EstateManagersReplyEventArgs.EstateID">
            <summary>
            The identifier of the estate
            </summary>
        </member>
        <member name="P:OpenMetaverse.EstateManagersReplyEventArgs.Count">
            <summary>
            The number of returned items
            </summary>
        </member>
        <member name="P:OpenMetaverse.EstateManagersReplyEventArgs.Managers">
            <summary>
            List of UUIDs of the Estate's Managers
            </summary>
        </member>
        <member name="T:OpenMetaverse.EstateCovenantReplyEventArgs">
            <summary>Returned, along with other info, upon a successful .RequestInfo()</summary>
        </member>
        <member name="M:OpenMetaverse.EstateCovenantReplyEventArgs.#ctor(OpenMetaverse.UUID,System.Int64,System.String,OpenMetaverse.UUID)">
            <summary>Construct a new instance of the EstateCovenantReplyEventArgs class</summary>
            <param name="covenantID">The Covenant ID</param>
            <param name="timestamp">The timestamp</param>
            <param name="estateName">The estate's name</param>
            <param name="estateOwnerID">The Estate Owner's ID (can be a GroupID)</param>
        </member>
        <member name="P:OpenMetaverse.EstateCovenantReplyEventArgs.CovenantID">
            <summary>
            The Covenant
            </summary>
        </member>
        <member name="P:OpenMetaverse.EstateCovenantReplyEventArgs.Timestamp">
            <summary>
            The timestamp
            </summary>
        </member>
        <member name="P:OpenMetaverse.EstateCovenantReplyEventArgs.EstateName">
            <summary>
            The Estate name
            </summary>
        </member>
        <member name="P:OpenMetaverse.EstateCovenantReplyEventArgs.EstateOwnerID">
            <summary>
            The Estate Owner's ID (can be a GroupID)
            </summary>
        </member>
        <member name="T:OpenMetaverse.EstateUpdateInfoReplyEventArgs">
            <summary>Returned, along with other info, upon a successful .RequestInfo()</summary>
        </member>
        <member name="M:OpenMetaverse.EstateUpdateInfoReplyEventArgs.#ctor(System.String,OpenMetaverse.UUID,System.UInt32,System.Boolean)">
            <summary>Construct a new instance of the EstateUpdateInfoReplyEventArgs class</summary>
            <param name="estateName">The estate's name</param>
            <param name="estateOwner">The Estate Owners ID (can be a GroupID)</param>
            <param name="estateID">The estate's identifier on the grid</param>
            <param name="denyNoPaymentInfo">
            </param>
        </member>
        <member name="P:OpenMetaverse.EstateUpdateInfoReplyEventArgs.EstateName">
            <summary>
            The estate's name
            </summary>
        </member>
        <member name="P:OpenMetaverse.EstateUpdateInfoReplyEventArgs.EstateOwner">
            <summary>
            The Estate Owner's ID (can be a GroupID)
            </summary>
        </member>
        <member name="P:OpenMetaverse.EstateUpdateInfoReplyEventArgs.EstateID">
            <summary>
            The identifier of the estate on the grid
            </summary>
        </member>
        <member name="P:OpenMetaverse.EstateUpdateInfoReplyEventArgs.DenyNoPaymentInfo">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.PacketEventDictionary">
            <summary>
            Registers, unregisters, and fires events generated by incoming packets
            </summary>
        </member>
        <member name="M:OpenMetaverse.PacketEventDictionary.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Default constructor
            </summary>
            <param name="client">
            </param>
        </member>
        <member name="T:OpenMetaverse.PacketEventDictionary.PacketCallbackWrapper">
            <summary>
            Object that is passed to worker threads in the ThreadPool for
            firing packet callbacks
            </summary>
        </member>
        <member name="F:OpenMetaverse.PacketEventDictionary.PacketCallbackWrapper.Callback">
            <summary>Callback to fire for this packet</summary>
        </member>
        <member name="F:OpenMetaverse.PacketEventDictionary.PacketCallbackWrapper.Simulator">
            <summary>Reference to the simulator that this packet came from</summary>
        </member>
        <member name="F:OpenMetaverse.PacketEventDictionary.PacketCallbackWrapper.Packet">
            <summary>The packet that needs to be processed</summary>
        </member>
        <member name="F:OpenMetaverse.PacketEventDictionary.Client">
            <summary>Reference to the GridClient object</summary>
        </member>
        <member name="M:OpenMetaverse.PacketEventDictionary.RegisterEvent(OpenMetaverse.Packets.PacketType,System.EventHandler{OpenMetaverse.PacketReceivedEventArgs})">
            <summary>
            Register an event handler
            </summary>
            <remarks>Use PacketType.Default to fire this event on every
            incoming packet</remarks>
            <param name="packetType">Packet type to register the handler for</param>
            <param name="eventHandler">Callback to be fired</param>
        </member>
        <member name="M:OpenMetaverse.PacketEventDictionary.UnregisterEvent(OpenMetaverse.Packets.PacketType,System.EventHandler{OpenMetaverse.PacketReceivedEventArgs})">
            <summary>
            Unregister an event handler
            </summary>
            <param name="packetType">Packet type to unregister the handler for</param>
            <param name="eventHandler">Callback to be unregistered</param>
        </member>
        <member name="M:OpenMetaverse.PacketEventDictionary.RaiseEvent(OpenMetaverse.Packets.PacketType,OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Fire the events registered for this packet type synchronously
            </summary>
            <param name="packetType">Incoming packet type</param>
            <param name="packet">Incoming packet</param>
            <param name="simulator">Simulator this packet was received from</param>
        </member>
        <member name="M:OpenMetaverse.PacketEventDictionary.BeginRaiseEvent(OpenMetaverse.Packets.PacketType,OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Fire the events registered for this packet type asynchronously
            </summary>
            <param name="packetType">Incoming packet type</param>
            <param name="packet">Incoming packet</param>
            <param name="simulator">Simulator this packet was received from</param>
        </member>
        <member name="T:OpenMetaverse.CapsEventDictionary">
            <summary>
            Registers, unregisters, and fires events generated by the Capabilities
            event queue
            </summary>
        </member>
        <member name="M:OpenMetaverse.CapsEventDictionary.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Default constructor
            </summary>
            <param name="client">Reference to the GridClient object</param>
        </member>
        <member name="T:OpenMetaverse.CapsEventDictionary.CapsCallbackWrapper">
            <summary>
            Object that is passed to worker threads in the ThreadPool for
            firing CAPS callbacks
            </summary>
        </member>
        <member name="F:OpenMetaverse.CapsEventDictionary.CapsCallbackWrapper.Callback">
            <summary>Callback to fire for this packet</summary>
        </member>
        <member name="F:OpenMetaverse.CapsEventDictionary.CapsCallbackWrapper.CapsEvent">
            <summary>Name of the CAPS event</summary>
        </member>
        <member name="F:OpenMetaverse.CapsEventDictionary.CapsCallbackWrapper.Message">
            <summary>Strongly typed decoded data</summary>
        </member>
        <member name="F:OpenMetaverse.CapsEventDictionary.CapsCallbackWrapper.Simulator">
            <summary>Reference to the simulator that generated this event</summary>
        </member>
        <member name="F:OpenMetaverse.CapsEventDictionary.Client">
            <summary>Reference to the GridClient object</summary>
        </member>
        <member name="M:OpenMetaverse.CapsEventDictionary.RegisterEvent(System.String,OpenMetaverse.Caps.EventQueueCallback)">
            <summary>
            Register an new event handler for a capabilities event sent via the EventQueue
            </summary>
            <remarks>Use String.Empty to fire this event on every CAPS event</remarks>
            <param name="capsEvent">Capability event name to register the
            handler for</param>
            <param name="eventHandler">Callback to fire</param>
        </member>
        <member name="M:OpenMetaverse.CapsEventDictionary.UnregisterEvent(System.String,OpenMetaverse.Caps.EventQueueCallback)">
            <summary>
            Unregister a previously registered capabilities handler
            </summary>
            <param name="capsEvent">Capability event name unregister the
            handler for</param>
            <param name="eventHandler">Callback to unregister</param>
        </member>
        <member name="M:OpenMetaverse.CapsEventDictionary.RaiseEvent(System.String,OpenMetaverse.Interfaces.IMessage,OpenMetaverse.Simulator)">
            <summary>
            Fire the events registered for this event type synchronously
            </summary>
            <param name="capsEvent">Capability name</param>
            <param name="message">Decoded event body</param>
            <param name="simulator">Reference to the simulator that
            generated this event</param>
        </member>
        <member name="M:OpenMetaverse.CapsEventDictionary.BeginRaiseEvent(System.String,OpenMetaverse.Interfaces.IMessage,OpenMetaverse.Simulator)">
            <summary>
            Fire the events registered for this event type asynchronously
            </summary>
            <param name="capsEvent">Capability name</param>
            <param name="message">Decoded event body</param>
            <param name="simulator">Reference to the simulator that
            generated this event</param>
        </member>
        <member name="T:OpenMetaverse.FriendRights">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.FriendRights.None">
            <summary>The avatar has no rights</summary>
        </member>
        <member name="F:OpenMetaverse.FriendRights.CanSeeOnline">
            <summary>The avatar can see the online status of the target avatar</summary>
        </member>
        <member name="F:OpenMetaverse.FriendRights.CanSeeOnMap">
            <summary>The avatar can see the location of the target avatar on the map</summary>
        </member>
        <member name="F:OpenMetaverse.FriendRights.CanModifyObjects">
            <summary>The avatar can modify the ojects of the target avatar </summary>
        </member>
        <member name="T:OpenMetaverse.FriendInfo">
            <summary>
            This class holds information about an avatar in the friends list.  There are two ways
            to interface to this class.  The first is through the set of boolean properties.  This is the typical
            way clients of this class will use it.  The second interface is through two bitflag properties,
            TheirFriendsRights and MyFriendsRights
            </summary>
        </member>
        <member name="M:OpenMetaverse.FriendInfo.#ctor(OpenMetaverse.UUID,OpenMetaverse.FriendRights,OpenMetaverse.FriendRights)">
            <summary>
            Used internally when building the initial list of friends at login time
            </summary>
            <param name="id">System ID of the avatar being prepesented</param>
            <param name="theirRights">Rights the friend has to see you online and to modify your objects</param>
            <param name="myRights">Rights you have to see your friend online and to modify their objects</param>
        </member>
        <member name="P:OpenMetaverse.FriendInfo.UUID">
            <summary>
            System ID of the avatar
            </summary>
        </member>
        <member name="P:OpenMetaverse.FriendInfo.Name">
            <summary>
            full name of the avatar
            </summary>
        </member>
        <member name="P:OpenMetaverse.FriendInfo.IsOnline">
            <summary>
            True if the avatar is online
            </summary>
        </member>
        <member name="P:OpenMetaverse.FriendInfo.CanSeeMeOnline">
            <summary>
            True if the friend can see if I am online
            </summary>
        </member>
        <member name="P:OpenMetaverse.FriendInfo.CanSeeMeOnMap">
            <summary>
            True if the friend can see me on the map
            </summary>
        </member>
        <member name="P:OpenMetaverse.FriendInfo.CanModifyMyObjects">
            <summary>
            True if the freind can modify my objects
            </summary>
        </member>
        <member name="P:OpenMetaverse.FriendInfo.CanSeeThemOnline">
            <summary>
            True if I can see if my friend is online
            </summary>
        </member>
        <member name="P:OpenMetaverse.FriendInfo.CanSeeThemOnMap">
            <summary>
            True if I can see if my friend is on the map
            </summary>
        </member>
        <member name="P:OpenMetaverse.FriendInfo.CanModifyTheirObjects">
            <summary>
            True if I can modify my friend's objects
            </summary>
        </member>
        <member name="P:OpenMetaverse.FriendInfo.TheirFriendRights">
            <summary>
            My friend's rights represented as bitmapped flags
            </summary>
        </member>
        <member name="P:OpenMetaverse.FriendInfo.MyFriendRights">
            <summary>
            My rights represented as bitmapped flags
            </summary>
        </member>
        <member name="M:OpenMetaverse.FriendInfo.ToString">
            <summary>
            FriendInfo represented as a string
            </summary>
            <returns>A string reprentation of both my rights and my friends rights</returns>
        </member>
        <member name="T:OpenMetaverse.FriendsManager">
            <summary>
            This class is used to add and remove avatars from your friends list and to manage their permission.
            </summary>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Internal constructor
            </summary>
            <param name="client">A reference to the GridClient Object</param>
        </member>
        <member name="F:OpenMetaverse.FriendsManager.m_FriendOnline">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.FriendsManager.m_FriendOnlineLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.FriendsManager.m_FriendOffline">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.FriendsManager.m_FriendOfflineLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.FriendsManager.m_FriendRights">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.FriendsManager.m_FriendRightsLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.FriendsManager.m_FriendNames">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.FriendsManager.m_FriendNamesLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.FriendsManager.m_FriendshipOffered">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.FriendsManager.m_FriendshipOfferedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.FriendsManager.m_FriendshipResponse">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.FriendsManager.m_FriendshipResponseLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.FriendsManager.m_FriendshipTerminated">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.FriendsManager.m_FriendshipTerminatedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.FriendsManager.m_FriendFound">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.FriendsManager.m_FriendFoundLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.FriendsManager.FriendList">
            <summary>
            A dictionary of key/value pairs containing known friends of this avatar.
            The Key is the <seealso cref="T:OpenMetaverse.UUID" /> of the friend, the value is a <seealso cref="T:OpenMetaverse.FriendInfo" />
            object that contains detailed information including permissions you have and have given to the friend
            </summary>
        </member>
        <member name="F:OpenMetaverse.FriendsManager.FriendRequests">
            <summary>
            A Dictionary of key/value pairs containing current pending frienship offers.
            The key is the <seealso cref="T:OpenMetaverse.UUID" /> of the avatar making the request,
            the value is the <seealso cref="T:OpenMetaverse.UUID" /> of the request which is used to accept
            or decline the friendship offer
            </summary>
        </member>
        <member name="E:OpenMetaverse.FriendsManager.FriendOnline">
            <summary>Raised when the simulator sends notification one of the members in our friends list comes online</summary>
        </member>
        <member name="E:OpenMetaverse.FriendsManager.FriendOffline">
            <summary>Raised when the simulator sends notification one of the members in our friends list goes offline</summary>
        </member>
        <member name="E:OpenMetaverse.FriendsManager.FriendRightsUpdate">
            <summary>Raised when the simulator sends notification one of the members in our friends list grants or revokes permissions</summary>
        </member>
        <member name="E:OpenMetaverse.FriendsManager.FriendNames">
            <summary>Raised when the simulator sends us the names on our friends list</summary>
        </member>
        <member name="E:OpenMetaverse.FriendsManager.FriendshipOffered">
            <summary>Raised when the simulator sends notification another agent is offering us friendship</summary>
        </member>
        <member name="E:OpenMetaverse.FriendsManager.FriendshipResponse">
            <summary>Raised when a request we sent to friend another agent is accepted or declined</summary>
        </member>
        <member name="E:OpenMetaverse.FriendsManager.FriendshipTerminated">
            <summary>Raised when the simulator sends notification one of the members in our friends list has terminated
            our friendship</summary>
        </member>
        <member name="E:OpenMetaverse.FriendsManager.FriendFoundReply">
            <summary>Raised when the simulator sends the location of a friend we have
            requested map location info for</summary>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.OnFriendOnline(OpenMetaverse.FriendInfoEventArgs)">
            <summary>Raises the FriendOnline event</summary>
            <param name="e">A FriendInfoEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.OnFriendOffline(OpenMetaverse.FriendInfoEventArgs)">
            <summary>Raises the FriendOffline event</summary>
            <param name="e">A FriendInfoEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.OnFriendRights(OpenMetaverse.FriendInfoEventArgs)">
            <summary>Raises the FriendRightsUpdate event</summary>
            <param name="e">A FriendInfoEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.OnFriendNames(OpenMetaverse.FriendNamesEventArgs)">
            <summary>Raises the FriendNames event</summary>
            <param name="e">A FriendNamesEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.OnFriendshipOffered(OpenMetaverse.FriendshipOfferedEventArgs)">
            <summary>Raises the FriendshipOffered event</summary>
            <param name="e">A FriendshipOfferedEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.OnFriendshipResponse(OpenMetaverse.FriendshipResponseEventArgs)">
            <summary>Raises the FriendshipResponse event</summary>
            <param name="e">A FriendshipResponseEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.OnFriendshipTerminated(OpenMetaverse.FriendshipTerminatedEventArgs)">
            <summary>Raises the FriendshipTerminated event</summary>
            <param name="e">A FriendshipTerminatedEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.OnFriendFoundReply(OpenMetaverse.FriendFoundReplyEventArgs)">
            <summary>Raises the FriendFoundReply event</summary>
            <param name="e">A FriendFoundReplyEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.AcceptFriendship(OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>
            Accept a friendship request
            </summary>
            <param name="fromAgentID">agentID of avatatar to form friendship with</param>
            <param name="imSessionID">imSessionID of the friendship request message</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.DeclineFriendship(OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>
            Decline a friendship request
            </summary>
            <param name="fromAgentID">
                <seealso cref="T:OpenMetaverse.UUID" /> of friend</param>
            <param name="imSessionID">imSessionID of the friendship request message</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.OfferFriendship(OpenMetaverse.UUID)">
            <summary>
            Overload: Offer friendship to an avatar.
            </summary>
            <param name="agentID">System ID of the avatar you are offering friendship to</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.OfferFriendship(OpenMetaverse.UUID,System.String)">
            <summary>
            Offer friendship to an avatar.
            </summary>
            <param name="agentID">System ID of the avatar you are offering friendship to</param>
            <param name="message">A message to send with the request</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.TerminateFriendship(OpenMetaverse.UUID)">
            <summary>
            Terminate a friendship with an avatar
            </summary>
            <param name="agentID">System ID of the avatar you are terminating the friendship with</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.TerminateFriendshipHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.GrantRights(OpenMetaverse.UUID,OpenMetaverse.FriendRights)">
            <summary>
            Change the rights of a friend avatar.
            </summary>
            <param name="friendID">the <seealso cref="T:OpenMetaverse.UUID" /> of the friend</param>
            <param name="rights">the new rights to give the friend</param>
            <remarks>This method will implicitly set the rights to those passed in the rights parameter.</remarks>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.MapFriend(OpenMetaverse.UUID)">
            <summary>
            Use to map a friends location on the grid.
            </summary>
            <param name="friendID">Friends UUID to find</param>
            <remarks>
                <seealso cref="E:OnFriendFound" />
            </remarks>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.TrackFriend(OpenMetaverse.UUID)">
            <summary>
            Use to track a friends movement on the grid
            </summary>
            <param name="friendID">Friends Key</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.RequestOnlineNotification(OpenMetaverse.UUID)">
            <summary>
            Ask for a notification of friend's online status
            </summary>
            <param name="friendID">Friend's UUID</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.Avatars_OnAvatarNames(System.Object,OpenMetaverse.UUIDNameReplyEventArgs)">
            <summary>
            This handles the asynchronous response of a RequestAvatarNames call.
            </summary>
            <param name="sender">
            </param>
            <param name="e">names cooresponding to the the list of IDs sent the the RequestAvatarNames call.</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.OnlineNotificationHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.OfflineNotificationHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.ChangeUserRightsHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.OnFindAgentReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.FriendsManager.Network_OnLoginResponse(System.Boolean,System.Boolean,System.String,System.String,OpenMetaverse.LoginResponseData)">
            <summary>
            Populate FriendList <seealso cref="!:InternalDictionary" /> with data from the login reply
            </summary>
            <param name="loginSuccess">true if login was successful</param>
            <param name="redirect">true if login request is requiring a redirect</param>
            <param name="message">A string containing the response to the login request</param>
            <param name="reason">A string containing the reason for the request</param>
            <param name="replyData">A <seealso cref="T:OpenMetaverse.LoginResponseData" /> object containing the decoded
            reply from the login server</param>
        </member>
        <member name="T:OpenMetaverse.FriendInfoEventArgs">
            <summary>Contains information on a member of our friends list</summary>
        </member>
        <member name="M:OpenMetaverse.FriendInfoEventArgs.#ctor(OpenMetaverse.FriendInfo)">
            <summary>
            Construct a new instance of the FriendInfoEventArgs class
            </summary>
            <param name="friend">The FriendInfo</param>
        </member>
        <member name="P:OpenMetaverse.FriendInfoEventArgs.Friend">
            <summary>Get the FriendInfo</summary>
        </member>
        <member name="T:OpenMetaverse.FriendNamesEventArgs">
            <summary>Contains Friend Names</summary>
        </member>
        <member name="M:OpenMetaverse.FriendNamesEventArgs.#ctor(System.Collections.Generic.Dictionary{OpenMetaverse.UUID,System.String})">
            <summary>
            Construct a new instance of the FriendNamesEventArgs class
            </summary>
            <param name="names">A dictionary where the Key is the ID of the Agent,
            and the Value is a string containing their name</param>
        </member>
        <member name="P:OpenMetaverse.FriendNamesEventArgs.Names">
            <summary>A dictionary where the Key is the ID of the Agent,
            and the Value is a string containing their name</summary>
        </member>
        <member name="T:OpenMetaverse.FriendshipOfferedEventArgs">
            <summary>Sent when another agent requests a friendship with our agent</summary>
        </member>
        <member name="M:OpenMetaverse.FriendshipOfferedEventArgs.#ctor(OpenMetaverse.UUID,System.String,OpenMetaverse.UUID)">
            <summary>
            Construct a new instance of the FriendshipOfferedEventArgs class
            </summary>
            <param name="agentID">The ID of the agent requesting friendship</param>
            <param name="agentName">The name of the agent requesting friendship</param>
            <param name="imSessionID">The ID of the session, used in accepting or declining the
            friendship offer</param>
        </member>
        <member name="P:OpenMetaverse.FriendshipOfferedEventArgs.AgentID">
            <summary>Get the ID of the agent requesting friendship</summary>
        </member>
        <member name="P:OpenMetaverse.FriendshipOfferedEventArgs.AgentName">
            <summary>Get the name of the agent requesting friendship</summary>
        </member>
        <member name="P:OpenMetaverse.FriendshipOfferedEventArgs.SessionID">
            <summary>Get the ID of the session, used in accepting or declining the
            friendship offer</summary>
        </member>
        <member name="T:OpenMetaverse.FriendshipResponseEventArgs">
            <summary>A response containing the results of our request to form a friendship with another agent</summary>
        </member>
        <member name="M:OpenMetaverse.FriendshipResponseEventArgs.#ctor(OpenMetaverse.UUID,System.String,System.Boolean)">
            <summary>
            Construct a new instance of the FriendShipResponseEventArgs class
            </summary>
            <param name="agentID">The ID of the agent we requested a friendship with</param>
            <param name="agentName">The name of the agent we requested a friendship with</param>
            <param name="accepted">true if the agent accepted our friendship offer</param>
        </member>
        <member name="P:OpenMetaverse.FriendshipResponseEventArgs.AgentID">
            <summary>Get the ID of the agent we requested a friendship with</summary>
        </member>
        <member name="P:OpenMetaverse.FriendshipResponseEventArgs.AgentName">
            <summary>Get the name of the agent we requested a friendship with</summary>
        </member>
        <member name="P:OpenMetaverse.FriendshipResponseEventArgs.Accepted">
            <summary>true if the agent accepted our friendship offer</summary>
        </member>
        <member name="T:OpenMetaverse.FriendshipTerminatedEventArgs">
            <summary>Contains data sent when a friend terminates a friendship with us</summary>
        </member>
        <member name="M:OpenMetaverse.FriendshipTerminatedEventArgs.#ctor(OpenMetaverse.UUID,System.String)">
            <summary>
            Construct a new instance of the FrindshipTerminatedEventArgs class
            </summary>
            <param name="agentID">The ID of the friend who terminated the friendship with us</param>
            <param name="agentName">The name of the friend who terminated the friendship with us</param>
        </member>
        <member name="P:OpenMetaverse.FriendshipTerminatedEventArgs.AgentID">
            <summary>Get the ID of the agent that terminated the friendship with us</summary>
        </member>
        <member name="P:OpenMetaverse.FriendshipTerminatedEventArgs.AgentName">
            <summary>Get the name of the agent that terminated the friendship with us</summary>
        </member>
        <member name="T:OpenMetaverse.FriendFoundReplyEventArgs">
            <summary>
            Data sent in response to a <see cref="!:FindFriend" /> request which contains the information to allow us to map the friends location
            </summary>
        </member>
        <member name="M:OpenMetaverse.FriendFoundReplyEventArgs.#ctor(OpenMetaverse.UUID,System.UInt64,OpenMetaverse.Vector3)">
            <summary>
            Construct a new instance of the FriendFoundReplyEventArgs class
            </summary>
            <param name="agentID">The ID of the agent we have requested location information for</param>
            <param name="regionHandle">The region handle where our friend is located</param>
            <param name="location">The simulator local position our friend is located</param>
        </member>
        <member name="P:OpenMetaverse.FriendFoundReplyEventArgs.AgentID">
            <summary>Get the ID of the agent we have received location information for</summary>
        </member>
        <member name="P:OpenMetaverse.FriendFoundReplyEventArgs.RegionHandle">
            <summary>Get the region handle where our mapped friend is located</summary>
        </member>
        <member name="P:OpenMetaverse.FriendFoundReplyEventArgs.Location">
            <summary>Get the simulator local position where our friend is located</summary>
        </member>
        <member name="T:OpenMetaverse.GridClient">
            <summary>
            Main class to expose grid functionality to clients. All of the
            classes needed for sending and receiving data are accessible through
            this class.
            </summary>
            <example>
                <code>
            // Example minimum code required to instantiate class and
            // connect to a simulator.
            using System;
            using System.Collections.Generic;
            using System.Text;
            using OpenMetaverse;
            namespace FirstBot
            {
            class Bot
            {
            public static GridClient Client;
            static void Main(string[] args)
            {
            Client = new GridClient(); // instantiates the GridClient class
            // to the global Client object
            // Login to Simulator
            Client.Network.Login("FirstName", "LastName", "Password", "FirstBot", "1.0");
            // Wait for a Keypress
            Console.ReadLine();
            // Logout of simulator
            Client.Network.Logout();
            }
            }
            }
            </code>
            </example>
        </member>
        <member name="M:OpenMetaverse.GridClient.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Network">
            <summary>Networking subsystem</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Settings">
            <summary>Settings class including constant values and changeable
            parameters for everything</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Parcels">
            <summary>Parcel (subdivided simulator lots) subsystem</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Self">
            <summary>Our own avatars subsystem</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Avatars">
            <summary>Other avatars subsystem</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Estate">
            <summary>Estate subsystem</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Friends">
            <summary>Friends list subsystem</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Grid">
            <summary>Grid (aka simulator group) subsystem</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Objects">
            <summary>Object subsystem</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Groups">
            <summary>Group subsystem</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Assets">
            <summary>Asset subsystem</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Appearance">
            <summary>Appearance subsystem</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Inventory">
            <summary>Inventory subsystem</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Directory">
            <summary>Directory searches including classifieds, people, land
            sales, etc</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Terrain">
            <summary>Handles land, wind, and cloud heightmaps</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Sound">
            <summary>Handles sound-related networking</summary>
        </member>
        <member name="F:OpenMetaverse.GridClient.Throttle">
            <summary>Throttling total bandwidth usage, or allocating bandwidth
            for specific data stream types</summary>
        </member>
        <member name="M:OpenMetaverse.GridClient.ToString">
            <summary>
            Return the full name of this instance
            </summary>
            <returns>Client avatars full name</returns>
        </member>
        <member name="T:OpenMetaverse.GridLayerType">
            <summary>
            Map layer request type
            </summary>
        </member>
        <member name="F:OpenMetaverse.GridLayerType.Objects">
            <summary>Objects and terrain are shown</summary>
        </member>
        <member name="F:OpenMetaverse.GridLayerType.Terrain">
            <summary>Only the terrain is shown, no objects</summary>
        </member>
        <member name="F:OpenMetaverse.GridLayerType.LandForSale">
            <summary>Overlay showing land for sale and for auction</summary>
        </member>
        <member name="T:OpenMetaverse.GridItemType">
            <summary>
            Type of grid item, such as telehub, event, populator location, etc.
            </summary>
        </member>
        <member name="F:OpenMetaverse.GridItemType.Telehub">
            <summary>Telehub</summary>
        </member>
        <member name="F:OpenMetaverse.GridItemType.PgEvent">
            <summary>PG rated event</summary>
        </member>
        <member name="F:OpenMetaverse.GridItemType.MatureEvent">
            <summary>Mature rated event</summary>
        </member>
        <member name="F:OpenMetaverse.GridItemType.Popular">
            <summary>Popular location</summary>
        </member>
        <member name="F:OpenMetaverse.GridItemType.AgentLocations">
            <summary>Locations of avatar groups in a region</summary>
        </member>
        <member name="F:OpenMetaverse.GridItemType.LandForSale">
            <summary>Land for sale</summary>
        </member>
        <member name="F:OpenMetaverse.GridItemType.Classified">
            <summary>Classified ad</summary>
        </member>
        <member name="F:OpenMetaverse.GridItemType.AdultEvent">
            <summary>Adult rated event</summary>
        </member>
        <member name="F:OpenMetaverse.GridItemType.AdultLandForSale">
            <summary>Adult land for sale</summary>
        </member>
        <member name="T:OpenMetaverse.GridRegion">
            <summary>
            Information about a region on the grid map
            </summary>
        </member>
        <member name="F:OpenMetaverse.GridRegion.X">
            <summary>Sim X position on World Map</summary>
        </member>
        <member name="F:OpenMetaverse.GridRegion.Y">
            <summary>Sim Y position on World Map</summary>
        </member>
        <member name="F:OpenMetaverse.GridRegion.Name">
            <summary>Sim Name (NOTE: In lowercase!)</summary>
        </member>
        <member name="F:OpenMetaverse.GridRegion.Access">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GridRegion.RegionFlags">
            <summary>Appears to always be zero (None)</summary>
        </member>
        <member name="F:OpenMetaverse.GridRegion.WaterHeight">
            <summary>Sim's defined Water Height</summary>
        </member>
        <member name="F:OpenMetaverse.GridRegion.Agents">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GridRegion.MapImageID">
            <summary>UUID of the World Map image</summary>
        </member>
        <member name="F:OpenMetaverse.GridRegion.RegionHandle">
            <summary>Unique identifier for this region, a combination of the X
            and Y position</summary>
        </member>
        <member name="M:OpenMetaverse.GridRegion.ToString">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.GridRegion.GetHashCode">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.GridRegion.Equals(System.Object)">
            <summary>
            </summary>
            <param name="obj">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:OpenMetaverse.GridLayer">
            <summary>
            Visual chunk of the grid map
            </summary>
        </member>
        <member name="T:OpenMetaverse.MapItem">
            <summary>
            Base class for Map Items
            </summary>
        </member>
        <member name="F:OpenMetaverse.MapItem.GlobalX">
            <summary>The Global X position of the item</summary>
        </member>
        <member name="F:OpenMetaverse.MapItem.GlobalY">
            <summary>The Global Y position of the item</summary>
        </member>
        <member name="P:OpenMetaverse.MapItem.LocalX">
            <summary>Get the Local X position of the item</summary>
        </member>
        <member name="P:OpenMetaverse.MapItem.LocalY">
            <summary>Get the Local Y position of the item</summary>
        </member>
        <member name="P:OpenMetaverse.MapItem.RegionHandle">
            <summary>Get the Handle of the region</summary>
        </member>
        <member name="T:OpenMetaverse.MapAgentLocation">
            <summary>
            Represents an agent or group of agents location
            </summary>
        </member>
        <member name="T:OpenMetaverse.MapTelehub">
            <summary>
            Represents a Telehub location
            </summary>
        </member>
        <member name="T:OpenMetaverse.MapLandForSale">
            <summary>
            Represents a non-adult parcel of land for sale
            </summary>
        </member>
        <member name="T:OpenMetaverse.MapAdultLandForSale">
            <summary>
            Represents an Adult parcel of land for sale
            </summary>
        </member>
        <member name="T:OpenMetaverse.MapPGEvent">
            <summary>
            Represents a PG Event
            </summary>
        </member>
        <member name="T:OpenMetaverse.MapMatureEvent">
            <summary>
            Represents a Mature event
            </summary>
        </member>
        <member name="T:OpenMetaverse.MapAdultEvent">
            <summary>
            Represents an Adult event
            </summary>
        </member>
        <member name="T:OpenMetaverse.GridManager">
            <summary>
            Manages grid-wide tasks such as the world map
            </summary>
        </member>
        <member name="M:OpenMetaverse.GridManager.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Constructor
            </summary>
            <param name="client">Instance of GridClient object to associate with this GridManager instance</param>
        </member>
        <member name="F:OpenMetaverse.GridManager.m_CoarseLocationUpdate">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.GridManager.m_CoarseLocationUpdateLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.GridManager.m_GridRegion">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.GridManager.m_GridRegionLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.GridManager.m_GridLayer">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.GridManager.m_GridLayerLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.GridManager.m_GridItems">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.GridManager.m_GridItemsLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.GridManager.m_RegionHandleReply">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.GridManager.m_RegionHandleReplyLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.GridManager.Regions">
            <summary>A dictionary of all the regions, indexed by region name</summary>
        </member>
        <member name="F:OpenMetaverse.GridManager.RegionsByHandle">
            <summary>A dictionary of all the regions, indexed by region handle</summary>
        </member>
        <member name="E:OpenMetaverse.GridManager.CoarseLocationUpdate">
            <summary>Raised when the simulator sends a <see cref="T:OpenMetaverse.Packets.CoarseLocationUpdatePacket" />
            containing the location of agents in the simulator</summary>
        </member>
        <member name="E:OpenMetaverse.GridManager.GridRegion">
            <summary>Raised when the simulator sends a Region Data in response to
            a Map request</summary>
        </member>
        <member name="E:OpenMetaverse.GridManager.GridLayer">
            <summary>Raised when the simulator sends GridLayer object containing
            a map tile coordinates and texture information</summary>
        </member>
        <member name="E:OpenMetaverse.GridManager.GridItems">
            <summary>Raised when the simulator sends GridItems object containing
            details on events, land sales at a specific location</summary>
        </member>
        <member name="E:OpenMetaverse.GridManager.RegionHandleReply">
            <summary>Raised in response to a Region lookup</summary>
        </member>
        <member name="P:OpenMetaverse.GridManager.SunPhase">
            <summary>Unknown</summary>
        </member>
        <member name="P:OpenMetaverse.GridManager.SunDirection">
            <summary>Current direction of the sun</summary>
        </member>
        <member name="P:OpenMetaverse.GridManager.SunAngVelocity">
            <summary>Current angular velocity of the sun</summary>
        </member>
        <member name="P:OpenMetaverse.GridManager.WorldTime">
            <summary>Current world time</summary>
        </member>
        <member name="M:OpenMetaverse.GridManager.OnCoarseLocationUpdate(OpenMetaverse.CoarseLocationUpdateEventArgs)">
            <summary>Raises the CoarseLocationUpdate event</summary>
            <param name="e">A CoarseLocationUpdateEventArgs object containing the
            data sent by simulator</param>
        </member>
        <member name="M:OpenMetaverse.GridManager.OnGridRegion(OpenMetaverse.GridRegionEventArgs)">
            <summary>Raises the GridRegion event</summary>
            <param name="e">A GridRegionEventArgs object containing the
            data sent by simulator</param>
        </member>
        <member name="M:OpenMetaverse.GridManager.OnGridLayer(OpenMetaverse.GridLayerEventArgs)">
            <summary>Raises the GridLayer event</summary>
            <param name="e">A GridLayerEventArgs object containing the
            data sent by simulator</param>
        </member>
        <member name="M:OpenMetaverse.GridManager.OnGridItems(OpenMetaverse.GridItemsEventArgs)">
            <summary>Raises the GridItems event</summary>
            <param name="e">A GridItemEventArgs object containing the
            data sent by simulator</param>
        </member>
        <member name="M:OpenMetaverse.GridManager.OnRegionHandleReply(OpenMetaverse.RegionHandleReplyEventArgs)">
            <summary>Raises the RegionHandleReply event</summary>
            <param name="e">A RegionHandleReplyEventArgs object containing the
            data sent by simulator</param>
        </member>
        <member name="M:OpenMetaverse.GridManager.RequestMapLayer(OpenMetaverse.GridLayerType)">
            <summary>
            </summary>
            <param name="layer">
            </param>
        </member>
        <member name="M:OpenMetaverse.GridManager.RequestMapRegion(System.String,OpenMetaverse.GridLayerType)">
            <summary>
            Request a map layer
            </summary>
            <param name="regionName">The name of the region</param>
            <param name="layer">The type of layer</param>
        </member>
        <member name="M:OpenMetaverse.GridManager.RequestMapBlocks(OpenMetaverse.GridLayerType,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            </summary>
            <param name="layer">
            </param>
            <param name="minX">
            </param>
            <param name="minY">
            </param>
            <param name="maxX">
            </param>
            <param name="maxY">
            </param>
            <param name="returnNonExistent">
            </param>
        </member>
        <member name="M:OpenMetaverse.GridManager.MapItems(System.UInt64,OpenMetaverse.GridItemType,OpenMetaverse.GridLayerType,System.Int32)">
            <summary>
            </summary>
            <param name="regionHandle">
            </param>
            <param name="item">
            </param>
            <param name="layer">
            </param>
            <param name="timeoutMS">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.GridManager.RequestMapItems(System.UInt64,OpenMetaverse.GridItemType,OpenMetaverse.GridLayerType)">
            <summary>
            </summary>
            <param name="regionHandle">
            </param>
            <param name="item">
            </param>
            <param name="layer">
            </param>
        </member>
        <member name="M:OpenMetaverse.GridManager.RequestMainlandSims(OpenMetaverse.GridLayerType)">
            <summary>
            Request data for all mainland (Linden managed) simulators
            </summary>
        </member>
        <member name="M:OpenMetaverse.GridManager.RequestRegionHandle(OpenMetaverse.UUID)">
            <summary>
            Request the region handle for the specified region UUID
            </summary>
            <param name="regionID">UUID of the region to look up</param>
        </member>
        <member name="M:OpenMetaverse.GridManager.GetGridRegion(System.String,OpenMetaverse.GridLayerType,OpenMetaverse.GridRegion@)">
            <summary>
            Get grid region information using the region name, this function
            will block until it can find the region or gives up
            </summary>
            <param name="name">Name of sim you're looking for</param>
            <param name="layer">Layer that you are requesting</param>
            <param name="region">Will contain a GridRegion for the sim you're
            looking for if successful, otherwise an empty structure</param>
            <returns>True if the GridRegion was successfully fetched, otherwise
            false</returns>
        </member>
        <member name="M:OpenMetaverse.GridManager.MapBlockReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.GridManager.MapItemReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.GridManager.SimulatorViewerTimeMessageHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.GridManager.CoarseLocationHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.GridManager.RegionHandleReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="T:OpenMetaverse.GroupMember">
            <summary>
            Avatar group management
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupMember.ID">
            <summary>Key of Group Member</summary>
        </member>
        <member name="F:OpenMetaverse.GroupMember.Contribution">
            <summary>Total land contribution</summary>
        </member>
        <member name="F:OpenMetaverse.GroupMember.OnlineStatus">
            <summary>Online status information</summary>
        </member>
        <member name="F:OpenMetaverse.GroupMember.Powers">
            <summary>Abilities that the Group Member has</summary>
        </member>
        <member name="F:OpenMetaverse.GroupMember.Title">
            <summary>Current group title</summary>
        </member>
        <member name="F:OpenMetaverse.GroupMember.IsOwner">
            <summary>Is a group owner</summary>
        </member>
        <member name="T:OpenMetaverse.GroupRole">
            <summary>
            Role manager for a group
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupRole.GroupID">
            <summary>Key of the group</summary>
        </member>
        <member name="F:OpenMetaverse.GroupRole.ID">
            <summary>Key of Role</summary>
        </member>
        <member name="F:OpenMetaverse.GroupRole.Name">
            <summary>Name of Role</summary>
        </member>
        <member name="F:OpenMetaverse.GroupRole.Title">
            <summary>Group Title associated with Role</summary>
        </member>
        <member name="F:OpenMetaverse.GroupRole.Description">
            <summary>Description of Role</summary>
        </member>
        <member name="F:OpenMetaverse.GroupRole.Powers">
            <summary>Abilities Associated with Role</summary>
        </member>
        <member name="M:OpenMetaverse.GroupRole.ToString">
            <summary>Returns the role's title</summary>
            <returns>The role's title</returns>
        </member>
        <member name="T:OpenMetaverse.GroupTitle">
            <summary>
            Class to represent Group Title
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupTitle.GroupID">
            <summary>Key of the group</summary>
        </member>
        <member name="F:OpenMetaverse.GroupTitle.RoleID">
            <summary>ID of the role title belongs to</summary>
        </member>
        <member name="F:OpenMetaverse.GroupTitle.Title">
            <summary>Group Title</summary>
        </member>
        <member name="F:OpenMetaverse.GroupTitle.Selected">
            <summary>Whether title is Active</summary>
        </member>
        <member name="M:OpenMetaverse.GroupTitle.ToString">
            <summary>Returns group title</summary>
        </member>
        <member name="T:OpenMetaverse.Group">
            <summary>
            Represents a group on the grid
            </summary>
        </member>
        <member name="F:OpenMetaverse.Group.ID">
            <summary>Key of Group</summary>
        </member>
        <member name="F:OpenMetaverse.Group.InsigniaID">
            <summary>Key of Group Insignia</summary>
        </member>
        <member name="F:OpenMetaverse.Group.FounderID">
            <summary>Key of Group Founder</summary>
        </member>
        <member name="F:OpenMetaverse.Group.OwnerRole">
            <summary>Key of Group Role for Owners</summary>
        </member>
        <member name="F:OpenMetaverse.Group.Name">
            <summary>Name of Group</summary>
        </member>
        <member name="F:OpenMetaverse.Group.Charter">
            <summary>Text of Group Charter</summary>
        </member>
        <member name="F:OpenMetaverse.Group.MemberTitle">
            <summary>Title of "everyone" role</summary>
        </member>
        <member name="F:OpenMetaverse.Group.OpenEnrollment">
            <summary>Is the group open for enrolement to everyone</summary>
        </member>
        <member name="F:OpenMetaverse.Group.ShowInList">
            <summary>Will group show up in search</summary>
        </member>
        <member name="F:OpenMetaverse.Group.Powers">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Group.AcceptNotices">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Group.AllowPublish">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Group.MaturePublish">
            <summary>Is the group Mature</summary>
        </member>
        <member name="F:OpenMetaverse.Group.MembershipFee">
            <summary>Cost of group membership</summary>
        </member>
        <member name="F:OpenMetaverse.Group.Money">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Group.Contribution">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Group.GroupMembershipCount">
            <summary>The total number of current members this group has</summary>
        </member>
        <member name="F:OpenMetaverse.Group.GroupRolesCount">
            <summary>The number of roles this group has configured</summary>
        </member>
        <member name="F:OpenMetaverse.Group.ListInProfile">
            <summary>Show this group in agent's profile</summary>
        </member>
        <member name="M:OpenMetaverse.Group.ToString">
            <summary>Returns the name of the group</summary>
            <returns>A string containing the name of the group</returns>
        </member>
        <member name="T:OpenMetaverse.Vote">
            <summary>
            A group Vote
            </summary>
        </member>
        <member name="F:OpenMetaverse.Vote.Candidate">
            <summary>Key of Avatar who created Vote</summary>
        </member>
        <member name="F:OpenMetaverse.Vote.VoteString">
            <summary>Text of the Vote proposal</summary>
        </member>
        <member name="F:OpenMetaverse.Vote.NumVotes">
            <summary>Total number of votes</summary>
        </member>
        <member name="T:OpenMetaverse.GroupProposal">
            <summary>
            A group proposal
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupProposal.VoteText">
            <summary>The Text of the proposal</summary>
        </member>
        <member name="F:OpenMetaverse.GroupProposal.Quorum">
            <summary>The minimum number of members that must vote before proposal passes or failes</summary>
        </member>
        <member name="F:OpenMetaverse.GroupProposal.Majority">
            <summary>The required ration of yes/no votes required for vote to pass</summary>
            <remarks>The three options are Simple Majority, 2/3 Majority, and Unanimous</remarks>
            TODO: this should be an enum</member>
        <member name="F:OpenMetaverse.GroupProposal.Duration">
            <summary>The duration in days votes are accepted</summary>
        </member>
        <member name="T:OpenMetaverse.GroupAccountSummary">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.IntervalDays">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.CurrentInterval">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.StartDate">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.Balance">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.TotalCredits">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.TotalDebits">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.ObjectTaxCurrent">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.LightTaxCurrent">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.LandTaxCurrent">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.GroupTaxCurrent">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.ParcelDirFeeCurrent">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.ObjectTaxEstimate">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.LightTaxEstimate">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.LandTaxEstimate">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.GroupTaxEstimate">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.ParcelDirFeeEstimate">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.NonExemptMembers">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.LastTaxDate">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupAccountSummary.TaxDate">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.GroupNotice">
            <summary>
            Struct representing a group notice
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupNotice.Subject">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupNotice.Message">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupNotice.AttachmentID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupNotice.OwnerID">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.GroupNotice.SerializeAttachment">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:OpenMetaverse.GroupNoticesListEntry">
            <summary>
            Struct representing a group notice list entry
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupNoticesListEntry.NoticeID">
            <summary>Notice ID</summary>
        </member>
        <member name="F:OpenMetaverse.GroupNoticesListEntry.Timestamp">
            <summary>Creation timestamp of notice</summary>
        </member>
        <member name="F:OpenMetaverse.GroupNoticesListEntry.FromName">
            <summary>Agent name who created notice</summary>
        </member>
        <member name="F:OpenMetaverse.GroupNoticesListEntry.Subject">
            <summary>Notice subject</summary>
        </member>
        <member name="F:OpenMetaverse.GroupNoticesListEntry.HasAttachment">
            <summary>Is there an attachment?</summary>
        </member>
        <member name="F:OpenMetaverse.GroupNoticesListEntry.AssetType">
            <summary>Attachment Type</summary>
        </member>
        <member name="T:OpenMetaverse.ChatSessionMember">
            <summary>
            Struct representing a member of a group chat session and their settings
            </summary>
        </member>
        <member name="F:OpenMetaverse.ChatSessionMember.AvatarKey">
            <summary>The <see cref="T:OpenMetaverse.UUID" /> of the Avatar</summary>
        </member>
        <member name="F:OpenMetaverse.ChatSessionMember.CanVoiceChat">
            <summary>True if user has voice chat enabled</summary>
        </member>
        <member name="F:OpenMetaverse.ChatSessionMember.IsModerator">
            <summary>True of Avatar has moderator abilities</summary>
        </member>
        <member name="F:OpenMetaverse.ChatSessionMember.MuteText">
            <summary>True if a moderator has muted this avatars chat</summary>
        </member>
        <member name="F:OpenMetaverse.ChatSessionMember.MuteVoice">
            <summary>True if a moderator has muted this avatars voice</summary>
        </member>
        <member name="T:OpenMetaverse.GroupRoleUpdate">
            <summary>
            Role update flags
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupRoleUpdate.NoUpdate">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupRoleUpdate.UpdateData">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupRoleUpdate.UpdatePowers">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupRoleUpdate.UpdateAll">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupRoleUpdate.Create">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupRoleUpdate.Delete">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.None">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.Invite">
            <summary>Can send invitations to groups default role</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.Eject">
            <summary>Can eject members from group</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.ChangeOptions">
            <summary>Can toggle 'Open Enrollment' and change 'Signup fee'</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.MemberVisible">
            <summary>Member is visible in the public member list</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.CreateRole">
            <summary>Can create new roles</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.DeleteRole">
            <summary>Can delete existing roles</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.RoleProperties">
            <summary>Can change Role names, titles and descriptions</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.AssignMemberLimited">
            <summary>Can assign other members to assigners role</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.AssignMember">
            <summary>Can assign other members to any role</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.RemoveMember">
            <summary>Can remove members from roles</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.ChangeActions">
            <summary>Can assign and remove abilities in roles</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.ChangeIdentity">
            <summary>Can change group Charter, Insignia, 'Publish on the web' and which
            members are publicly visible in group member listings</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.LandDeed">
            <summary>Can buy land or deed land to group</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.LandRelease">
            <summary>Can abandon group owned land to Governor Linden on mainland, or Estate owner for
            private estates</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.LandSetSale">
            <summary>Can set land for-sale information on group owned parcels</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.LandDivideJoin">
            <summary>Can subdivide and join parcels</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.JoinChat">
            <summary>Can join group chat sessions</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.AllowVoiceChat">
            <summary>Can use voice chat in Group Chat sessions</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.ModerateChat">
            <summary>Can moderate group chat sessions</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.FindPlaces">
            <summary>Can toggle "Show in Find Places" and set search category</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.LandChangeIdentity">
            <summary>Can change parcel name, description, and 'Publish on web' settings</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.SetLandingPoint">
            <summary>Can set the landing point and teleport routing on group land</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.ChangeMedia">
            <summary>Can change music and media settings</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.LandEdit">
            <summary>Can toggle 'Edit Terrain' option in Land settings</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.LandOptions">
            <summary>Can toggle various About Land &gt; Options settings</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.AllowEditLand">
            <summary>Can always terraform land, even if parcel settings have it turned off</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.AllowFly">
            <summary>Can always fly while over group owned land</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.AllowRez">
            <summary>Can always rez objects on group owned land</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.AllowLandmark">
            <summary>Can always create landmarks for group owned parcels</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.AllowSetHome">
            <summary>Can set home location on any group owned parcel</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.LandManageAllowed">
            <summary>Can modify public access settings for group owned parcels</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.LandManageBanned">
            <summary>Can manager parcel ban lists on group owned land</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.LandManagePasses">
            <summary>Can manage pass list sales information</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.LandEjectAndFreeze">
            <summary>Can eject and freeze other avatars on group owned land</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.ReturnGroupSet">
            <summary>Can return objects set to group</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.ReturnNonGroup">
            <summary>Can return non-group owned/set objects</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.ReturnGroupOwned">
            <summary>Can return group owned objects</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.LandGardening">
            <summary>Can landscape using Linden plants</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.DeedObject">
            <summary>Can deed objects to group</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.ObjectManipulate">
            <summary>Can move group owned objects</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.ObjectSetForSale">
            <summary>Can set group owned objects for-sale</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.Accountable">
            <summary>Pay group liabilities and receive group dividends</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.SendNotices">
            <summary>Can send group notices</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.ReceiveNotices">
            <summary>Can receive group notices</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.StartProposal">
            <summary>Can create group proposals</summary>
        </member>
        <member name="F:OpenMetaverse.GroupPowers.VoteOnProposal">
            <summary>Can vote on group proposals</summary>
        </member>
        <member name="T:OpenMetaverse.GroupManager">
            <summary>
            Handles all network traffic related to reading and writing group
            information
            </summary>
        </member>
        <member name="M:OpenMetaverse.GroupManager.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Construct a new instance of the GroupManager class
            </summary>
            <param name="client">A reference to the current <seealso cref="T:OpenMetaverse.GridClient" /> instance</param>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_CurrentGroups">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_CurrentGroupsLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupNames">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupNamesLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupProfile">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupProfileLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupMembers">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupMembersLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupRoles">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupRolesLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupRoleMembers">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupRolesMembersLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupTitles">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupTitlesLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupAccountSummary">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupAccountSummaryLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupCreated">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupCreatedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupJoined">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupJoinedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupLeft">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupLeftLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupDropped">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupDroppedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupMemberEjected">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupMemberEjectedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupNoticesListReply">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupNoticesListReplyLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupInvitation">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.m_GroupInvitationLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.Client">
            <summary>A reference to the current <seealso cref="T:OpenMetaverse.GridClient" /> instance</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.GroupMembersRequests">
            <summary>Currently-active group members requests</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.GroupRolesRequests">
            <summary>Currently-active group roles requests</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.GroupRolesMembersRequests">
            <summary>Currently-active group role-member requests</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.TempGroupMembers">
            <summary>Dictionary keeping group members while request is in progress</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.TempGroupRolesMembers">
            <summary>Dictionary keeping mebmer/role mapping while request is in progress</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.TempGroupRoles">
            <summary>Dictionary keeping GroupRole information while request is in progress</summary>
        </member>
        <member name="F:OpenMetaverse.GroupManager.GroupName2KeyCache">
            <summary>Caches group name lookups</summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.CurrentGroups">
            <summary>Raised when the simulator sends us data containing
            our current group membership</summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.GroupNamesReply">
            <summary>Raised when the simulator responds to a RequestGroupName
            or RequestGroupNames request</summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.GroupProfile">
            <summary>Raised when the simulator responds to a <see cref="M:OpenMetaverse.GroupManager.RequestGroupProfile(OpenMetaverse.UUID)" /> request</summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.GroupMembersReply">
            <summary>Raised when the simulator responds to a <see cref="M:OpenMetaverse.GroupManager.RequestGroupMembers(OpenMetaverse.UUID)" /> request</summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.GroupRoleDataReply">
            <summary>Raised when the simulator responds to a <see cref="!:RequestGroupRoleData" /> request</summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.GroupRoleMembersReply">
            <summary>Raised when the simulator responds to a <see cref="M:OpenMetaverse.GroupManager.RequestGroupRolesMembers(OpenMetaverse.UUID)" /> request</summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.GroupTitlesReply">
            <summary>Raised when the simulator responds to a <see cref="M:OpenMetaverse.GroupManager.RequestGroupTitles(OpenMetaverse.UUID)" /> request</summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.GroupAccountSummaryReply">
            <summary>Raised when a response to a RequestGroupAccountSummary is returned
            by the simulator</summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.GroupCreatedReply">
            <summary>Raised when a request to create a group is successful</summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.GroupJoinedReply">
            <summary>Raised when a request to join a group either
            fails or succeeds</summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.GroupLeaveReply">
            <summary>Raised when a request to leave a group either
            fails or succeeds</summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.GroupDropped">
            <summary>Raised when A group is removed from the group server</summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.GroupMemberEjected">
            <summary>Raised when a request to eject a member from a group either
            fails or succeeds</summary>
        </member>
        <member name="E:OpenMetaverse.GroupManager.GroupNoticesListReply">
            <summary>Raised when the simulator sends us group notices</summary>
            <seealso cref="M:OpenMetaverse.GroupManager.RequestGroupNoticesList(OpenMetaverse.UUID)" />
        </member>
        <member name="E:OpenMetaverse.GroupManager.GroupInvitation">
            <summary>Raised when another agent invites our avatar to join a group</summary>
        </member>
        <member name="M:OpenMetaverse.GroupManager.OnCurrentGroups(OpenMetaverse.CurrentGroupsEventArgs)">
            <summary>Raises the CurrentGroups event</summary>
            <param name="e">A CurrentGroupsEventArgs object containing the
            data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.OnGroupNamesReply(OpenMetaverse.GroupNamesEventArgs)">
            <summary>Raises the GroupNamesReply event</summary>
            <param name="e">A GroupNamesEventArgs object containing the
            data response from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.OnGroupProfile(OpenMetaverse.GroupProfileEventArgs)">
            <summary>Raises the GroupProfile event</summary>
            <param name="e">An GroupProfileEventArgs object containing the
            data returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.OnGroupMembersReply(OpenMetaverse.GroupMembersReplyEventArgs)">
            <summary>Raises the GroupMembers event</summary>
            <param name="e">A GroupMembersEventArgs object containing the
            data returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.OnGroupRoleDataReply(OpenMetaverse.GroupRolesDataReplyEventArgs)">
            <summary>Raises the GroupRolesDataReply event</summary>
            <param name="e">A GroupRolesDataReplyEventArgs object containing the
            data returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.OnGroupRoleMembers(OpenMetaverse.GroupRolesMembersReplyEventArgs)">
            <summary>Raises the GroupRoleMembersReply event</summary>
            <param name="e">A GroupRolesRoleMembersReplyEventArgs object containing the
            data returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.OnGroupTitles(OpenMetaverse.GroupTitlesReplyEventArgs)">
            <summary>Raises the GroupTitlesReply event</summary>
            <param name="e">A GroupTitlesReplyEventArgs object containing the
            data returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.OnGroupAccountSummaryReply(OpenMetaverse.GroupAccountSummaryReplyEventArgs)">
            <summary>Raises the GroupAccountSummary event</summary>
            <param name="e">A GroupAccountSummaryReplyEventArgs object containing the
            data returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.OnGroupCreatedReply(OpenMetaverse.GroupCreatedReplyEventArgs)">
            <summary>Raises the GroupCreated event</summary>
            <param name="e">An GroupCreatedEventArgs object containing the
            data returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.OnGroupJoinedReply(OpenMetaverse.GroupOperationEventArgs)">
            <summary>Raises the GroupJoined event</summary>
            <param name="e">A GroupOperationEventArgs object containing the
            result of the operation returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.OnGroupLeaveReply(OpenMetaverse.GroupOperationEventArgs)">
            <summary>Raises the GroupLeft event</summary>
            <param name="e">A GroupOperationEventArgs object containing the
            result of the operation returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.OnGroupDropped(OpenMetaverse.GroupDroppedEventArgs)">
            <summary>Raises the GroupDropped event</summary>
            <param name="e">An GroupDroppedEventArgs object containing the
            the group your agent left</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.OnGroupMemberEjected(OpenMetaverse.GroupOperationEventArgs)">
            <summary>Raises the GroupMemberEjected event</summary>
            <param name="e">An GroupMemberEjectedEventArgs object containing the
            data returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.OnGroupNoticesListReply(OpenMetaverse.GroupNoticesListReplyEventArgs)">
            <summary>Raises the GroupNoticesListReply event</summary>
            <param name="e">An GroupNoticesListReplyEventArgs object containing the
            data returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.OnGroupInvitation(OpenMetaverse.GroupInvitationEventArgs)">
            <summary>Raises the GroupInvitation event</summary>
            <param name="e">An GroupInvitationEventArgs object containing the
            data returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestCurrentGroups">
            <summary>
            Request a current list of groups the avatar is a member of.
            </summary>
            <remarks>CAPS Event Queue must be running for this to work since the results
            come across CAPS.</remarks>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestGroupName(OpenMetaverse.UUID)">
            <summary>
            Lookup name of group based on groupID
            </summary>
            <param name="groupID">groupID of group to lookup name for.</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestGroupNames(System.Collections.Generic.List{OpenMetaverse.UUID})">
            <summary>
            Request lookup of multiple group names
            </summary>
            <param name="groupIDs">List of group IDs to request.</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestGroupProfile(OpenMetaverse.UUID)">
            <summary>Lookup group profile data such as name, enrollment, founder, logo, etc</summary>
            <remarks>Subscribe to <code>OnGroupProfile</code> event to receive the results.</remarks>
            <param name="group">group ID (UUID)</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestGroupMembers(OpenMetaverse.UUID)">
            <summary>Request a list of group members.</summary>
            <remarks>Subscribe to <code>OnGroupMembers</code> event to receive the results.</remarks>
            <param name="group">group ID (UUID)</param>
            <returns>UUID of the request, use to index into cache</returns>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestGroupRoles(OpenMetaverse.UUID)">
            <summary>Request group roles</summary>
            <remarks>Subscribe to <code>OnGroupRoles</code> event to receive the results.</remarks>
            <param name="group">group ID (UUID)</param>
            <returns>UUID of the request, use to index into cache</returns>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestGroupRolesMembers(OpenMetaverse.UUID)">
            <summary>Request members (members,role) role mapping for a group.</summary>
            <remarks>Subscribe to <code>OnGroupRolesMembers</code> event to receive the results.</remarks>
            <param name="group">group ID (UUID)</param>
            <returns>UUID of the request, use to index into cache</returns>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestGroupTitles(OpenMetaverse.UUID)">
            <summary>Request a groups Titles</summary>
            <remarks>Subscribe to <code>OnGroupTitles</code> event to receive the results.</remarks>
            <param name="group">group ID (UUID)</param>
            <returns>UUID of the request, use to index into cache</returns>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestGroupAccountSummary(OpenMetaverse.UUID,System.Int32,System.Int32)">
            <summary>Begin to get the group account summary</summary>
            <remarks>Subscribe to the <code>OnGroupAccountSummary</code> event to receive the results.</remarks>
            <param name="group">group ID (UUID)</param>
            <param name="intervalDays">How long of an interval</param>
            <param name="currentInterval">Which interval (0 for current, 1 for last)</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.Invite(OpenMetaverse.UUID,System.Collections.Generic.List{OpenMetaverse.UUID},OpenMetaverse.UUID)">
            <summary>Invites a user to a group</summary>
            <param name="group">The group to invite to</param>
            <param name="roles">A list of roles to invite a person to</param>
            <param name="personkey">Key of person to invite</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.ActivateGroup(OpenMetaverse.UUID)">
            <summary>Set a group as the current active group</summary>
            <param name="id">group ID (UUID)</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.ActivateTitle(OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>Change the role that determines your active title</summary>
            <param name="group">Group ID to use</param>
            <param name="role">Role ID to change to</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.SetGroupContribution(OpenMetaverse.UUID,System.Int32)">
            <summary>Set this avatar's tier contribution</summary>
            <param name="group">Group ID to change tier in</param>
            <param name="contribution">amount of tier to donate</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.SetGroupAcceptNotices(OpenMetaverse.UUID,System.Boolean,System.Boolean)">
            <summary>
            Save wheather agent wants to accept group notices and list this group in their profile
            </summary>
            <param name="groupID">Group <see cref="T:OpenMetaverse.UUID" /></param>
            <param name="acceptNotices">Accept notices from this group</param>
            <param name="listInProfile">List this group in the profile</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestJoinGroup(OpenMetaverse.UUID)">
            <summary>Request to join a group</summary>
            <remarks>Subscribe to <code>OnGroupJoined</code> event for confirmation.</remarks>
            <param name="id">group ID (UUID) to join.</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestCreateGroup(OpenMetaverse.Group)">
            <summary>
            Request to create a new group. If the group is successfully
            created, L$100 will automatically be deducted
            </summary>
            <remarks>Subscribe to <code>OnGroupCreated</code> event to receive confirmation.</remarks>
            <param name="group">Group struct containing the new group info</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.UpdateGroup(OpenMetaverse.UUID,OpenMetaverse.Group)">
            <summary>Update a group's profile and other information</summary>
            <param name="id">Groups ID (UUID) to update.</param>
            <param name="group">Group struct to update.</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.EjectUser(OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>Eject a user from a group</summary>
            <param name="group">Group ID to eject the user from</param>
            <param name="member">Avatar's key to eject</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.UpdateRole(OpenMetaverse.GroupRole)">
            <summary>Update role information</summary>
            <param name="role">Modified role to be updated</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.CreateRole(OpenMetaverse.UUID,OpenMetaverse.GroupRole)">
            <summary>Create a new group role</summary>
            <param name="group">Group ID to update</param>
            <param name="role">Role to create</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.DeleteRole(OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>Delete a group role</summary>
            <param name="group">Group ID to update</param>
            <param name="roleID">Role to delete</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RemoveFromRole(OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>Remove an avatar from a role</summary>
            <param name="group">Group ID to update</param>
            <param name="role">Role ID to be removed from</param>
            <param name="member">Avatar's Key to remove</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.AddToRole(OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>Assign an avatar to a role</summary>
            <param name="group">Group ID to update</param>
            <param name="role">Role ID to assign to</param>
            <param name="member">Avatar's ID to assign to role</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestGroupNoticesList(OpenMetaverse.UUID)">
            <summary>Request the group notices list</summary>
            <param name="group">Group ID to fetch notices for</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.RequestGroupNotice(OpenMetaverse.UUID)">
            <summary>Request a group notice by key</summary>
            <param name="noticeID">ID of group notice</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.SendGroupNotice(OpenMetaverse.UUID,OpenMetaverse.GroupNotice)">
            <summary>Send out a group notice</summary>
            <param name="group">Group ID to update</param>
            <param name="notice">
                <code>GroupNotice</code> structure containing notice data</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.StartProposal(OpenMetaverse.UUID,OpenMetaverse.GroupProposal)">
            <summary>Start a group proposal (vote)</summary>
            <param name="group">The Group ID to send proposal to</param>
            <param name="prop">
                <code>GroupProposal</code> structure containing the proposal</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.LeaveGroup(OpenMetaverse.UUID)">
            <summary>Request to leave a group</summary>
            <remarks>Subscribe to <code>OnGroupLeft</code> event to receive confirmation</remarks>
            <param name="groupID">The group to leave</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.AgentDropGroupHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.GroupProfileReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.GroupNoticesListReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.GroupTitlesReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.GroupMembersHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.GroupRoleDataReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.GroupRoleMembersReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.GroupActiveProposalItemHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.GroupVoteHistoryItemHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.GroupAccountSummaryReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.CreateGroupReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.JoinGroupReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.LeaveGroupReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.UUIDGroupNameReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.GroupManager.EjectGroupMemberReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="T:OpenMetaverse.CurrentGroupsEventArgs">
            <summary>Contains the current groups your agent is a member of</summary>
        </member>
        <member name="M:OpenMetaverse.CurrentGroupsEventArgs.#ctor(System.Collections.Generic.Dictionary{OpenMetaverse.UUID,OpenMetaverse.Group})">
            <summary>Construct a new instance of the CurrentGroupsEventArgs class</summary>
            <param name="groups">The current groups your agent is a member of</param>
        </member>
        <member name="P:OpenMetaverse.CurrentGroupsEventArgs.Groups">
            <summary>Get the current groups your agent is a member of</summary>
        </member>
        <member name="T:OpenMetaverse.GroupNamesEventArgs">
            <summary>A Dictionary of group names, where the Key is the groups ID and the value is the groups name</summary>
        </member>
        <member name="M:OpenMetaverse.GroupNamesEventArgs.#ctor(System.Collections.Generic.Dictionary{OpenMetaverse.UUID,System.String})">
            <summary>Construct a new instance of the GroupNamesEventArgs class</summary>
            <param name="groupNames">The Group names dictionary</param>
        </member>
        <member name="P:OpenMetaverse.GroupNamesEventArgs.GroupNames">
            <summary>Get the Group Names dictionary</summary>
        </member>
        <member name="T:OpenMetaverse.GroupMembersReplyEventArgs">
            <summary>Represents the members of a group</summary>
        </member>
        <member name="M:OpenMetaverse.GroupMembersReplyEventArgs.#ctor(OpenMetaverse.UUID,OpenMetaverse.UUID,System.Collections.Generic.Dictionary{OpenMetaverse.UUID,OpenMetaverse.GroupMember})">
            <summary>
            Construct a new instance of the GroupMembersReplyEventArgs class
            </summary>
            <param name="requestID">The ID of the request</param>
            <param name="groupID">The ID of the group</param>
            <param name="members">The membership list of the group</param>
        </member>
        <member name="P:OpenMetaverse.GroupMembersReplyEventArgs.RequestID">
            <summary>Get the ID as returned by the request to correlate
            this result set and the request</summary>
        </member>
        <member name="P:OpenMetaverse.GroupMembersReplyEventArgs.GroupID">
            <summary>Get the ID of the group</summary>
        </member>
        <member name="P:OpenMetaverse.GroupMembersReplyEventArgs.Members">
            <summary>Get the dictionary of members</summary>
        </member>
        <member name="T:OpenMetaverse.GroupRolesDataReplyEventArgs">
            <summary>Represents the roles associated with a group</summary>
        </member>
        <member name="M:OpenMetaverse.GroupRolesDataReplyEventArgs.#ctor(OpenMetaverse.UUID,OpenMetaverse.UUID,System.Collections.Generic.Dictionary{OpenMetaverse.UUID,OpenMetaverse.GroupRole})">
            <summary>Construct a new instance of the GroupRolesDataReplyEventArgs class</summary>
            <param name="requestID">The ID as returned by the request to correlate
            this result set and the request</param>
            <param name="groupID">The ID of the group</param>
            <param name="roles">The dictionary containing the roles</param>
        </member>
        <member name="P:OpenMetaverse.GroupRolesDataReplyEventArgs.RequestID">
            <summary>Get the ID as returned by the request to correlate
            this result set and the request</summary>
        </member>
        <member name="P:OpenMetaverse.GroupRolesDataReplyEventArgs.GroupID">
            <summary>Get the ID of the group</summary>
        </member>
        <member name="P:OpenMetaverse.GroupRolesDataReplyEventArgs.Roles">
            <summary>Get the dictionary containing the roles</summary>
        </member>
        <member name="T:OpenMetaverse.GroupRolesMembersReplyEventArgs">
            <summary>Represents the Role to Member mappings for a group</summary>
        </member>
        <member name="M:OpenMetaverse.GroupRolesMembersReplyEventArgs.#ctor(OpenMetaverse.UUID,OpenMetaverse.UUID,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{OpenMetaverse.UUID,OpenMetaverse.UUID}})">
            <summary>Construct a new instance of the GroupRolesMembersReplyEventArgs class</summary>
            <param name="requestID">The ID as returned by the request to correlate
            this result set and the request</param>
            <param name="groupID">The ID of the group</param>
            <param name="rolesMembers">The member to roles map</param>
        </member>
        <member name="P:OpenMetaverse.GroupRolesMembersReplyEventArgs.RequestID">
            <summary>Get the ID as returned by the request to correlate
            this result set and the request</summary>
        </member>
        <member name="P:OpenMetaverse.GroupRolesMembersReplyEventArgs.GroupID">
            <summary>Get the ID of the group</summary>
        </member>
        <member name="P:OpenMetaverse.GroupRolesMembersReplyEventArgs.RolesMembers">
            <summary>Get the member to roles map</summary>
        </member>
        <member name="T:OpenMetaverse.GroupTitlesReplyEventArgs">
            <summary>Represents the titles for a group</summary>
        </member>
        <member name="M:OpenMetaverse.GroupTitlesReplyEventArgs.#ctor(OpenMetaverse.UUID,OpenMetaverse.UUID,System.Collections.Generic.Dictionary{OpenMetaverse.UUID,OpenMetaverse.GroupTitle})">
            <summary>Construct a new instance of the GroupTitlesReplyEventArgs class</summary>
            <param name="requestID">The ID as returned by the request to correlate
            this result set and the request</param>
            <param name="groupID">The ID of the group</param>
            <param name="titles">The titles</param>
        </member>
        <member name="P:OpenMetaverse.GroupTitlesReplyEventArgs.RequestID">
            <summary>Get the ID as returned by the request to correlate
            this result set and the request</summary>
        </member>
        <member name="P:OpenMetaverse.GroupTitlesReplyEventArgs.GroupID">
            <summary>Get the ID of the group</summary>
        </member>
        <member name="P:OpenMetaverse.GroupTitlesReplyEventArgs.Titles">
            <summary>Get the titles</summary>
        </member>
        <member name="T:OpenMetaverse.GroupAccountSummaryReplyEventArgs">
            <summary>Represents the summary data for a group</summary>
        </member>
        <member name="M:OpenMetaverse.GroupAccountSummaryReplyEventArgs.#ctor(OpenMetaverse.UUID,OpenMetaverse.GroupAccountSummary)">
            <summary>Construct a new instance of the GroupAccountSummaryReplyEventArgs class</summary>
            <param name="groupID">The ID of the group</param>
            <param name="summary">The summary data</param>
        </member>
        <member name="P:OpenMetaverse.GroupAccountSummaryReplyEventArgs.GroupID">
            <summary>Get the ID of the group</summary>
        </member>
        <member name="P:OpenMetaverse.GroupAccountSummaryReplyEventArgs.Summary">
            <summary>Get the summary data</summary>
        </member>
        <member name="T:OpenMetaverse.GroupCreatedReplyEventArgs">
            <summary>A response to a group create request</summary>
        </member>
        <member name="M:OpenMetaverse.GroupCreatedReplyEventArgs.#ctor(OpenMetaverse.UUID,System.Boolean,System.String)">
            <summary>Construct a new instance of the GroupCreatedReplyEventArgs class</summary>
            <param name="groupID">The ID of the group</param>
            <param name="success">the success or faulure of the request</param>
            <param name="messsage">A string containing additional information</param>
        </member>
        <member name="P:OpenMetaverse.GroupCreatedReplyEventArgs.GroupID">
            <summary>Get the ID of the group</summary>
        </member>
        <member name="P:OpenMetaverse.GroupCreatedReplyEventArgs.Success">
            <summary>true of the  group was created successfully</summary>
        </member>
        <member name="P:OpenMetaverse.GroupCreatedReplyEventArgs.Message">
            <summary>A string containing the message</summary>
        </member>
        <member name="T:OpenMetaverse.GroupOperationEventArgs">
            <summary>Represents a response to a request</summary>
        </member>
        <member name="M:OpenMetaverse.GroupOperationEventArgs.#ctor(OpenMetaverse.UUID,System.Boolean)">
            <summary>Construct a new instance of the GroupOperationEventArgs class</summary>
            <param name="groupID">The ID of the group</param>
            <param name="success">true of the request was successful</param>
        </member>
        <member name="P:OpenMetaverse.GroupOperationEventArgs.GroupID">
            <summary>Get the ID of the group</summary>
        </member>
        <member name="P:OpenMetaverse.GroupOperationEventArgs.Success">
            <summary>true of the request was successful</summary>
        </member>
        <member name="T:OpenMetaverse.GroupDroppedEventArgs">
            <summary>Represents your agent leaving a group</summary>
        </member>
        <member name="M:OpenMetaverse.GroupDroppedEventArgs.#ctor(OpenMetaverse.UUID)">
            <summary>Construct a new instance of the GroupDroppedEventArgs class</summary>
            <param name="groupID">The ID of the group</param>
        </member>
        <member name="P:OpenMetaverse.GroupDroppedEventArgs.GroupID">
            <summary>Get the ID of the group</summary>
        </member>
        <member name="T:OpenMetaverse.GroupNoticesListReplyEventArgs">
            <summary>Represents a list of active group notices</summary>
        </member>
        <member name="M:OpenMetaverse.GroupNoticesListReplyEventArgs.#ctor(OpenMetaverse.UUID,System.Collections.Generic.List{OpenMetaverse.GroupNoticesListEntry})">
            <summary>Construct a new instance of the GroupNoticesListReplyEventArgs class</summary>
            <param name="groupID">The ID of the group</param>
            <param name="notices">The list containing active notices</param>
        </member>
        <member name="P:OpenMetaverse.GroupNoticesListReplyEventArgs.GroupID">
            <summary>Get the ID of the group</summary>
        </member>
        <member name="P:OpenMetaverse.GroupNoticesListReplyEventArgs.Notices">
            <summary>Get the notices list</summary>
        </member>
        <member name="T:OpenMetaverse.GroupProfileEventArgs">
            <summary>Represents the profile of a group</summary>
        </member>
        <member name="M:OpenMetaverse.GroupProfileEventArgs.#ctor(OpenMetaverse.Group)">
            <summary>Construct a new instance of the GroupProfileEventArgs class</summary>
            <param name="group">The group profile</param>
        </member>
        <member name="P:OpenMetaverse.GroupProfileEventArgs.Group">
            <summary>Get the group profile</summary>
        </member>
        <member name="T:OpenMetaverse.GroupInvitationEventArgs">
            <summary>
            Provides notification of a group invitation request sent by another Avatar
            </summary>
            <remarks>The <see cref="!:GroupInvitation" /> invitation is raised when another avatar makes an offer for our avatar
            to join a group.</remarks>
        </member>
        <member name="P:OpenMetaverse.GroupInvitationEventArgs.AgentID">
            <summary>The ID of the Avatar sending the group invitation</summary>
        </member>
        <member name="P:OpenMetaverse.GroupInvitationEventArgs.FromName">
            <summary>The name of the Avatar sending the group invitation</summary>
        </member>
        <member name="P:OpenMetaverse.GroupInvitationEventArgs.Message">
            <summary>A message containing the request information which includes
            the name of the group, the groups charter and the fee to join details</summary>
        </member>
        <member name="P:OpenMetaverse.GroupInvitationEventArgs.Simulator">
            <summary>The Simulator</summary>
        </member>
        <member name="P:OpenMetaverse.GroupInvitationEventArgs.Accept">
            <summary>Set to true to accept invitation, false to decline</summary>
        </member>
        <member name="T:OpenMetaverse.Helpers">
            <summary>
            Static helper functions and global variables
            </summary>
        </member>
        <member name="T:OpenMetaverse.Helpers.LogLevel">
            <summary>
            Passed to Logger.Log() to identify the severity of a log entry
            </summary>
        </member>
        <member name="F:OpenMetaverse.Helpers.LogLevel.None">
            <summary>No logging information will be output</summary>
        </member>
        <member name="F:OpenMetaverse.Helpers.LogLevel.Info">
            <summary>Non-noisy useful information, may be helpful in
            debugging a problem</summary>
        </member>
        <member name="F:OpenMetaverse.Helpers.LogLevel.Warning">
            <summary>A non-critical error occurred. A warning will not
            prevent the rest of the library from operating as usual,
            although it may be indicative of an underlying issue</summary>
        </member>
        <member name="F:OpenMetaverse.Helpers.LogLevel.Error">
            <summary>A critical error has occurred. Generally this will
            be followed by the network layer shutting down, although the
            stability of the library after an error is uncertain</summary>
        </member>
        <member name="F:OpenMetaverse.Helpers.LogLevel.Debug">
            <summary>Used for internal testing, this logging level can
            generate very noisy (long and/or repetitive) messages. Don't
            pass this to the Log() function, use DebugLog() instead.
            </summary>
        </member>
        <member name="F:OpenMetaverse.Helpers.MSG_APPENDED_ACKS">
            <summary>This header flag signals that ACKs are appended to the packet</summary>
        </member>
        <member name="F:OpenMetaverse.Helpers.MSG_RESENT">
            <summary>This header flag signals that this packet has been sent before</summary>
        </member>
        <member name="F:OpenMetaverse.Helpers.MSG_RELIABLE">
            <summary>This header flags signals that an ACK is expected for this packet</summary>
        </member>
        <member name="F:OpenMetaverse.Helpers.MSG_ZEROCODED">
            <summary>This header flag signals that the message is compressed using zerocoding</summary>
        </member>
        <member name="M:OpenMetaverse.Helpers.TEOffsetShort(System.Single)">
            <summary>
            </summary>
            <param name="offset">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.TEOffsetFloat(System.Byte[],System.Int32)">
            <summary>
            </summary>
            <param name="bytes">
            </param>
            <param name="pos">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.TERotationShort(System.Single)">
            <summary>
            </summary>
            <param name="rotation">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.TERotationFloat(System.Byte[],System.Int32)">
            <summary>
            </summary>
            <param name="bytes">
            </param>
            <param name="pos">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.GlobalPosToRegionHandle(System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Given an X/Y location in absolute (grid-relative) terms, a region
            handle is returned along with the local X/Y location in that region
            </summary>
            <param name="globalX">The absolute X location, a number such as
            255360.35</param>
            <param name="globalY">The absolute Y location, a number such as
            255360.35</param>
            <param name="localX">The sim-local X position of the global X
            position, a value from 0.0 to 256.0</param>
            <param name="localY">The sim-local Y position of the global Y
            position, a value from 0.0 to 256.0</param>
            <returns>A 64-bit region handle that can be used to teleport to</returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.FloatToTerseString(System.Single)">
            <summary>
            Converts a floating point number to a terse string format used for
            transmitting numbers in wearable asset files
            </summary>
            <param name="val">Floating point number to convert to a string</param>
            <returns>A terse string representation of the input number</returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.FieldToString(System.Text.StringBuilder,System.Byte[],System.String)">
            <summary>
            Convert a variable length field (byte array) to a string, with a
            field name prepended to each line of the output
            </summary>
            <remarks>If the byte array has unprintable characters in it, a
            hex dump will be written instead</remarks>
            <param name="output">The StringBuilder object to write to</param>
            <param name="bytes">The byte array to convert to a string</param>
            <param name="fieldName">A field name to prepend to each line of output</param>
        </member>
        <member name="M:OpenMetaverse.Helpers.ZeroDecode(System.Byte[],System.Int32,System.Byte[])">
            <summary>
            Decode a zerocoded byte array, used to decompress packets marked
            with the zerocoded flag
            </summary>
            <remarks>Any time a zero is encountered, the next byte is a count
            of how many zeroes to expand. One zero is encoded with 0x00 0x01,
            two zeroes is 0x00 0x02, three zeroes is 0x00 0x03, etc. The
            first four bytes are copied directly to the output buffer.
            </remarks>
            <param name="src">The byte array to decode</param>
            <param name="srclen">The length of the byte array to decode. This
            would be the length of the packet up to (but not including) any
            appended ACKs</param>
            <param name="dest">The output byte array to decode to</param>
            <returns>The length of the output buffer</returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.ZeroEncode(System.Byte[],System.Int32,System.Byte[])">
            <summary>
            Encode a byte array with zerocoding. Used to compress packets marked
            with the zerocoded flag. Any zeroes in the array are compressed down
            to a single zero byte followed by a count of how many zeroes to expand
            out. A single zero becomes 0x00 0x01, two zeroes becomes 0x00 0x02,
            three zeroes becomes 0x00 0x03, etc. The first four bytes are copied
            directly to the output buffer.
            </summary>
            <param name="src">The byte array to encode</param>
            <param name="srclen">The length of the byte array to encode</param>
            <param name="dest">The output byte array to encode to</param>
            <returns>The length of the output buffer</returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.InventoryCRC(System.Int32,System.Byte,System.SByte,System.SByte,OpenMetaverse.UUID,OpenMetaverse.UUID,System.Int32,OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.UUID,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Calculates the CRC (cyclic redundancy check) needed to upload inventory.
            </summary>
            <param name="creationDate">Creation date</param>
            <param name="saleType">Sale type</param>
            <param name="invType">Inventory type</param>
            <param name="type">Type</param>
            <param name="assetID">Asset ID</param>
            <param name="groupID">Group ID</param>
            <param name="salePrice">Sale price</param>
            <param name="ownerID">Owner ID</param>
            <param name="creatorID">Creator ID</param>
            <param name="itemID">Item ID</param>
            <param name="folderID">Folder ID</param>
            <param name="everyoneMask">Everyone mask (permissions)</param>
            <param name="flags">Flags</param>
            <param name="nextOwnerMask">Next owner mask (permissions)</param>
            <param name="groupMask">Group mask (permissions)</param>
            <param name="ownerMask">Owner mask (permissions)</param>
            <returns>The calculated CRC</returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.GetResourceStream(System.String)">
            <summary>
            Attempts to load a file embedded in the assembly
            </summary>
            <param name="resourceName">The filename of the resource to load</param>
            <returns>A Stream for the requested file, or null if the resource
            was not successfully loaded</returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.GetResourceStream(System.String,System.String)">
            <summary>
            Attempts to load a file either embedded in the assembly or found in
            a given search path
            </summary>
            <param name="resourceName">The filename of the resource to load</param>
            <param name="searchPath">An optional path that will be searched if
            the asset is not found embedded in the assembly</param>
            <returns>A Stream for the requested file, or null if the resource
            was not successfully loaded</returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.PrimListToOSD(System.Collections.Generic.List{OpenMetaverse.Primitive})">
            <summary>
            Converts a list of primitives to an object that can be serialized
            with the LLSD system
            </summary>
            <param name="prims">Primitives to convert to a serializable object</param>
            <returns>An object that can be serialized with LLSD</returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.OSDToPrimList(OpenMetaverse.StructuredData.OSD)">
            <summary>
            Deserializes OSD in to a list of primitives
            </summary>
            <param name="osd">Structure holding the serialized primitive list,
            must be of the SDMap type</param>
            <returns>A list of deserialized primitives</returns>
        </member>
        <member name="M:OpenMetaverse.Helpers.StructToString(System.Object)">
            <summary>
            Converts a struct or class object containing fields only into a key value separated string
            </summary>
            <param name="t">The struct object</param>
            <returns>A string containing the struct fields as the keys, and the field value as the value separated</returns>
            <example>
                <code>
            // Add the following code to any struct or class containing only fields to override the ToString()
            // method to display the values of the passed object
            /// <summary>Print the struct data as a string</summary>
            ///<returns>A string containing the field name, and field value</returns>
            public override string ToString()
            {
            return Helpers.StructToString(this);
            }
            </code>
            </example>
        </member>
        <member name="T:OpenMetaverse.InternalDictionary`2">
            <summary>
            The InternalDictionary class is used through the library for storing key/value pairs.
            It is intended to be a replacement for the generic Dictionary class and should
            be used in its place. It contains several methods for allowing access to the data from
            outside the library that are read only and thread safe.
            </summary>
            <typeparam name="TKey">Key <see langword="Tkey" /></typeparam>
            <typeparam name="TValue">Value <see langword="TValue" /></typeparam>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <seealso cref="T:InternalDictionary" /> Class
            with the specified key/value, has the default initial capacity.
            </summary>
            <example>
                <code>
            // initialize a new InternalDictionary named testDict with a string as the key and an int as the value.
            public InternalDictionary&lt;string, int&gt; testDict = new InternalDictionary&lt;string, int&gt;();
            </code>
            </example>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <seealso cref="T:InternalDictionary" /> Class
            with the specified key/value, has its initial valies copied from the specified
            <seealso cref="T:System.Collections.Generic.Dictionary" /></summary>
            <param name="dictionary">
                <seealso cref="T:System.Collections.Generic.Dictionary" />
            to copy initial values from</param>
            <example>
                <code>
            // initialize a new InternalDictionary named testAvName with a UUID as the key and an string as the value.
            // populates with copied values from example KeyNameCache Dictionary.
            // create source dictionary
            Dictionary&lt;UUID, string&gt; KeyNameCache = new Dictionary&lt;UUID, string&gt;();
            KeyNameCache.Add("8300f94a-7970-7810-cf2c-fc9aa6cdda24", "Jack Avatar");
            KeyNameCache.Add("27ba1e40-13f7-0708-3e98-5819d780bd62", "Jill Avatar");
            // Initialize new dictionary.
            public InternalDictionary&lt;UUID, string&gt; testAvName = new InternalDictionary&lt;UUID, string&gt;(KeyNameCache);
            </code>
            </example>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <seealso cref="T:OpenMetaverse.InternalDictionary" /> Class
            with the specified key/value, With its initial capacity specified.
            </summary>
            <param name="capacity">Initial size of dictionary</param>
            <example>
                <code>
            // initialize a new InternalDictionary named testDict with a string as the key and an int as the value,
            // initially allocated room for 10 entries.
            public InternalDictionary&lt;string, int&gt; testDict = new InternalDictionary&lt;string, int&gt;(10);
            </code>
            </example>
        </member>
        <member name="F:OpenMetaverse.InternalDictionary`2.Dictionary">
            <summary>Internal dictionary that this class wraps around. Do not
            modify or enumerate the contents of this dictionary without locking
            on this member</summary>
        </member>
        <member name="P:OpenMetaverse.InternalDictionary`2.Item(`0)">
            <summary>
            Indexer for the dictionary
            </summary>
            <param name="key">The key</param>
            <returns>The value</returns>
        </member>
        <member name="P:OpenMetaverse.InternalDictionary`2.Count">
            <summary>
            Gets the number of Key/Value pairs contained in the <seealso cref="T:InternalDictionary" /></summary>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Try to get entry from <seealso cref="T:OpenMetaverse.InternalDictionary" /> with specified key
            </summary>
            <param name="key">Key to use for lookup</param>
            <param name="value">Value returned</param>
            <returns>
                <see langword="true" /> if specified key exists,  <see langword="false" /> if not found</returns>
            <example>
                <code>
            // find your avatar using the Simulator.ObjectsAvatars InternalDictionary:
            Avatar av;
            if (Client.Network.CurrentSim.ObjectsAvatars.TryGetValue(Client.Self.AgentID, out av))
            Console.WriteLine("Found Avatar {0}", av.Name);
            </code>
                <seealso cref="F:OpenMetaverse.Simulator.ObjectsAvatars" />
            </example>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.Find(System.Predicate{`1})">
            <summary>
            Finds the specified match.
            </summary>
            <param name="match">The match.</param>
            <returns>Matched value</returns>
            <example>
                <code>
            // use a delegate to find a prim in the ObjectsPrimitives InternalDictionary
            // with the ID 95683496
            uint findID = 95683496;
            Primitive findPrim = sim.ObjectsPrimitives.Find(
            delegate(Primitive prim) { return prim.ID == findID; });
            </code>
            </example>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.FindAll(System.Predicate{`1})">
            <summary>Find All items in an <seealso cref="T:InternalDictionary" /></summary>
            <param name="match">return matching items.</param>
            <returns>a <seealso cref="T:System.Collections.Generic.List" /> containing found items.</returns>
            <example>
            Find All prims within 20 meters and store them in a List
            <code>
            int radius = 20;
            List&lt;Primitive&gt; prims = Client.Network.CurrentSim.ObjectsPrimitives.FindAll(
            delegate(Primitive prim) {
            Vector3 pos = prim.Position;
            return ((prim.ParentID == 0) &amp;&amp; (pos != Vector3.Zero) &amp;&amp; (Vector3.Distance(pos, location) &lt; radius));
            }
            );
            </code></example>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.FindAll(System.Predicate{`0})">
            <summary>Find All items in an <seealso cref="T:InternalDictionary" /></summary>
            <param name="match">return matching keys.</param>
            <returns>a <seealso cref="T:System.Collections.Generic.List" /> containing found keys.</returns>
            <example>
            Find All keys which also exist in another dictionary
            <code>
            List&lt;UUID&gt; matches = myDict.FindAll(
            delegate(UUID id) {
            return myOtherDict.ContainsKey(id);
            }
            );
            </code></example>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.ForEach(System.Action{`1})">
            <summary>Perform an <seealso cref="T:System.Action" /> on each entry in an <seealso cref="T:OpenMetaverse.InternalDictionary" /></summary>
            <param name="action">
                <seealso cref="T:System.Action" /> to perform</param>
            <example>
                <code>
            // Iterates over the ObjectsPrimitives InternalDictionary and prints out some information.
            Client.Network.CurrentSim.ObjectsPrimitives.ForEach(
            delegate(Primitive prim)
            {
            if (prim.Text != null)
            {
            Console.WriteLine("NAME={0} ID = {1} TEXT = '{2}'",
            prim.PropertiesFamily.Name, prim.ID, prim.Text);
            }
            });
            </code>
            </example>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.ForEach(System.Action{`0})">
            <summary>Perform an <seealso cref="T:System.Action" /> on each key of an <seealso cref="T:OpenMetaverse.InternalDictionary" /></summary>
            <param name="action">
                <seealso cref="T:System.Action" /> to perform</param>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.ForEach(System.Action{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Perform an <seealso cref="T:System.Action" /> on each KeyValuePair of an <seealso cref="T:OpenMetaverse.InternalDictionary" /></summary>
            <param name="action">
                <seealso cref="T:System.Action" /> to perform</param>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.ContainsKey(`0)">
            <summary>Check if Key exists in Dictionary</summary>
            <param name="key">Key to check for</param>
            <returns>
                <see langword="true" /> if found, <see langword="false" /> otherwise</returns>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.ContainsValue(`1)">
            <summary>Check if Value exists in Dictionary</summary>
            <param name="value">Value to check for</param>
            <returns>
                <see langword="true" /> if found, <see langword="false" /> otherwise</returns>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key to the dictionary, dictionary locking is not performed,
            <see cref="!:SafeAdd" /></summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
        </member>
        <member name="M:OpenMetaverse.InternalDictionary`2.Remove(`0)">
            <summary>
            Removes the specified key, dictionary locking is not performed
            </summary>
            <param name="key">The key.</param>
            <returns>
                <see langword="true" /> if successful, <see langword="false" /> otherwise</returns>
        </member>
        <member name="T:OpenMetaverse.InventoryException">
            <summary>
            Exception class to identify inventory exceptions
            </summary>
        </member>
        <member name="T:OpenMetaverse.Inventory">
            <summary>
            Responsible for maintaining inventory structure. Inventory constructs nodes
            and manages node children as is necessary to maintain a coherant hirarchy.
            Other classes should not manipulate or create InventoryNodes explicitly. When
            A node's parent changes (when a folder is moved, for example) simply pass
            Inventory the updated InventoryFolder and it will make the appropriate changes
            to its internal representation.
            </summary>
        </member>
        <member name="F:OpenMetaverse.Inventory.m_InventoryObjectUpdated">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.Inventory.m_InventoryObjectUpdatedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.Inventory.m_InventoryObjectRemoved">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.Inventory.m_InventoryObjectRemovedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.Inventory.m_InventoryObjectAdded">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.Inventory.m_InventoryObjectAddedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="E:OpenMetaverse.Inventory.InventoryObjectUpdated">
            <summary>Raised when the simulator sends us data containing
            ...</summary>
        </member>
        <member name="E:OpenMetaverse.Inventory.InventoryObjectRemoved">
            <summary>Raised when the simulator sends us data containing
            ...</summary>
        </member>
        <member name="E:OpenMetaverse.Inventory.InventoryObjectAdded">
            <summary>Raised when the simulator sends us data containing
            ...</summary>
        </member>
        <member name="P:OpenMetaverse.Inventory.Item(OpenMetaverse.UUID)">
            <summary>
            By using the bracket operator on this class, the program can get the
            InventoryObject designated by the specified uuid. If the value for the corresponding
            UUID is null, the call is equivelant to a call to <code>RemoveNodeFor(this[uuid])</code>.
            If the value is non-null, it is equivelant to a call to <code>UpdateNodeFor(value)</code>,
            the uuid parameter is ignored.
            </summary>
            <param name="uuid">The UUID of the InventoryObject to get or set, ignored if set to non-null value.</param>
            <returns>The InventoryObject corresponding to <code>uuid</code>.</returns>
        </member>
        <member name="P:OpenMetaverse.Inventory.RootFolder">
            <summary>
            The root folder of this avatars inventory
            </summary>
        </member>
        <member name="P:OpenMetaverse.Inventory.LibraryFolder">
            <summary>
            The default shared library folder
            </summary>
        </member>
        <member name="P:OpenMetaverse.Inventory.RootNode">
            <summary>
            The root node of the avatars inventory
            </summary>
        </member>
        <member name="P:OpenMetaverse.Inventory.LibraryRootNode">
            <summary>
            The root node of the default shared library
            </summary>
        </member>
        <member name="M:OpenMetaverse.Inventory.OnInventoryObjectUpdated(OpenMetaverse.InventoryObjectUpdatedEventArgs)">
            <summary>Raises the InventoryObjectUpdated Event</summary>
            <param name="e">A InventoryObjectUpdatedEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.Inventory.OnInventoryObjectRemoved(OpenMetaverse.InventoryObjectRemovedEventArgs)">
            <summary>Raises the InventoryObjectRemoved Event</summary>
            <param name="e">A InventoryObjectRemovedEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.Inventory.OnInventoryObjectAdded(OpenMetaverse.InventoryObjectAddedEventArgs)">
            <summary>Raises the InventoryObjectAdded Event</summary>
            <param name="e">A InventoryObjectAddedEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.Inventory.GetContents(OpenMetaverse.UUID)">
            <summary>
            Returns the contents of the specified folder
            </summary>
            <param name="folder">A folder's UUID</param>
            <returns>The contents of the folder corresponding to <code>folder</code></returns>
            <exception cref="T:OpenMetaverse.InventoryException">When <code>folder</code> does not exist in the inventory</exception>
        </member>
        <member name="M:OpenMetaverse.Inventory.UpdateNodeFor(OpenMetaverse.InventoryBase)">
            <summary>
            Updates the state of the InventoryNode and inventory data structure that
            is responsible for the InventoryObject. If the item was previously not added to inventory,
            it adds the item, and updates structure accordingly. If it was, it updates the
            InventoryNode, changing the parent node if <code>item.parentUUID</code> does
            not match <code>node.Parent.Data.UUID</code>.
            You can not set the inventory root folder using this method
            </summary>
            <param name="item">The InventoryObject to store</param>
        </member>
        <member name="M:OpenMetaverse.Inventory.RemoveNodeFor(OpenMetaverse.InventoryBase)">
            <summary>
            Removes the InventoryObject and all related node data from Inventory.
            </summary>
            <param name="item">The InventoryObject to remove.</param>
        </member>
        <member name="M:OpenMetaverse.Inventory.Contains(OpenMetaverse.UUID)">
            <summary>
            Used to find out if Inventory contains the InventoryObject
            specified by <code>uuid</code>.
            </summary>
            <param name="uuid">The UUID to check.</param>
            <returns>true if inventory contains uuid, false otherwise</returns>
        </member>
        <member name="M:OpenMetaverse.Inventory.SaveToDisk(System.String)">
            <summary>
            Saves the current inventory structure to a cache file
            </summary>
            <param name="filename">Name of the cache file to save to</param>
        </member>
        <member name="M:OpenMetaverse.Inventory.RestoreFromDisk(System.String)">
            <summary>
            Loads in inventory cache file into the inventory structure. Note only valid to call after login has been successful.
            </summary>
            <param name="filename">Name of the cache file to load</param>
            <returns>The number of inventory items sucessfully reconstructed into the inventory node tree</returns>
        </member>
        <member name="F:OpenMetaverse.InventorySortOrder.ByName">
            <summary>Sort by name</summary>
        </member>
        <member name="F:OpenMetaverse.InventorySortOrder.ByDate">
            <summary>Sort by date</summary>
        </member>
        <member name="F:OpenMetaverse.InventorySortOrder.FoldersByName">
            <summary>Sort folders by name, regardless of whether items are
            sorted by name or date</summary>
        </member>
        <member name="F:OpenMetaverse.InventorySortOrder.SystemFoldersToTop">
            <summary>Place system folders at the top</summary>
        </member>
        <member name="T:OpenMetaverse.DeRezDestination">
            <summary>
            Possible destinations for DeRezObject request
            </summary>
        </member>
        <member name="F:OpenMetaverse.DeRezDestination.AgentInventorySave">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DeRezDestination.AgentInventoryCopy">
            <summary>Copy from in-world to agent inventory</summary>
        </member>
        <member name="F:OpenMetaverse.DeRezDestination.TaskInventory">
            <summary>Derez to TaskInventory</summary>
        </member>
        <member name="F:OpenMetaverse.DeRezDestination.Attachment">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DeRezDestination.AgentInventoryTake">
            <summary>Take Object</summary>
        </member>
        <member name="F:OpenMetaverse.DeRezDestination.ForceToGodInventory">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DeRezDestination.TrashFolder">
            <summary>Delete Object</summary>
        </member>
        <member name="F:OpenMetaverse.DeRezDestination.AttachmentToInventory">
            <summary>Put an avatar attachment into agent inventory</summary>
        </member>
        <member name="F:OpenMetaverse.DeRezDestination.AttachmentExists">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DeRezDestination.ReturnToOwner">
            <summary>Return an object back to the owner's inventory</summary>
        </member>
        <member name="F:OpenMetaverse.DeRezDestination.ReturnToLastOwner">
            <summary>Return a deeded object back to the last owner's inventory</summary>
        </member>
        <member name="T:OpenMetaverse.InventoryItemFlags">
            <summary>
            Upper half of the Flags field for inventory items
            </summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItemFlags.ObjectSlamPerm">
            <summary>Indicates that the NextOwner permission will be set to the
            most restrictive set of permissions found in the object set
            (including linkset items and object inventory items) on next rez</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItemFlags.ObjectSlamSale">
            <summary>Indicates that the object sale information has been
            changed</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItemFlags.ObjectOverwriteBase">
            <summary>If set, and a slam bit is set, indicates BaseMask will be overwritten on Rez</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItemFlags.ObjectOverwriteOwner">
            <summary>If set, and a slam bit is set, indicates OwnerMask will be overwritten on Rez</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItemFlags.ObjectOverwriteGroup">
            <summary>If set, and a slam bit is set, indicates GroupMask will be overwritten on Rez</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItemFlags.ObjectOverwriteEveryone">
            <summary>If set, and a slam bit is set, indicates EveryoneMask will be overwritten on Rez</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItemFlags.ObjectOverwriteNextOwner">
            <summary>If set, and a slam bit is set, indicates NextOwnerMask will be overwritten on Rez</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItemFlags.ObjectHasMultipleItems">
            <summary>Indicates whether this object is composed of multiple
            items or not</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItemFlags.SharedSingleReference">
            <summary>Indicates that the asset is only referenced by this
            inventory item. If this item is deleted or updated to reference a
            new assetID, the asset can be deleted</summary>
        </member>
        <member name="T:OpenMetaverse.InventoryBase">
            <summary>
            Base Class for Inventory Items
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryBase.#ctor(OpenMetaverse.UUID)">
            <summary>
            Constructor, takes an itemID as a parameter
            </summary>
            <param name="itemID">The <seealso cref="T:OpenMetaverse.UUID" /> of the item</param>
        </member>
        <member name="M:OpenMetaverse.InventoryBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="F:OpenMetaverse.InventoryBase.UUID">
            <summary>
                <seealso cref="T:OpenMetaverse.UUID" /> of item/folder</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryBase.ParentUUID">
            <summary>
                <seealso cref="T:OpenMetaverse.UUID" /> of parent folder</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryBase.Name">
            <summary>Name of item/folder</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryBase.OwnerID">
            <summary>Item/Folder Owners <seealso cref="T:OpenMetaverse.UUID" /></summary>
        </member>
        <member name="M:OpenMetaverse.InventoryBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.InventoryBase.GetHashCode">
            <summary>
            Generates a number corresponding to the value of the object to support the use of a hash table,
            suitable for use in hashing algorithms and data structures such as a hash table
            </summary>
            <returns>A Hashcode of all the combined InventoryBase fields</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryBase.Equals(System.Object)">
            <summary>
            Determine whether the specified <seealso cref="T:OpenMetaverse.InventoryBase" /> object is equal to the current object
            </summary>
            <param name="o">InventoryBase object to compare against</param>
            <returns>true if objects are the same</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryBase.Equals(OpenMetaverse.InventoryBase)">
            <summary>
            Determine whether the specified <seealso cref="T:OpenMetaverse.InventoryBase" /> object is equal to the current object
            </summary>
            <param name="o">InventoryBase object to compare against</param>
            <returns>true if objects are the same</returns>
        </member>
        <member name="T:OpenMetaverse.InventoryItem">
            <summary>
            An Item in Inventory
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryItem.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct a new InventoryItem object
            </summary>
            <param name="itemID">The <seealso cref="T:OpenMetaverse.UUID" /> of the item</param>
        </member>
        <member name="M:OpenMetaverse.InventoryItem.#ctor(OpenMetaverse.InventoryType,OpenMetaverse.UUID)">
            <summary>
            Construct a new InventoryItem object of a specific Type
            </summary>
            <param name="type">The type of item from <seealso cref="T:OpenMetaverse.InventoryType" /></param>
            <param name="itemID">
                <seealso cref="T:OpenMetaverse.UUID" /> of the item</param>
        </member>
        <member name="M:OpenMetaverse.InventoryItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.AssetUUID">
            <summary>The <seealso cref="T:OpenMetaverse.UUID" /> of this item</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.Permissions">
            <summary>The combined <seealso cref="T:OpenMetaverse.Permissions" /> of this item</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.AssetType">
            <summary>The type of item from <seealso cref="T:OpenMetaverse.AssetType" /></summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.InventoryType">
            <summary>The type of item from the <seealso cref="T:OpenMetaverse.InventoryType" /> enum</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.CreatorID">
            <summary>The <seealso cref="T:OpenMetaverse.UUID" /> of the creator of this item</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.Description">
            <summary>A Description of this item</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.GroupID">
            <summary>The <seealso cref="T:OpenMetaverse.Group" />s <seealso cref="T:OpenMetaverse.UUID" /> this item is set to or owned by</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.GroupOwned">
            <summary>If true, item is owned by a group</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.SalePrice">
            <summary>The price this item can be purchased for</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.SaleType">
            <summary>The type of sale from the <seealso cref="T:OpenMetaverse.SaleType" /> enum</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.Flags">
            <summary>Combined flags from <seealso cref="T:OpenMetaverse.InventoryItemFlags" /></summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.CreationDate">
            <summary>Time and date this inventory item was created, stored as
            UTC (Coordinated Universal Time)</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.TransactionID">
            <summary>Used to update the AssetID in requests sent to the server</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryItem.LastOwnerID">
            <summary>The <seealso cref="T:OpenMetaverse.UUID" /> of the previous owner of the item</summary>
        </member>
        <member name="M:OpenMetaverse.InventoryItem.IsLink">
            <summary>
            Indicates inventory item is a link
            </summary>
            <returns>True if inventory item is a link to another inventory item</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryItem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.InventoryItem.GetHashCode">
            <summary>
            Generates a number corresponding to the value of the object to support the use of a hash table.
            Suitable for use in hashing algorithms and data structures such as a hash table
            </summary>
            <returns>A Hashcode of all the combined InventoryItem fields</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryItem.Equals(System.Object)">
            <summary>
            Compares an object
            </summary>
            <param name="o">The object to compare</param>
            <returns>true if comparison object matches</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryItem.Equals(OpenMetaverse.InventoryBase)">
            <summary>
            Determine whether the specified <seealso cref="T:OpenMetaverse.InventoryBase" /> object is equal to the current object
            </summary>
            <param name="o">The <seealso cref="T:OpenMetaverse.InventoryBase" /> object to compare against</param>
            <returns>true if objects are the same</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryItem.Equals(OpenMetaverse.InventoryItem)">
            <summary>
            Determine whether the specified <seealso cref="T:OpenMetaverse.InventoryItem" /> object is equal to the current object
            </summary>
            <param name="o">The <seealso cref="T:OpenMetaverse.InventoryItem" /> object to compare against</param>
            <returns>true if objects are the same</returns>
        </member>
        <member name="T:OpenMetaverse.InventoryTexture">
            <summary>
            InventoryTexture Class representing a graphical image
            </summary>
            <seealso cref="!:ManagedImage" />
        </member>
        <member name="M:OpenMetaverse.InventoryTexture.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventoryTexture object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID" /> which becomes the
            <seealso cref="T:OpenMetaverse.InventoryItem" /> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventoryTexture.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventoryTexture object from a serialization stream
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventorySound">
            <summary>
            InventorySound Class representing a playable sound
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventorySound.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventorySound object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID" /> which becomes the
            <seealso cref="T:OpenMetaverse.InventoryItem" /> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventorySound.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventorySound object from a serialization stream
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventoryCallingCard">
            <summary>
            InventoryCallingCard Class, contains information on another avatar
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryCallingCard.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventoryCallingCard object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID" /> which becomes the
            <seealso cref="T:OpenMetaverse.InventoryItem" /> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventoryCallingCard.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventoryCallingCard object from a serialization stream
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventoryLandmark">
            <summary>
            InventoryLandmark Class, contains details on a specific location
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryLandmark.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventoryLandmark object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID" /> which becomes the
            <seealso cref="T:OpenMetaverse.InventoryItem" /> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventoryLandmark.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventoryLandmark object from a serialization stream
            </summary>
        </member>
        <member name="P:OpenMetaverse.InventoryLandmark.LandmarkVisited">
            <summary>
            Landmarks use the InventoryItemFlags struct and will have a flag of 1 set if they have been visited
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventoryObject">
            <summary>
            InventoryObject Class contains details on a primitive or coalesced set of primitives
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryObject.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventoryObject object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID" /> which becomes the
            <seealso cref="T:OpenMetaverse.InventoryItem" /> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventoryObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventoryObject object from a serialization stream
            </summary>
        </member>
        <member name="P:OpenMetaverse.InventoryObject.ItemFlags">
            <summary>
            Gets or sets the upper byte of the Flags value
            </summary>
        </member>
        <member name="P:OpenMetaverse.InventoryObject.AttachPoint">
            <summary>
            Gets or sets the object attachment point, the lower byte of the Flags value
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventoryNotecard">
            <summary>
            InventoryNotecard Class, contains details on an encoded text document
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryNotecard.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventoryNotecard object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID" /> which becomes the
            <seealso cref="T:OpenMetaverse.InventoryItem" /> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventoryNotecard.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventoryNotecard object from a serialization stream
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventoryCategory">
            <summary>
            InventoryCategory Class
            </summary>
            <remarks>TODO: Is this even used for anything?</remarks>
        </member>
        <member name="M:OpenMetaverse.InventoryCategory.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventoryCategory object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID" /> which becomes the
            <seealso cref="T:OpenMetaverse.InventoryItem" /> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventoryCategory.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventoryCategory object from a serialization stream
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventoryLSL">
            <summary>
            InventoryLSL Class, represents a Linden Scripting Language object
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryLSL.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventoryLSL object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID" /> which becomes the
            <seealso cref="T:OpenMetaverse.InventoryItem" /> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventoryLSL.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventoryLSL object from a serialization stream
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventorySnapshot">
            <summary>
            InventorySnapshot Class, an image taken with the viewer
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventorySnapshot.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventorySnapshot object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID" /> which becomes the
            <seealso cref="T:OpenMetaverse.InventoryItem" /> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventorySnapshot.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventorySnapshot object from a serialization stream
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventoryAttachment">
            <summary>
            InventoryAttachment Class, contains details on an attachable object
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryAttachment.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventoryAttachment object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID" /> which becomes the
            <seealso cref="T:OpenMetaverse.InventoryItem" /> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventoryAttachment.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventoryAttachment object from a serialization stream
            </summary>
        </member>
        <member name="P:OpenMetaverse.InventoryAttachment.AttachmentPoint">
            <summary>
            Get the last AttachmentPoint this object was attached to
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventoryWearable">
            <summary>
            InventoryWearable Class, details on a clothing item or body part
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryWearable.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventoryWearable object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID" /> which becomes the
            <seealso cref="T:OpenMetaverse.InventoryItem" /> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventoryWearable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventoryWearable object from a serialization stream
            </summary>
        </member>
        <member name="P:OpenMetaverse.InventoryWearable.WearableType">
            <summary>
            The <seealso cref="T:OpenMetaverse.WearableType" />, Skin, Shape, Skirt, Etc
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventoryAnimation">
            <summary>
            InventoryAnimation Class, A bvh encoded object which animates an avatar
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryAnimation.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventoryAnimation object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID" /> which becomes the
            <seealso cref="T:OpenMetaverse.InventoryItem" /> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventoryAnimation.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventoryAnimation object from a serialization stream
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventoryGesture">
            <summary>
            InventoryGesture Class, details on a series of animations, sounds, and actions
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryGesture.#ctor(OpenMetaverse.UUID)">
            <summary>
            Construct an InventoryGesture object
            </summary>
            <param name="itemID">A <seealso cref="T:OpenMetaverse.UUID" /> which becomes the
            <seealso cref="T:OpenMetaverse.InventoryItem" /> objects AssetUUID</param>
        </member>
        <member name="M:OpenMetaverse.InventoryGesture.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventoryGesture object from a serialization stream
            </summary>
        </member>
        <member name="T:OpenMetaverse.InventoryFolder">
            <summary>
            A folder contains <seealso cref="T:OpenMetaverse.InventoryItem" />s and has certain attributes specific
            to itself
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryFolder.#ctor(OpenMetaverse.UUID)">
            <summary>
            Constructor
            </summary>
            <param name="itemID">UUID of the folder</param>
        </member>
        <member name="M:OpenMetaverse.InventoryFolder.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an InventoryFolder object from a serialization stream
            </summary>
        </member>
        <member name="F:OpenMetaverse.InventoryFolder.PreferredType">
            <summary>The Preferred <seealso cref="T:OpenMetaverse.AssetType" /> for a folder.</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryFolder.Version">
            <summary>The Version of this folder</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryFolder.DescendentCount">
            <summary>Number of child items this folder contains.</summary>
        </member>
        <member name="M:OpenMetaverse.InventoryFolder.ToString">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.InventoryFolder.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Get Serilization data for this InventoryFolder object
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryFolder.GetHashCode">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.InventoryFolder.Equals(System.Object)">
            <summary>
            </summary>
            <param name="o">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.InventoryFolder.Equals(OpenMetaverse.InventoryBase)">
            <summary>
            </summary>
            <param name="o">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.InventoryFolder.Equals(OpenMetaverse.InventoryFolder)">
            <summary>
            </summary>
            <param name="o">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:OpenMetaverse.InventoryManager">
            <summary>
            Tools for dealing with agents inventory
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Default constructor
            </summary>
            <param name="client">Reference to the GridClient object</param>
        </member>
        <member name="T:OpenMetaverse.InventoryManager.ItemCreatedCallback">
            <summary>
            Callback for inventory item creation finishing
            </summary>
            <param name="success">Whether the request to create an inventory
            item succeeded or not</param>
            <param name="item">Inventory item being created. If success is
            false this will be null</param>
        </member>
        <member name="T:OpenMetaverse.InventoryManager.ItemCreatedFromAssetCallback">
            <summary>
            Callback for an inventory item being create from an uploaded asset
            </summary>
            <param name="success">true if inventory item creation was successful</param>
            <param name="status">
            </param>
            <param name="itemID">
            </param>
            <param name="assetID">
            </param>
        </member>
        <member name="T:OpenMetaverse.InventoryManager.ItemCopiedCallback">
            <summary>
            </summary>
            <param name="item">
            </param>
        </member>
        <member name="T:OpenMetaverse.InventoryManager.InventoryUploadedAssetCallback">
            <summary>
            Reply received when uploading an inventory asset
            </summary>
            <param name="success">Has upload been successful</param>
            <param name="status">Error message if upload failed</param>
            <param name="itemID">Inventory asset UUID</param>
            <param name="assetID">New asset UUID</param>
        </member>
        <member name="T:OpenMetaverse.InventoryManager.ScriptUpdatedCallback">
            <summary>
            Delegate that is invoked when script upload is completed
            </summary>
            <param name="uploadSuccess">Has upload succeded (note, there still might be compile errors)</param>
            <param name="uploadStatus">Upload status message</param>
            <param name="compileSuccess">Is compilation successful</param>
            <param name="compileMessages">If compilation failed, list of error messages, null on compilation success</param>
            <param name="itemID">Script inventory UUID</param>
            <param name="assetID">Script's new asset UUID</param>
        </member>
        <member name="F:OpenMetaverse.InventoryManager.MAGIC_ID">
            <summary>Used for converting shadow_id to asset_id</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryManager.m_ItemReceived">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryManager.m_ItemReceivedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryManager.m_FolderUpdated">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryManager.m_FolderUpdatedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryManager.m_InventoryObjectOffered">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryManager.m_InventoryObjectOfferedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryManager.m_TaskItemReceived">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryManager.m_TaskItemReceivedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryManager.m_FindObjectByPathReply">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryManager.m_FindObjectByPathReplyLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryManager.m_TaskInventoryReply">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryManager.m_TaskInventoryReplyLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryManager.m_SaveAssetToInventory">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryManager.m_SaveAssetToInventoryLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryManager.m_ScriptRunningReply">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryManager.m_ScriptRunningReplyLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.InventoryManager._NewFolderNames">
            <summary>Partial mapping of AssetTypes to folder names</summary>
        </member>
        <member name="E:OpenMetaverse.InventoryManager.ItemReceived">
            <summary>Raised when the simulator sends us data containing
            ...</summary>
        </member>
        <member name="E:OpenMetaverse.InventoryManager.FolderUpdated">
            <summary>Raised when the simulator sends us data containing
            ...</summary>
        </member>
        <member name="E:OpenMetaverse.InventoryManager.InventoryObjectOffered">
            <summary>Raised when the simulator sends us data containing
            an inventory object sent by another avatar or primitive</summary>
        </member>
        <member name="E:OpenMetaverse.InventoryManager.TaskItemReceived">
            <summary>Raised when the simulator sends us data containing
            ...</summary>
        </member>
        <member name="E:OpenMetaverse.InventoryManager.FindObjectByPathReply">
            <summary>Raised when the simulator sends us data containing
            ...</summary>
        </member>
        <member name="E:OpenMetaverse.InventoryManager.TaskInventoryReply">
            <summary>Raised when the simulator sends us data containing
            ...</summary>
        </member>
        <member name="E:OpenMetaverse.InventoryManager.SaveAssetToInventory">
            <summary>Raised when the simulator sends us data containing
            ...</summary>
        </member>
        <member name="E:OpenMetaverse.InventoryManager.ScriptRunningReply">
            <summary>Raised when the simulator sends us data containing
            ...</summary>
        </member>
        <member name="P:OpenMetaverse.InventoryManager.Store">
            <summary>
            Get this agents Inventory data
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.OnItemReceived(OpenMetaverse.ItemReceivedEventArgs)">
            <summary>Raises the ItemReceived Event</summary>
            <param name="e">A ItemReceivedEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.OnFolderUpdated(OpenMetaverse.FolderUpdatedEventArgs)">
            <summary>Raises the FolderUpdated Event</summary>
            <param name="e">A FolderUpdatedEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.OnInventoryObjectOffered(OpenMetaverse.InventoryObjectOfferedEventArgs)">
            <summary>Raises the InventoryObjectOffered Event</summary>
            <param name="e">A InventoryObjectOfferedEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.OnTaskItemReceived(OpenMetaverse.TaskItemReceivedEventArgs)">
            <summary>Raises the TaskItemReceived Event</summary>
            <param name="e">A TaskItemReceivedEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.OnFindObjectByPathReply(OpenMetaverse.FindObjectByPathReplyEventArgs)">
            <summary>Raises the FindObjectByPath Event</summary>
            <param name="e">A FindObjectByPathEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.OnTaskInventoryReply(OpenMetaverse.TaskInventoryReplyEventArgs)">
            <summary>Raises the TaskInventoryReply Event</summary>
            <param name="e">A TaskInventoryReplyEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.OnSaveAssetToInventory(OpenMetaverse.SaveAssetToInventoryEventArgs)">
            <summary>Raises the SaveAssetToInventory Event</summary>
            <param name="e">A SaveAssetToInventoryEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.OnScriptRunningReply(OpenMetaverse.ScriptRunningReplyEventArgs)">
            <summary>Raises the ScriptRunningReply Event</summary>
            <param name="e">A ScriptRunningReplyEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.FetchItem(OpenMetaverse.UUID,OpenMetaverse.UUID,System.Int32)">
            <summary>
            Fetch an inventory item from the dataserver
            </summary>
            <param name="itemID">The items <seealso cref="T:OpenMetaverse.UUID" /></param>
            <param name="ownerID">The item Owners <seealso cref="T:OpenMetaverse.UUID" /></param>
            <param name="timeoutMS">a integer representing the number of milliseconds to wait for results</param>
            <returns>An <seealso cref="T:OpenMetaverse.InventoryItem" /> object on success, or null if no item was found</returns>
            <remarks>Items will also be sent to the <seealso cref="M:OpenMetaverse.InventoryManager.OnItemReceived(OpenMetaverse.ItemReceivedEventArgs)" /> event</remarks>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestFetchInventory(OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>
            Request A single inventory item
            </summary>
            <param name="itemID">The items <seealso cref="T:OpenMetaverse.UUID" /></param>
            <param name="ownerID">The item Owners <seealso cref="T:OpenMetaverse.UUID" /></param>
            <seealso cref="M:OpenMetaverse.InventoryManager.OnItemReceived(OpenMetaverse.ItemReceivedEventArgs)" />
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestFetchInventory(System.Collections.Generic.List{OpenMetaverse.UUID},System.Collections.Generic.List{OpenMetaverse.UUID})">
            <summary>
            Request inventory items
            </summary>
            <param name="itemIDs">Inventory items to request</param>
            <param name="ownerIDs">Owners of the inventory items</param>
            <seealso cref="M:OpenMetaverse.InventoryManager.OnItemReceived(OpenMetaverse.ItemReceivedEventArgs)" />
        </member>
        <member name="M:OpenMetaverse.InventoryManager.FolderContents(OpenMetaverse.UUID,OpenMetaverse.UUID,System.Boolean,System.Boolean,OpenMetaverse.InventorySortOrder,System.Int32)">
            <summary>
            Get contents of a folder
            </summary>
            <param name="folder">The <seealso cref="T:OpenMetaverse.UUID" /> of the folder to search</param>
            <param name="owner">The <seealso cref="T:OpenMetaverse.UUID" /> of the folders owner</param>
            <param name="folders">true to retrieve folders</param>
            <param name="items">true to retrieve items</param>
            <param name="order">sort order to return results in</param>
            <param name="timeoutMS">a integer representing the number of milliseconds to wait for results</param>
            <returns>A list of inventory items matching search criteria within folder</returns>
            <seealso cref="M:OpenMetaverse.InventoryManager.RequestFolderContents(OpenMetaverse.UUID,OpenMetaverse.UUID,System.Boolean,System.Boolean,OpenMetaverse.InventorySortOrder)" />
            <remarks>InventoryFolder.DescendentCount will only be accurate if both folders and items are
            requested</remarks>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestFolderContents(OpenMetaverse.UUID,OpenMetaverse.UUID,System.Boolean,System.Boolean,OpenMetaverse.InventorySortOrder)">
            <summary>
            Request the contents of an inventory folder
            </summary>
            <param name="folder">The folder to search</param>
            <param name="owner">The folder owners <seealso cref="T:OpenMetaverse.UUID" /></param>
            <param name="folders">true to return <seealso cref="!:InventoryManager.InventoryFolder" />s contained in folder</param>
            <param name="items">true to return <seealso cref="!:InventoryManager.InventoryItem" />s containd in folder</param>
            <param name="order">the sort order to return items in</param>
            <seealso cref="M:OpenMetaverse.InventoryManager.FolderContents(OpenMetaverse.UUID,OpenMetaverse.UUID,System.Boolean,System.Boolean,OpenMetaverse.InventorySortOrder,System.Int32)" />
        </member>
        <member name="M:OpenMetaverse.InventoryManager.FindFolderForType(OpenMetaverse.AssetType)">
            <summary>
            Returns the UUID of the folder (category) that defaults to
            containing 'type'. The folder is not necessarily only for that
            type
            </summary>
            <remarks>This will return the root folder if one does not exist</remarks>
            <param name="type">
            </param>
            <returns>The UUID of the desired folder if found, the UUID of the RootFolder
            if not found, or UUID.Zero on failure</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.FindObjectByPath(OpenMetaverse.UUID,OpenMetaverse.UUID,System.String,System.Int32)">
            <summary>
            Find an object in inventory using a specific path to search
            </summary>
            <param name="baseFolder">The folder to begin the search in</param>
            <param name="inventoryOwner">The object owners <seealso cref="T:OpenMetaverse.UUID" /></param>
            <param name="path">A string path to search</param>
            <param name="timeoutMS">milliseconds to wait for a reply</param>
            <returns>Found items <seealso cref="T:OpenMetaverse.UUID" /> or <seealso cref="F:OpenMetaverse.UUID.Zero" /> if
            timeout occurs or item is not found</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestFindObjectByPath(OpenMetaverse.UUID,OpenMetaverse.UUID,System.String)">
            <summary>
            Find inventory items by path
            </summary>
            <param name="baseFolder">The folder to begin the search in</param>
            <param name="inventoryOwner">The object owners <seealso cref="T:OpenMetaverse.UUID" /></param>
            <param name="path">A string path to search, folders/objects separated by a '/'</param>
            <remarks>Results are sent to the <seealso cref="!:InventoryManager.OnFindObjectByPath" /> event</remarks>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.LocalFind(OpenMetaverse.UUID,System.String[],System.Int32,System.Boolean)">
            <summary>
            Search inventory Store object for an item or folder
            </summary>
            <param name="baseFolder">The folder to begin the search in</param>
            <param name="path">An array which creates a path to search</param>
            <param name="level">Number of levels below baseFolder to conduct searches</param>
            <param name="firstOnly">if True, will stop searching after first match is found</param>
            <returns>A list of inventory items found</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.Move(OpenMetaverse.InventoryBase,OpenMetaverse.InventoryFolder)">
            <summary>
            Move an inventory item or folder to a new location
            </summary>
            <param name="item">The <seealso cref="T:InventoryBase" /> item or folder to move</param>
            <param name="newParent">The <seealso cref="T:InventoryFolder" /> to move item or folder to</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.Move(OpenMetaverse.InventoryBase,OpenMetaverse.InventoryFolder,System.String)">
            <summary>
            Move an inventory item or folder to a new location and change its name
            </summary>
            <param name="item">The <seealso cref="T:InventoryBase" /> item or folder to move</param>
            <param name="newParent">The <seealso cref="T:InventoryFolder" /> to move item or folder to</param>
            <param name="newName">The name to change the item or folder to</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.MoveFolder(OpenMetaverse.UUID,OpenMetaverse.UUID,System.String)">
            <summary>
            Move and rename a folder
            </summary>
            <param name="folderID">The source folders <seealso cref="T:OpenMetaverse.UUID" /></param>
            <param name="newparentID">The destination folders <seealso cref="T:OpenMetaverse.UUID" /></param>
            <param name="newName">The name to change the folder to</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.UpdateFolderProperties(OpenMetaverse.UUID,OpenMetaverse.UUID,System.String,OpenMetaverse.AssetType)">
            <summary>
            Update folder properties
            </summary>
            <param name="folderID">
                <seealso cref="T:OpenMetaverse.UUID" /> of the folder to update</param>
            <param name="parentID">Sets folder's parent to <seealso cref="T:OpenMetaverse.UUID" /></param>
            <param name="name">Folder name</param>
            <param name="type">Folder type</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.MoveFolder(OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>
            Move a folder
            </summary>
            <param name="folderID">The source folders <seealso cref="T:OpenMetaverse.UUID" /></param>
            <param name="newParentID">The destination folders <seealso cref="T:OpenMetaverse.UUID" /></param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.MoveFolders(System.Collections.Generic.Dictionary{OpenMetaverse.UUID,OpenMetaverse.UUID})">
            <summary>
            Move multiple folders, the keys in the Dictionary parameter,
            to a new parents, the value of that folder's key.
            </summary>
            <param name="foldersNewParents">A Dictionary containing the
            <seealso cref="T:OpenMetaverse.UUID" /> of the source as the key, and the
            <seealso cref="T:OpenMetaverse.UUID" /> of the destination as the value</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.MoveItem(OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>
            Move an inventory item to a new folder
            </summary>
            <param name="itemID">The <seealso cref="T:OpenMetaverse.UUID" /> of the source item to move</param>
            <param name="folderID">The <seealso cref="T:OpenMetaverse.UUID" /> of the destination folder</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.MoveItem(OpenMetaverse.UUID,OpenMetaverse.UUID,System.String)">
            <summary>
            Move and rename an inventory item
            </summary>
            <param name="itemID">The <seealso cref="T:OpenMetaverse.UUID" /> of the source item to move</param>
            <param name="folderID">The <seealso cref="T:OpenMetaverse.UUID" /> of the destination folder</param>
            <param name="newName">The name to change the folder to</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.MoveItems(System.Collections.Generic.Dictionary{OpenMetaverse.UUID,OpenMetaverse.UUID})">
            <summary>
            Move multiple inventory items to new locations
            </summary>
            <param name="itemsNewParents">A Dictionary containing the
            <seealso cref="T:OpenMetaverse.UUID" /> of the source item as the key, and the
            <seealso cref="T:OpenMetaverse.UUID" /> of the destination folder as the value</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RemoveDescendants(OpenMetaverse.UUID)">
            <summary>
            Remove descendants of a folder
            </summary>
            <param name="folder">The <seealso cref="T:OpenMetaverse.UUID" /> of the folder</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RemoveItem(OpenMetaverse.UUID)">
            <summary>
            Remove a single item from inventory
            </summary>
            <param name="item">The <seealso cref="T:OpenMetaverse.UUID" /> of the inventory item to remove</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RemoveFolder(OpenMetaverse.UUID)">
            <summary>
            Remove a folder from inventory
            </summary>
            <param name="folder">The <seealso cref="T:OpenMetaverse.UUID" /> of the folder to remove</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.Remove(System.Collections.Generic.List{OpenMetaverse.UUID},System.Collections.Generic.List{OpenMetaverse.UUID})">
            <summary>
            Remove multiple items or folders from inventory
            </summary>
            <param name="items">A List containing the <seealso cref="T:OpenMetaverse.UUID" />s of items to remove</param>
            <param name="folders">A List containing the <seealso cref="T:OpenMetaverse.UUID" />s of the folders to remove</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.EmptyLostAndFound">
            <summary>
            Empty the Lost and Found folder
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.EmptyTrash">
            <summary>
            Empty the Trash folder
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestCreateItem(OpenMetaverse.UUID,System.String,System.String,OpenMetaverse.AssetType,OpenMetaverse.UUID,OpenMetaverse.InventoryType,OpenMetaverse.PermissionMask,OpenMetaverse.InventoryManager.ItemCreatedCallback)">
            <summary>
            </summary>
            <param name="parentFolder">
            </param>
            <param name="name">
            </param>
            <param name="description">
            </param>
            <param name="type">
            </param>
            <param name="assetTransactionID">Proper use is to upload the inventory's asset first, then provide the Asset's TransactionID here.</param>
            <param name="invType">
            </param>
            <param name="nextOwnerMask">
            </param>
            <param name="callback">
            </param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestCreateItem(OpenMetaverse.UUID,System.String,System.String,OpenMetaverse.AssetType,OpenMetaverse.UUID,OpenMetaverse.InventoryType,OpenMetaverse.WearableType,OpenMetaverse.PermissionMask,OpenMetaverse.InventoryManager.ItemCreatedCallback)">
            <summary>
            </summary>
            <param name="parentFolder">
            </param>
            <param name="name">
            </param>
            <param name="description">
            </param>
            <param name="type">
            </param>
            <param name="assetTransactionID">Proper use is to upload the inventory's asset first, then provide the Asset's TransactionID here.</param>
            <param name="invType">
            </param>
            <param name="wearableType">
            </param>
            <param name="nextOwnerMask">
            </param>
            <param name="callback">
            </param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.CreateFolder(OpenMetaverse.UUID,System.String)">
            <summary>
            Creates a new inventory folder
            </summary>
            <param name="parentID">ID of the folder to put this folder in</param>
            <param name="name">Name of the folder to create</param>
            <returns>The UUID of the newly created folder</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.CreateFolder(OpenMetaverse.UUID,System.String,OpenMetaverse.AssetType)">
            <summary>
            Creates a new inventory folder
            </summary>
            <param name="parentID">ID of the folder to put this folder in</param>
            <param name="name">Name of the folder to create</param>
            <param name="preferredType">Sets this folder as the default folder
            for new assets of the specified type. Use <code>AssetType.Unknown</code>
            to create a normal folder, otherwise it will likely create a
            duplicate of an existing folder type</param>
            <returns>The UUID of the newly created folder</returns>
            <remarks>If you specify a preferred type of <code>AsseType.Folder</code>
            it will create a new root folder which may likely cause all sorts
            of strange problems</remarks>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestCreateItemFromAsset(System.Byte[],System.String,System.String,OpenMetaverse.AssetType,OpenMetaverse.InventoryType,OpenMetaverse.UUID,OpenMetaverse.InventoryManager.ItemCreatedFromAssetCallback)">
            <summary>
            Create an inventory item and upload asset data
            </summary>
            <param name="data">Asset data</param>
            <param name="name">Inventory item name</param>
            <param name="description">Inventory item description</param>
            <param name="assetType">Asset type</param>
            <param name="invType">Inventory type</param>
            <param name="folderID">Put newly created inventory in this folder</param>
            <param name="callback">Delegate that will receive feedback on success or failure</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestCreateItemFromAsset(System.Byte[],System.String,System.String,OpenMetaverse.AssetType,OpenMetaverse.InventoryType,OpenMetaverse.UUID,OpenMetaverse.Permissions,OpenMetaverse.InventoryManager.ItemCreatedFromAssetCallback)">
            <summary>
            Create an inventory item and upload asset data
            </summary>
            <param name="data">Asset data</param>
            <param name="name">Inventory item name</param>
            <param name="description">Inventory item description</param>
            <param name="assetType">Asset type</param>
            <param name="invType">Inventory type</param>
            <param name="folderID">Put newly created inventory in this folder</param>
            <param name="permissions">Permission of the newly created item
            (EveryoneMask, GroupMask, and NextOwnerMask of Permissions struct are supported)</param>
            <param name="callback">Delegate that will receive feedback on success or failure</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.CreateLink(OpenMetaverse.UUID,OpenMetaverse.InventoryBase,OpenMetaverse.InventoryManager.ItemCreatedCallback)">
            <summary>
            Creates inventory link to another inventory item or folder
            </summary>
            <param name="folderID">Put newly created link in folder with this UUID</param>
            <param name="bse">Inventory item or folder</param>
            <param name="callback">Method to call upon creation of the link</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.CreateLink(OpenMetaverse.UUID,OpenMetaverse.InventoryItem,OpenMetaverse.InventoryManager.ItemCreatedCallback)">
            <summary>
            Creates inventory link to another inventory item
            </summary>
            <param name="folderID">Put newly created link in folder with this UUID</param>
            <param name="item">Original inventory item</param>
            <param name="callback">Method to call upon creation of the link</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.CreateLink(OpenMetaverse.UUID,OpenMetaverse.InventoryFolder,OpenMetaverse.InventoryManager.ItemCreatedCallback)">
            <summary>
            Creates inventory link to another inventory folder
            </summary>
            <param name="folderID">Put newly created link in folder with this UUID</param>
            <param name="folder">Original inventory folder</param>
            <param name="callback">Method to call upon creation of the link</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.CreateLink(OpenMetaverse.UUID,OpenMetaverse.UUID,System.String,System.String,OpenMetaverse.AssetType,OpenMetaverse.InventoryType,OpenMetaverse.UUID,OpenMetaverse.InventoryManager.ItemCreatedCallback)">
            <summary>
            Creates inventory link to another inventory item or folder
            </summary>
            <param name="folderID">Put newly created link in folder with this UUID</param>
            <param name="itemID">Original item's UUID</param>
            <param name="name">Name</param>
            <param name="description">Description</param>
            <param name="assetType">Asset Type</param>
            <param name="invType">Inventory Type</param>
            <param name="transactionID">Transaction UUID</param>
            <param name="callback">Method to call upon creation of the link</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestCopyItem(OpenMetaverse.UUID,OpenMetaverse.UUID,System.String,OpenMetaverse.InventoryManager.ItemCopiedCallback)">
            <summary>
            </summary>
            <param name="item">
            </param>
            <param name="newParent">
            </param>
            <param name="newName">
            </param>
            <param name="callback">
            </param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestCopyItem(OpenMetaverse.UUID,OpenMetaverse.UUID,System.String,OpenMetaverse.UUID,OpenMetaverse.InventoryManager.ItemCopiedCallback)">
            <summary>
            </summary>
            <param name="item">
            </param>
            <param name="newParent">
            </param>
            <param name="newName">
            </param>
            <param name="oldOwnerID">
            </param>
            <param name="callback">
            </param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestCopyItems(System.Collections.Generic.List{OpenMetaverse.UUID},System.Collections.Generic.List{OpenMetaverse.UUID},System.Collections.Generic.List{System.String},OpenMetaverse.UUID,OpenMetaverse.InventoryManager.ItemCopiedCallback)">
            <summary>
            </summary>
            <param name="items">
            </param>
            <param name="targetFolders">
            </param>
            <param name="newNames">
            </param>
            <param name="oldOwnerID">
            </param>
            <param name="callback">
            </param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestCopyItemFromNotecard(OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.InventoryManager.ItemCopiedCallback)">
            <summary>
            Request a copy of an asset embedded within a notecard
            </summary>
            <param name="objectID">Usually UUID.Zero for copying an asset from a notecard</param>
            <param name="notecardID">UUID of the notecard to request an asset from</param>
            <param name="folderID">Target folder for asset to go to in your inventory</param>
            <param name="itemID">UUID of the embedded asset</param>
            <param name="callback">callback to run when item is copied to inventory</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestUpdateItem(OpenMetaverse.InventoryItem)">
            <summary>
            </summary>
            <param name="item">
            </param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestUpdateItems(System.Collections.Generic.List{OpenMetaverse.InventoryItem})">
            <summary>
            </summary>
            <param name="items">
            </param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestUpdateItems(System.Collections.Generic.List{OpenMetaverse.InventoryItem},OpenMetaverse.UUID)">
            <summary>
            </summary>
            <param name="items">
            </param>
            <param name="transactionID">
            </param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestUploadNotecardAsset(System.Byte[],OpenMetaverse.UUID,OpenMetaverse.InventoryManager.InventoryUploadedAssetCallback)">
            <summary>
            </summary>
            <param name="data">
            </param>
            <param name="notecardID">
            </param>
            <param name="callback">
            </param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestUpdateNotecardTask(System.Byte[],OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.InventoryManager.InventoryUploadedAssetCallback)">
            <summary>
            Save changes to notecard embedded in object contents
            </summary>
            <param name="data">Encoded notecard asset data</param>
            <param name="notecardID">Notecard UUID</param>
            <param name="taskID">Object's UUID</param>
            <param name="callback">Called upon finish of the upload with status information</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestUploadGestureAsset(System.Byte[],OpenMetaverse.UUID,OpenMetaverse.InventoryManager.InventoryUploadedAssetCallback)">
            <summary>
            Upload new gesture asset for an inventory gesture item
            </summary>
            <param name="data">Encoded gesture asset</param>
            <param name="gestureID">Gesture inventory UUID</param>
            <param name="callback">Callback whick will be called when upload is complete</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestUpdateScriptAgentInventory(System.Byte[],OpenMetaverse.UUID,System.Boolean,OpenMetaverse.InventoryManager.ScriptUpdatedCallback)">
            <summary>
            Update an existing script in an agents Inventory
            </summary>
            <param name="data">A byte[] array containing the encoded scripts contents</param>
            <param name="itemID">the itemID of the script</param>
            <param name="mono">if true, sets the script content to run on the mono interpreter</param>
            <param name="callback">
            </param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestUpdateScriptTask(System.Byte[],OpenMetaverse.UUID,OpenMetaverse.UUID,System.Boolean,System.Boolean,OpenMetaverse.InventoryManager.ScriptUpdatedCallback)">
            <summary>
            Update an existing script in an task Inventory
            </summary>
            <param name="data">A byte[] array containing the encoded scripts contents</param>
            <param name="itemID">the itemID of the script</param>
            <param name="taskID">UUID of the prim containting the script</param>
            <param name="mono">if true, sets the script content to run on the mono interpreter</param>
            <param name="running">if true, sets the script to running</param>
            <param name="callback">
            </param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestRezFromInventory(OpenMetaverse.Simulator,OpenMetaverse.Quaternion,OpenMetaverse.Vector3,OpenMetaverse.InventoryItem)">
            <summary>
            Rez an object from inventory
            </summary>
            <param name="simulator">Simulator to place object in</param>
            <param name="rotation">Rotation of the object when rezzed</param>
            <param name="position">Vector of where to place object</param>
            <param name="item">InventoryItem object containing item details</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestRezFromInventory(OpenMetaverse.Simulator,OpenMetaverse.Quaternion,OpenMetaverse.Vector3,OpenMetaverse.InventoryItem,OpenMetaverse.UUID)">
            <summary>
            Rez an object from inventory
            </summary>
            <param name="simulator">Simulator to place object in</param>
            <param name="rotation">Rotation of the object when rezzed</param>
            <param name="position">Vector of where to place object</param>
            <param name="item">InventoryItem object containing item details</param>
            <param name="groupOwner">UUID of group to own the object</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestRezFromInventory(OpenMetaverse.Simulator,OpenMetaverse.Quaternion,OpenMetaverse.Vector3,OpenMetaverse.InventoryItem,OpenMetaverse.UUID,OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Rez an object from inventory
            </summary>
            <param name="simulator">Simulator to place object in</param>
            <param name="rotation">Rotation of the object when rezzed</param>
            <param name="position">Vector of where to place object</param>
            <param name="item">InventoryItem object containing item details</param>
            <param name="groupOwner">UUID of group to own the object</param>
            <param name="queryID">User defined queryID to correlate replies</param>
            <param name="rezSelected">If set to true, the CreateSelected flag
            will be set on the rezzed object</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestDeRezToInventory(System.UInt32)">
            <summary>
            DeRez an object from the simulator to the agents Objects folder in the agents Inventory
            </summary>
            <param name="objectLocalID">The simulator Local ID of the object</param>
            <remarks>If objectLocalID is a child primitive in a linkset, the entire linkset will be derezzed</remarks>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestDeRezToInventory(System.UInt32,OpenMetaverse.DeRezDestination,OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>
            DeRez an object from the simulator and return to inventory
            </summary>
            <param name="objectLocalID">The simulator Local ID of the object</param>
            <param name="destType">The type of destination from the <seealso cref="T:OpenMetaverse.DeRezDestination" /> enum</param>
            <param name="destFolder">The destination inventory folders <seealso cref="T:OpenMetaverse.UUID" /> -or-
            if DeRezzing object to a tasks Inventory, the Tasks <seealso cref="T:OpenMetaverse.UUID" /></param>
            <param name="transactionID">The transaction ID for this request which
            can be used to correlate this request with other packets</param>
            <remarks>If objectLocalID is a child primitive in a linkset, the entire linkset will be derezzed</remarks>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestRestoreRezFromInventory(OpenMetaverse.Simulator,OpenMetaverse.InventoryItem,OpenMetaverse.UUID)">
            <summary>
            Rez an item from inventory to its previous simulator location
            </summary>
            <param name="simulator">
            </param>
            <param name="item">
            </param>
            <param name="queryID">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.GiveItem(OpenMetaverse.UUID,System.String,OpenMetaverse.AssetType,OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Give an inventory item to another avatar
            </summary>
            <param name="itemID">The <seealso cref="T:OpenMetaverse.UUID" /> of the item to give</param>
            <param name="itemName">The name of the item</param>
            <param name="assetType">The type of the item from the <seealso cref="T:OpenMetaverse.AssetType" /> enum</param>
            <param name="recipient">The <seealso cref="T:OpenMetaverse.UUID" /> of the recipient</param>
            <param name="doEffect">true to generate a beameffect during transfer</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.GiveFolder(OpenMetaverse.UUID,System.String,OpenMetaverse.AssetType,OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Give an inventory Folder with contents to another avatar
            </summary>
            <param name="folderID">The <seealso cref="T:OpenMetaverse.UUID" /> of the Folder to give</param>
            <param name="folderName">The name of the folder</param>
            <param name="assetType">The type of the item from the <seealso cref="T:OpenMetaverse.AssetType" /> enum</param>
            <param name="recipient">The <seealso cref="T:OpenMetaverse.UUID" /> of the recipient</param>
            <param name="doEffect">true to generate a beameffect during transfer</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.UpdateTaskInventory(System.UInt32,OpenMetaverse.InventoryItem)">
            <summary>
            Copy or move an <see cref="T:OpenMetaverse.InventoryItem" /> from agent inventory to a task (primitive) inventory
            </summary>
            <param name="objectLocalID">The target object</param>
            <param name="item">The item to copy or move from inventory</param>
            <returns>
            </returns>
            <remarks>For items with copy permissions a copy of the item is placed in the tasks inventory,
            for no-copy items the object is moved to the tasks inventory</remarks>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.GetTaskInventory(OpenMetaverse.UUID,System.UInt32,System.Int32)">
            <summary>
            Retrieve a listing of the items contained in a task (Primitive)
            </summary>
            <param name="objectID">The tasks <seealso cref="T:OpenMetaverse.UUID" /></param>
            <param name="objectLocalID">The tasks simulator local ID</param>
            <param name="timeoutMS">milliseconds to wait for reply from simulator</param>
            <returns>A list containing the inventory items inside the task or null
            if a timeout occurs</returns>
            <remarks>This request blocks until the response from the simulator arrives
            or timeoutMS is exceeded</remarks>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestTaskInventory(System.UInt32)">
            <summary>
            Request the contents of a tasks (primitives) inventory from the
            current simulator
            </summary>
            <param name="objectLocalID">The LocalID of the object</param>
            <seealso cref="E:OpenMetaverse.InventoryManager.TaskInventoryReply" />
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestTaskInventory(System.UInt32,OpenMetaverse.Simulator)">
            <summary>
            Request the contents of a tasks (primitives) inventory
            </summary>
            <param name="objectLocalID">The simulator Local ID of the object</param>
            <param name="simulator">A reference to the simulator object that contains the object</param>
            <seealso cref="E:OpenMetaverse.InventoryManager.TaskInventoryReply" />
        </member>
        <member name="M:OpenMetaverse.InventoryManager.MoveTaskInventory(System.UInt32,OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.Simulator)">
            <summary>
            Move an item from a tasks (Primitive) inventory to the specified folder in the avatars inventory
            </summary>
            <param name="objectLocalID">LocalID of the object in the simulator</param>
            <param name="taskItemID">UUID of the task item to move</param>
            <param name="inventoryFolderID">The ID of the destination folder in this agents inventory</param>
            <param name="simulator">Simulator Object</param>
            <remarks>Raises the <see cref="M:OpenMetaverse.InventoryManager.OnTaskItemReceived(OpenMetaverse.TaskItemReceivedEventArgs)" /> event</remarks>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RemoveTaskInventory(System.UInt32,OpenMetaverse.UUID,OpenMetaverse.Simulator)">
            <summary>
            Remove an item from an objects (Prim) Inventory
            </summary>
            <param name="objectLocalID">LocalID of the object in the simulator</param>
            <param name="taskItemID">UUID of the task item to remove</param>
            <param name="simulator">Simulator Object</param>
            <remarks>You can confirm the removal by comparing the tasks inventory serial before and after the
            request with the <see cref="M:OpenMetaverse.InventoryManager.RequestTaskInventory(System.UInt32,OpenMetaverse.Simulator)" /> request combined with
            the <seealso cref="E:OpenMetaverse.InventoryManager.TaskInventoryReply" /> event</remarks>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.CopyScriptToTask(System.UInt32,OpenMetaverse.InventoryItem,System.Boolean)">
            <summary>
            Copy an InventoryScript item from the Agents Inventory into a primitives task inventory
            </summary>
            <param name="objectLocalID">An unsigned integer representing a primitive being simulated</param>
            <param name="item">An <seealso cref="T:OpenMetaverse.InventoryItem" /> which represents a script object from the agents inventory</param>
            <param name="enableScript">true to set the scripts running state to enabled</param>
            <returns>A Unique Transaction ID</returns>
            <example>
            The following example shows the basic steps necessary to copy a script from the agents inventory into a tasks inventory
            and assumes the script exists in the agents inventory.
            <code>
            uint primID = 95899503; // Fake prim ID
            UUID scriptID = UUID.Parse("92a7fe8a-e949-dd39-a8d8-1681d8673232"); // Fake Script UUID in Inventory
            Client.Inventory.FolderContents(Client.Inventory.FindFolderForType(AssetType.LSLText), Client.Self.AgentID,
            false, true, InventorySortOrder.ByName, 10000);
            Client.Inventory.RezScript(primID, (InventoryItem)Client.Inventory.Store[scriptID]);
            </code></example>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestGetScriptRunning(OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>
            Request the running status of a script contained in a task (primitive) inventory
            </summary>
            <param name="objectID">The ID of the primitive containing the script</param>
            <param name="scriptID">The ID of the script</param>
            <remarks>The <see cref="E:OpenMetaverse.InventoryManager.ScriptRunningReply" /> event can be used to obtain the results of the
            request</remarks>
            <seealso cref="E:OpenMetaverse.InventoryManager.ScriptRunningReply" />
        </member>
        <member name="M:OpenMetaverse.InventoryManager.RequestSetScriptRunning(OpenMetaverse.UUID,OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Send a request to set the running state of a script contained in a task (primitive) inventory
            </summary>
            <param name="objectID">The ID of the primitive containing the script</param>
            <param name="scriptID">The ID of the script</param>
            <param name="running">true to set the script running, false to stop a running script</param>
            <remarks>To verify the change you can use the <see cref="M:OpenMetaverse.InventoryManager.RequestGetScriptRunning(OpenMetaverse.UUID,OpenMetaverse.UUID)" /> method combined
            with the <see cref="E:OpenMetaverse.InventoryManager.ScriptRunningReply" /> event</remarks>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.ItemCRC(OpenMetaverse.InventoryItem)">
            <summary>
            Create a CRC from an InventoryItem
            </summary>
            <param name="iitem">The source InventoryItem</param>
            <returns>A uint representing the source InventoryItem as a CRC</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.DecryptShadowID(OpenMetaverse.UUID)">
            <summary>
            Reverses a cheesy XORing with a fixed UUID to convert a shadow_id to an asset_id
            </summary>
            <param name="shadowID">Obfuscated shadow_id value</param>
            <returns>Deobfuscated asset_id value</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.EncryptAssetID(OpenMetaverse.UUID)">
            <summary>
            Does a cheesy XORing with a fixed UUID to convert an asset_id to a shadow_id
            </summary>
            <param name="assetID">asset_id value to obfuscate</param>
            <returns>Obfuscated shadow_id value</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.CreateInventoryItem(OpenMetaverse.InventoryType,OpenMetaverse.UUID)">
            <summary>
            Wrapper for creating a new <seealso cref="T:OpenMetaverse.InventoryItem" /> object
            </summary>
            <param name="type">The type of item from the <seealso cref="T:OpenMetaverse.InventoryType" /> enum</param>
            <param name="id">The <seealso cref="T:OpenMetaverse.UUID" /> of the newly created object</param>
            <returns>An <seealso cref="T:OpenMetaverse.InventoryItem" /> object with the type and id passed</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.ParseTaskInventory(System.String)">
            <summary>
            Parse the results of a RequestTaskInventory() response
            </summary>
            <param name="taskData">A string which contains the data from the task reply</param>
            <returns>A List containing the items contained within the tasks inventory</returns>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.SaveAssetIntoInventoryHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.InventoryDescendentsHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.UpdateCreateInventoryItemHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>
            UpdateCreateInventoryItem packets are received when a new inventory item
            is created. This may occur when an object that's rezzed in world is
            taken into inventory, when an item is created using the CreateInventoryItem
            packet, or when an object is purchased
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.MoveInventoryItemHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.BulkUpdateInventoryHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.FetchInventoryReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.InventoryManager.ReplyTaskInventoryHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="P:OpenMetaverse.InventoryObjectOfferedEventArgs.Accept">
            <summary>Set to true to accept offer, false to decline it</summary>
        </member>
        <member name="P:OpenMetaverse.InventoryObjectOfferedEventArgs.FolderID">
            <summary>The folder to accept the inventory into, if null default folder for <see cref="T:OpenMetaverse.AssetType" /> will be used</summary>
        </member>
        <member name="T:OpenMetaverse.TaskItemReceivedEventArgs">
            <summary>
            Callback when an inventory object is accepted and received from a
            task inventory. This is the callback in which you actually get
            the ItemID, as in ObjectOfferedCallback it is null when received
            from a task.
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryNode.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryNode.#ctor(OpenMetaverse.InventoryBase)">
            <summary>
            </summary>
            <param name="data">
            </param>
        </member>
        <member name="M:OpenMetaverse.InventoryNode.#ctor(OpenMetaverse.InventoryBase,OpenMetaverse.InventoryNode)">
            <summary>
            De-serialization constructor for the InventoryNode Class
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            De-serialization handler for the InventoryNode Class
            </summary>
        </member>
        <member name="P:OpenMetaverse.InventoryNode.Data">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.InventoryNode.Parent">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.InventoryNode.ParentID">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.InventoryNode.Nodes">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.InventoryNode.NeedsUpdate">
            <summary>
            For inventory folder nodes specifies weather the folder needs to be
            refreshed from the server
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization handler for the InventoryNode Class
            </summary>
        </member>
        <member name="M:OpenMetaverse.InventoryNode.ToString">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:OpenMetaverse.Logger">
            <summary>
            Singleton logging class for the entire library
            </summary>
        </member>
        <member name="M:OpenMetaverse.Logger.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:OpenMetaverse.Logger.LogCallback">
            <summary>
            Callback used for client apps to receive log messages from
            the library
            </summary>
            <param name="message">Data being logged</param>
            <param name="level">The severity of the log entry from <seealso cref="T:OpenMetaverse.Helpers.LogLevel" /></param>
        </member>
        <member name="F:OpenMetaverse.Logger.LogInstance">
            <summary>log4net logging engine</summary>
        </member>
        <member name="E:OpenMetaverse.Logger.OnLogMessage">
            <summary>Triggered whenever a message is logged. If this is left
            null, log messages will go to the console</summary>
        </member>
        <member name="M:OpenMetaverse.Logger.Log(System.Object,OpenMetaverse.Helpers.LogLevel)">
            <summary>
            Send a log message to the logging engine
            </summary>
            <param name="message">The log message</param>
            <param name="level">The severity of the log entry</param>
        </member>
        <member name="M:OpenMetaverse.Logger.Log(System.Object,OpenMetaverse.Helpers.LogLevel,OpenMetaverse.GridClient)">
            <summary>
            Send a log message to the logging engine
            </summary>
            <param name="message">The log message</param>
            <param name="level">The severity of the log entry</param>
            <param name="client">Instance of the client</param>
        </member>
        <member name="M:OpenMetaverse.Logger.Log(System.Object,OpenMetaverse.Helpers.LogLevel,System.Exception)">
            <summary>
            Send a log message to the logging engine
            </summary>
            <param name="message">The log message</param>
            <param name="level">The severity of the log entry</param>
            <param name="exception">Exception that was raised</param>
        </member>
        <member name="M:OpenMetaverse.Logger.Log(System.Object,OpenMetaverse.Helpers.LogLevel,OpenMetaverse.GridClient,System.Exception)">
            <summary>
            Send a log message to the logging engine
            </summary>
            <param name="message">The log message</param>
            <param name="level">The severity of the log entry</param>
            <param name="client">Instance of the client</param>
            <param name="exception">Exception that was raised</param>
        </member>
        <member name="M:OpenMetaverse.Logger.DebugLog(System.Object)">
            <summary>
            If the library is compiled with DEBUG defined, an event will be
            fired if an <code>OnLogMessage</code> handler is registered and the
            message will be sent to the logging engine
            </summary>
            <param name="message">The message to log at the DEBUG level to the
            current logging engine</param>
        </member>
        <member name="M:OpenMetaverse.Logger.DebugLog(System.Object,OpenMetaverse.GridClient)">
            <summary>
            If the library is compiled with DEBUG defined and
            <code>GridClient.Settings.DEBUG</code> is true, an event will be
            fired if an <code>OnLogMessage</code> handler is registered and the
            message will be sent to the logging engine
            </summary>
            <param name="message">The message to log at the DEBUG level to the
            current logging engine</param>
            <param name="client">Instance of the client</param>
        </member>
        <member name="T:OpenMetaverse.LoginStatus">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.LoginStatus.Failed">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.LoginStatus.None">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.LoginStatus.ConnectingToLogin">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.LoginStatus.ReadingResponse">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.LoginStatus.ConnectingToSim">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.LoginStatus.Redirecting">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.LoginStatus.Success">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.LoginParams">
            <summary>
            Login Request Parameters
            </summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.URI">
            <summary>The URL of the Login Server</summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.Timeout">
            <summary>The number of milliseconds to wait before a login is considered
            failed due to timeout</summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.MethodName">
            <summary>The request method</summary>
            <remarks>login_to_simulator is currently the only supported method</remarks>
        </member>
        <member name="F:OpenMetaverse.LoginParams.FirstName">
            <summary>The Agents First name</summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.LastName">
            <summary>The Agents Last name</summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.Password">
            <summary>A md5 hashed password</summary>
            <remarks>plaintext password will be automatically hashed</remarks>
        </member>
        <member name="F:OpenMetaverse.LoginParams.Start">
            <summary>The agents starting location once logged in</summary>
            <remarks>Either "last", "home", or a string encoded URI
            containing the simulator name and x/y/z coordinates e.g: uri:hooper&amp;128&amp;152&amp;17</remarks>
        </member>
        <member name="F:OpenMetaverse.LoginParams.Channel">
            <summary>A string containing the client software channel information</summary>
            <example>Second Life Release</example>
        </member>
        <member name="F:OpenMetaverse.LoginParams.Version">
            <summary>The client software version information</summary>
            <remarks>The official viewer uses: Second Life Release n.n.n.n
            where n is replaced with the current version of the viewer</remarks>
        </member>
        <member name="F:OpenMetaverse.LoginParams.Platform">
            <summary>A string containing the platform information the agent is running on</summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.MAC">
            <summary>A string hash of the network cards Mac Address</summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.ViewerDigest">
            <summary>Unknown or deprecated</summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.ID0">
            <summary>A string hash of the first disk drives ID used to identify this clients uniqueness</summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.UserAgent">
            <summary>A string containing the viewers Software, this is not directly sent to the login server but
            instead is used to generate the Version string</summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.Author">
            <summary>A string representing the software creator. This is not directly sent to the login server but
            is used by the library to generate the Version information</summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.AgreeToTos">
            <summary>If true, this agent agrees to the Terms of Service of the grid its connecting to</summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.ReadCritical">
            <summary>Unknown</summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.Options">
            <summary>An array of string sent to the login server to enable various options</summary>
        </member>
        <member name="F:OpenMetaverse.LoginParams.LoginID">
            <summary>A randomly generated ID to distinguish between login attempts. This value is only used
            internally in the library and is never sent over the wire</summary>
        </member>
        <member name="T:OpenMetaverse.LoginResponseData">
            <summary>
            The decoded data returned from the login server after a successful login
            </summary>
        </member>
        <member name="F:OpenMetaverse.LoginResponseData.Login">
            <summary>true, false, indeterminate</summary>
        </member>
        <member name="F:OpenMetaverse.LoginResponseData.Message">
            <summary>Login message of the day</summary>
        </member>
        <member name="F:OpenMetaverse.LoginResponseData.AgentAccess">
            <summary>M or PG, also agent_region_access and agent_access_max</summary>
        </member>
        <member name="M:OpenMetaverse.LoginResponseData.Parse(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Parse LLSD Login Reply Data
            </summary>
            <param name="reply">An <seealso cref="T:OpenMetaverse.StructuredData.OSDMap" />
            contaning the login response data</param>
            <remarks>XML-RPC logins do not require this as XML-RPC.NET
            automatically populates the struct properly using attributes</remarks>
        </member>
        <member name="T:OpenMetaverse.NetworkManager">
            <summary>
            Login Routines
            </summary>
            <summary>
            NetworkManager is responsible for managing the network layer of
            OpenMetaverse. It tracks all the server connections, serializes
            outgoing traffic and deserializes incoming traffic, and provides
            instances of delegates for network-related events.
            </summary>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Default constructor
            </summary>
            <param name="client">Reference to the GridClient object</param>
        </member>
        <member name="T:OpenMetaverse.NetworkManager.DisconnectType">
            <summary>
            Explains why a simulator or the grid disconnected from us
            </summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.DisconnectType.ClientInitiated">
            <summary>The client requested the logout or simulator disconnect</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.DisconnectType.ServerInitiated">
            <summary>The server notified us that it is disconnecting</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.DisconnectType.NetworkTimeout">
            <summary>Either a socket was closed or network traffic timed out</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.DisconnectType.SimShutdown">
            <summary>The last active simulator shut down</summary>
        </member>
        <member name="T:OpenMetaverse.NetworkManager.IncomingPacket">
            <summary>
            Holds a simulator reference and a decoded packet, these structs are put in
            the packet inbox for event handling
            </summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.IncomingPacket.Simulator">
            <summary>Reference to the simulator that this packet came from</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.IncomingPacket.Packet">
            <summary>Packet that needs to be processed</summary>
        </member>
        <member name="T:OpenMetaverse.NetworkManager.OutgoingPacket">
            <summary>
            Holds a simulator reference and a serialized packet, these structs are put in
            the packet outbox for sending
            </summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.OutgoingPacket.Simulator">
            <summary>Reference to the simulator this packet is destined for</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.OutgoingPacket.Buffer">
            <summary>Packet that needs to be sent</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.OutgoingPacket.SequenceNumber">
            <summary>Sequence number of the wrapped packet</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.OutgoingPacket.ResendCount">
            <summary>Number of times this packet has been resent</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.OutgoingPacket.TickCount">
            <summary>Environment.TickCount when this packet was last sent over the wire</summary>
        </member>
        <member name="T:OpenMetaverse.NetworkManager.LoginResponseCallback">
            <summary>
            </summary>
            <param name="loginSuccess">
            </param>
            <param name="redirect">
            </param>
            <param name="replyData">
            </param>
            <param name="message">
            </param>
            <param name="reason">
            </param>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.m_LoginProgress">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.m_LoginProgressLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.LoginSeedCapability">
            <summary>Seed CAPS URL returned from the login server</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.UDPBlacklist">
            <summary>A list of packets obtained during the login process which
            networkmanager will log but not process</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.m_PacketSent">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.m_PacketSentLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.m_LoggedOut">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.m_LoggedOutLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.m_SimConnecting">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.m_SimConnectingLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.m_SimConnected">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.m_SimConnectedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.m_SimDisconnected">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.m_SimDisconnectedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.m_Disconnected">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.m_DisconnectedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.m_SimChanged">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.m_SimChangedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.m_EventQueueRunning">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.m_EventQueueRunningLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.Simulators">
            <summary>All of the simulators we are currently connected to</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.CapsEvents">
            <summary>Handlers for incoming capability events</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.PacketEvents">
            <summary>Handlers for incoming packets</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.PacketInbox">
            <summary>Incoming packets that are awaiting handling</summary>
        </member>
        <member name="F:OpenMetaverse.NetworkManager.PacketOutbox">
            <summary>Outgoing packets that are awaiting handling</summary>
        </member>
        <member name="E:OpenMetaverse.NetworkManager.LoginProgress">
            <summary>Raised when the simulator sends us data containing
            ...</summary>
        </member>
        <member name="E:OpenMetaverse.NetworkManager.OnLoginResponse">
            <summary>Called when a reply is received from the login server, the
            login sequence will block until this event returns</summary>
        </member>
        <member name="E:OpenMetaverse.NetworkManager.PacketSent">
            <summary>Raised when the simulator sends us data containing
            ...</summary>
        </member>
        <member name="E:OpenMetaverse.NetworkManager.LoggedOut">
            <summary>Raised when the simulator sends us data containing
            ...</summary>
        </member>
        <member name="E:OpenMetaverse.NetworkManager.SimConnecting">
            <summary>Raised when the simulator sends us data containing
            ...</summary>
        </member>
        <member name="E:OpenMetaverse.NetworkManager.SimConnected">
            <summary>Raised when the simulator sends us data containing
            ...</summary>
        </member>
        <member name="E:OpenMetaverse.NetworkManager.SimDisconnected">
            <summary>Raised when the simulator sends us data containing
            ...</summary>
        </member>
        <member name="E:OpenMetaverse.NetworkManager.Disconnected">
            <summary>Raised when the simulator sends us data containing
            ...</summary>
        </member>
        <member name="E:OpenMetaverse.NetworkManager.SimChanged">
            <summary>Raised when the simulator sends us data containing
            ...</summary>
        </member>
        <member name="E:OpenMetaverse.NetworkManager.EventQueueRunning">
            <summary>Raised when the simulator sends us data containing
            ...</summary>
        </member>
        <member name="P:OpenMetaverse.NetworkManager.LoginStatusCode">
            <summary>Current state of logging in</summary>
        </member>
        <member name="P:OpenMetaverse.NetworkManager.LoginErrorKey">
            <summary>Upon login failure, contains a short string key for the
            type of login error that occurred</summary>
        </member>
        <member name="P:OpenMetaverse.NetworkManager.RawLoginReply">
            <summary>The raw XML-RPC reply from the login server, exactly as it
            was received (minus the HTTP header)</summary>
        </member>
        <member name="P:OpenMetaverse.NetworkManager.LoginMessage">
            <summary>During login this contains a descriptive version of
            LoginStatusCode. After a successful login this will contain the
            message of the day, and after a failed login a descriptive error
            message will be returned</summary>
        </member>
        <member name="P:OpenMetaverse.NetworkManager.CircuitCode">
            <summary>Unique identifier associated with our connections to
            simulators</summary>
        </member>
        <member name="P:OpenMetaverse.NetworkManager.CurrentSim">
            <summary>The simulator that the logged in avatar is currently
            occupying</summary>
        </member>
        <member name="P:OpenMetaverse.NetworkManager.Connected">
            <summary>Shows whether the network layer is logged in to the
            grid or not</summary>
        </member>
        <member name="P:OpenMetaverse.NetworkManager.InboxCount">
            <summary>Number of packets in the incoming queue</summary>
        </member>
        <member name="P:OpenMetaverse.NetworkManager.OutboxCount">
            <summary>Number of packets in the outgoing queue</summary>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.OnLoginProgress(OpenMetaverse.LoginProgressEventArgs)">
            <summary>Raises the LoginProgress Event</summary>
            <param name="e">A LoginProgressEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.DefaultLoginParams(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Generate sane default values for a login request
            </summary>
            <param name="firstName">Account first name</param>
            <param name="lastName">Account last name</param>
            <param name="password">Account password</param>
            <param name="userAgent">Client application name</param>
            <param name="userVersion">Client application version</param>
            <returns>A populated <seealso cref="T:OpenMetaverse.LoginParams" /> struct containing
            sane defaults</returns>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.Login(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Simplified login that takes the most common and required fields
            </summary>
            <param name="firstName">Account first name</param>
            <param name="lastName">Account last name</param>
            <param name="password">Account password</param>
            <param name="userAgent">Client application name</param>
            <param name="userVersion">Client application version</param>
            <returns>Whether the login was successful or not. On failure the
            LoginErrorKey string will contain the error code and LoginMessage
            will contain a description of the error</returns>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.Login(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Simplified login that takes the most common fields along with a
            starting location URI, and can accept an MD5 string instead of a
            plaintext password
            </summary>
            <param name="firstName">Account first name</param>
            <param name="lastName">Account last name</param>
            <param name="password">Account password or MD5 hash of the password
            such as $1$1682a1e45e9f957dcdf0bb56eb43319c</param>
            <param name="userAgent">Client application name</param>
            <param name="start">Starting location URI that can be built with
            StartLocation()</param>
            <param name="userVersion">Client application version</param>
            <returns>Whether the login was successful or not. On failure the
            LoginErrorKey string will contain the error code and LoginMessage
            will contain a description of the error</returns>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.Login(OpenMetaverse.LoginParams)">
            <summary>
            Login that takes a struct of all the values that will be passed to
            the login server
            </summary>
            <param name="loginParams">The values that will be passed to the login
            server, all fields must be set even if they are String.Empty</param>
            <returns>Whether the login was successful or not. On failure the
            LoginErrorKey string will contain the error code and LoginMessage
            will contain a description of the error</returns>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.StartLocation(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Build a start location URI for passing to the Login function
            </summary>
            <param name="sim">Name of the simulator to start in</param>
            <param name="x">X coordinate to start at</param>
            <param name="y">Y coordinate to start at</param>
            <param name="z">Z coordinate to start at</param>
            <returns>String with a URI that can be used to login to a specified
            location</returns>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.LoginReplyXmlRpcHandler(Nwc.XmlRpc.XmlRpcResponse,OpenMetaverse.LoginParams)">
            <summary>
            Handles response from XML-RPC login replies
            </summary>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.LoginReplyLLSDHandler(OpenMetaverse.Http.CapsClient,OpenMetaverse.StructuredData.OSD,System.Exception)">
            <summary>
            Handle response from LLSD login replies
            </summary>
            <param name="client">
            </param>
            <param name="result">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.GetPlatform">
            <summary>
            Get current OS
            </summary>
            <returns>Either "Win" or "Linux"</returns>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.GetMAC">
            <summary>
            Get clients default Mac Address
            </summary>
            <returns>A string containing the first found Mac Address</returns>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.OnPacketSent(OpenMetaverse.PacketSentEventArgs)">
            <summary>Raises the PacketSent Event</summary>
            <param name="e">A PacketSentEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.OnLoggedOut(OpenMetaverse.LoggedOutEventArgs)">
            <summary>Raises the LoggedOut Event</summary>
            <param name="e">A LoggedOutEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.OnSimConnecting(OpenMetaverse.SimConnectingEventArgs)">
            <summary>Raises the SimConnecting Event</summary>
            <param name="e">A SimConnectingEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.OnSimConnected(OpenMetaverse.SimConnectedEventArgs)">
            <summary>Raises the SimConnected Event</summary>
            <param name="e">A SimConnectedEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.OnSimDisconnected(OpenMetaverse.SimDisconnectedEventArgs)">
            <summary>Raises the SimDisconnected Event</summary>
            <param name="e">A SimDisconnectedEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.OnDisconnected(OpenMetaverse.DisconnectedEventArgs)">
            <summary>Raises the Disconnected Event</summary>
            <param name="e">A DisconnectedEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.OnSimChanged(OpenMetaverse.SimChangedEventArgs)">
            <summary>Raises the SimChanged Event</summary>
            <param name="e">A SimChangedEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.OnEventQueueRunning(OpenMetaverse.EventQueueRunningEventArgs)">
            <summary>Raises the EventQueueRunning Event</summary>
            <param name="e">A EventQueueRunningEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.RegisterCallback(OpenMetaverse.Packets.PacketType,System.EventHandler{OpenMetaverse.PacketReceivedEventArgs})">
            <summary>
            Register an event handler for a packet. This is a low level event
            interface and should only be used if you are doing something not
            supported in the library
            </summary>
            <param name="type">Packet type to trigger events for</param>
            <param name="callback">Callback to fire when a packet of this type
            is received</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.UnregisterCallback(OpenMetaverse.Packets.PacketType,System.EventHandler{OpenMetaverse.PacketReceivedEventArgs})">
            <summary>
            Unregister an event handler for a packet. This is a low level event
            interface and should only be used if you are doing something not
            supported in the library
            </summary>
            <param name="type">Packet type this callback is registered with</param>
            <param name="callback">Callback to stop firing events for</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.RegisterEventCallback(System.String,OpenMetaverse.Caps.EventQueueCallback)">
            <summary>
            Register a CAPS event handler. This is a low level event interface
            and should only be used if you are doing something not supported in
            the library
            </summary>
            <param name="capsEvent">Name of the CAPS event to register a handler for</param>
            <param name="callback">Callback to fire when a CAPS event is received</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.UnregisterEventCallback(System.String,OpenMetaverse.Caps.EventQueueCallback)">
            <summary>
            Unregister a CAPS event handler. This is a low level event interface
            and should only be used if you are doing something not supported in
            the library
            </summary>
            <param name="capsEvent">Name of the CAPS event this callback is
            registered with</param>
            <param name="callback">Callback to stop firing events for</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.SendPacket(OpenMetaverse.Packets.Packet)">
            <summary>
            Send a packet to the simulator the avatar is currently occupying
            </summary>
            <param name="packet">Packet to send</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.SendPacket(OpenMetaverse.Packets.Packet,OpenMetaverse.Simulator)">
            <summary>
            Send a packet to a specified simulator
            </summary>
            <param name="packet">Packet to send</param>
            <param name="simulator">Simulator to send the packet to</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.Connect(System.Net.IPAddress,System.UInt16,System.UInt64,System.Boolean,System.String)">
            <summary>
            Connect to a simulator
            </summary>
            <param name="ip">IP address to connect to</param>
            <param name="port">Port to connect to</param>
            <param name="handle">Handle for this simulator, to identify its
            location in the grid</param>
            <param name="setDefault">Whether to set CurrentSim to this new
            connection, use this if the avatar is moving in to this simulator</param>
            <param name="seedcaps">URL of the capabilities server to use for
            this sim connection</param>
            <returns>A Simulator object on success, otherwise null</returns>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.Connect(System.Net.IPEndPoint,System.UInt64,System.Boolean,System.String)">
            <summary>
            Connect to a simulator
            </summary>
            <param name="endPoint">IP address and port to connect to</param>
            <param name="handle">Handle for this simulator, to identify its
            location in the grid</param>
            <param name="setDefault">Whether to set CurrentSim to this new
            connection, use this if the avatar is moving in to this simulator</param>
            <param name="seedcaps">URL of the capabilities server to use for
            this sim connection</param>
            <returns>A Simulator object on success, otherwise null</returns>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.Logout">
            <summary>
            Initiate a blocking logout request. This will return when the logout
            handshake has completed or when <code>Settings.LOGOUT_TIMEOUT</code>
            has expired and the network layer is manually shut down
            </summary>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.RequestLogout">
            <summary>
            Initiate the logout process. Check if logout succeeded with the
            <code>OnLogoutReply</code> event, and if this does not fire the
            <code>Shutdown()</code> function needs to be manually called
            </summary>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.DisconnectSim(OpenMetaverse.Simulator,System.Boolean)">
            <summary>
            Close a connection to the given simulator
            </summary>
            <param name="simulator">
            </param>
            <param name="sendCloseCircuit">
            </param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.Shutdown(OpenMetaverse.NetworkManager.DisconnectType)">
            <summary>
            Shutdown will disconnect all the sims except for the current sim
            first, and then kill the connection to CurrentSim. This should only
            be called if the logout process times out on <code>RequestLogout</code></summary>
            <param name="type">Type of shutdown</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.Shutdown(OpenMetaverse.NetworkManager.DisconnectType,System.String)">
            <summary>
            Shutdown will disconnect all the sims except for the current sim
            first, and then kill the connection to CurrentSim. This should only
            be called if the logout process times out on <code>RequestLogout</code></summary>
            <param name="type">Type of shutdown</param>
            <param name="message">Shutdown message</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.FindSimulator(System.Net.IPEndPoint)">
            <summary>
            Searches through the list of currently connected simulators to find
            one attached to the given IPEndPoint
            </summary>
            <param name="endPoint">IPEndPoint of the Simulator to search for</param>
            <returns>A Simulator reference on success, otherwise null</returns>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.RaiseConnectedEvent(OpenMetaverse.Simulator)">
            <summary>
            Fire an event when an event queue connects for capabilities
            </summary>
            <param name="simulator">Simulator the event queue is attached to</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.LogoutReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.StartPingCheckHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.CompletePingCheckHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.SimStatsHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.RegionHandshakeHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.DisableSimulatorHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.NetworkManager.KickUserHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="T:OpenMetaverse.NameValue">
            <summary>
            A Name Value pair with additional settings, used in the protocol
            primarily to transmit avatar names and active group in object packets
            </summary>
        </member>
        <member name="M:OpenMetaverse.NameValue.#ctor(System.String,OpenMetaverse.NameValue.ValueType,OpenMetaverse.NameValue.ClassType,OpenMetaverse.NameValue.SendtoType,System.Object)">
            <summary>
            Constructor that takes all the fields as parameters
            </summary>
            <param name="name">
            </param>
            <param name="valueType">
            </param>
            <param name="classType">
            </param>
            <param name="sendtoType">
            </param>
            <param name="value">
            </param>
        </member>
        <member name="M:OpenMetaverse.NameValue.#ctor(System.String)">
            <summary>
            Constructor that takes a single line from a NameValue field
            </summary>
            <param name="data">
            </param>
        </member>
        <member name="T:OpenMetaverse.NameValue.ValueType">
            <summary>Type of the value</summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ValueType.Unknown">
            <summary>Unknown</summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ValueType.String">
            <summary>String value</summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ValueType.F32">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ValueType.S32">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ValueType.VEC3">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ValueType.U32">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ValueType.CAMERA">
            <summary>Deprecated</summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ValueType.Asset">
            <summary>String value, but designated as an asset</summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ValueType.U64">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.NameValue.ClassType">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ClassType.Unknown">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ClassType.ReadOnly">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ClassType.ReadWrite">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.ClassType.Callback">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.NameValue.SendtoType">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.SendtoType.Unknown">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.SendtoType.Sim">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.SendtoType.DataSim">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.SendtoType.SimViewer">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.SendtoType.DataSimViewer">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.Name">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.Type">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.Class">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.Sendto">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.NameValue.Value">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.ReportType">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ReportType.None">
            <summary>No report</summary>
        </member>
        <member name="F:OpenMetaverse.ReportType.Unknown">
            <summary>Unknown report type</summary>
        </member>
        <member name="F:OpenMetaverse.ReportType.Bug">
            <summary>Bug report</summary>
        </member>
        <member name="F:OpenMetaverse.ReportType.Complaint">
            <summary>Complaint report</summary>
        </member>
        <member name="F:OpenMetaverse.ReportType.CustomerServiceRequest">
            <summary>Customer service report</summary>
        </member>
        <member name="T:OpenMetaverse.CompressedFlags">
            <summary>
            Bitflag field for ObjectUpdateCompressed data blocks, describing
            which options are present for each object
            </summary>
        </member>
        <member name="F:OpenMetaverse.CompressedFlags.ScratchPad">
            <summary>Unknown</summary>
        </member>
        <member name="F:OpenMetaverse.CompressedFlags.Tree">
            <summary>Whether the object has a TreeSpecies</summary>
        </member>
        <member name="F:OpenMetaverse.CompressedFlags.HasText">
            <summary>Whether the object has floating text ala llSetText</summary>
        </member>
        <member name="F:OpenMetaverse.CompressedFlags.HasParticles">
            <summary>Whether the object has an active particle system</summary>
        </member>
        <member name="F:OpenMetaverse.CompressedFlags.HasSound">
            <summary>Whether the object has sound attached to it</summary>
        </member>
        <member name="F:OpenMetaverse.CompressedFlags.HasParent">
            <summary>Whether the object is attached to a root object or not</summary>
        </member>
        <member name="F:OpenMetaverse.CompressedFlags.TextureAnimation">
            <summary>Whether the object has texture animation settings</summary>
        </member>
        <member name="F:OpenMetaverse.CompressedFlags.HasAngularVelocity">
            <summary>Whether the object has an angular velocity</summary>
        </member>
        <member name="F:OpenMetaverse.CompressedFlags.HasNameValues">
            <summary>Whether the object has a name value pairs string</summary>
        </member>
        <member name="F:OpenMetaverse.CompressedFlags.MediaURL">
            <summary>Whether the object has a Media URL set</summary>
        </member>
        <member name="T:OpenMetaverse.UpdateType">
            <summary>
            Specific Flags for MultipleObjectUpdate requests
            </summary>
        </member>
        <member name="F:OpenMetaverse.UpdateType.None">
            <summary>None</summary>
        </member>
        <member name="F:OpenMetaverse.UpdateType.Position">
            <summary>Change position of prims</summary>
        </member>
        <member name="F:OpenMetaverse.UpdateType.Rotation">
            <summary>Change rotation of prims</summary>
        </member>
        <member name="F:OpenMetaverse.UpdateType.Scale">
            <summary>Change size of prims</summary>
        </member>
        <member name="F:OpenMetaverse.UpdateType.Linked">
            <summary>Perform operation on link set</summary>
        </member>
        <member name="F:OpenMetaverse.UpdateType.Uniform">
            <summary>Scale prims uniformly, same as selecing ctrl+shift in the
            viewer. Used in conjunction with Scale</summary>
        </member>
        <member name="T:OpenMetaverse.PayPriceType">
            <summary>
            Special values in PayPriceReply. If the price is not one of these
            literal value of the price should be use
            </summary>
        </member>
        <member name="F:OpenMetaverse.PayPriceType.Hide">
            <summary>
            Indicates that this pay option should be hidden
            </summary>
        </member>
        <member name="F:OpenMetaverse.PayPriceType.Default">
            <summary>
            Indicates that this pay option should have the default value
            </summary>
        </member>
        <member name="T:OpenMetaverse.ObjectMovementUpdate">
            <summary>
            Contains the variables sent in an object update packet for objects.
            Used to track position and movement of prims and avatars
            </summary>
        </member>
        <member name="F:OpenMetaverse.ObjectMovementUpdate.Avatar">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ObjectMovementUpdate.CollisionPlane">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ObjectMovementUpdate.State">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ObjectMovementUpdate.LocalID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ObjectMovementUpdate.Position">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ObjectMovementUpdate.Velocity">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ObjectMovementUpdate.Acceleration">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ObjectMovementUpdate.Rotation">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ObjectMovementUpdate.AngularVelocity">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ObjectMovementUpdate.Textures">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.ObjectManager">
            <summary>
            Handles all network traffic related to prims and avatar positions and
            movement.
            </summary>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Construct a new instance of the ObjectManager class
            </summary>
            <param name="client">A reference to the <see cref="T:OpenMetaverse.GridClient" /> instance</param>
        </member>
        <member name="T:OpenMetaverse.ObjectManager.ObjectMediaCallback">
            <summary>
            Callback for getting object media data via CAP
            </summary>
            <param name="success">Indicates if the operation was succesfull</param>
            <param name="version">Object media version string</param>
            <param name="faceMedia">Array indexed on prim face of media entry data</param>
        </member>
        <member name="F:OpenMetaverse.ObjectManager.m_ObjectUpdate">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectManager.m_ObjectUpdateLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectManager.m_ObjectProperties">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectManager.m_ObjectPropertiesLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectManager.m_ObjectPropertiesUpdated">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectManager.m_ObjectPropertiesUpdatedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectManager.m_ObjectPropertiesFamily">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectManager.m_ObjectPropertiesFamilyLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectManager.m_AvatarUpdate">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectManager.m_AvatarUpdateLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectManager.m_TerseObjectUpdate">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectManager.m_TerseObjectUpdateLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectManager.m_ObjectDataBlockUpdate">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectManager.m_ObjectDataBlockUpdateLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectManager.m_KillObject">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectManager.m_KillObjectLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectManager.m_AvatarSitChanged">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectManager.m_AvatarSitChangedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectManager.m_PayPriceReply">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectManager.m_PayPriceReplyLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectManager.Client">
            <summary>Reference to the GridClient object</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectManager.InterpolationTimer">
            <summary>Does periodic dead reckoning calculation to convert
            velocity and acceleration to new positions for objects</summary>
        </member>
        <member name="E:OpenMetaverse.ObjectManager.ObjectUpdate">
            <summary>Raised when the simulator sends us data containing
            A <see cref="T:OpenMetaverse.Primitive" />, Foliage or Attachment</summary>
            <seealso cref="M:OpenMetaverse.ObjectManager.RequestObject(OpenMetaverse.Simulator,System.UInt32)" />
            <seealso cref="M:OpenMetaverse.ObjectManager.RequestObjects(OpenMetaverse.Simulator,System.Collections.Generic.List{System.UInt32})" />
        </member>
        <member name="E:OpenMetaverse.ObjectManager.ObjectProperties">
            <summary>Raised when the simulator sends us data containing
            additional <seea cref="Primitive" /> information</summary>
            <seealso cref="M:OpenMetaverse.ObjectManager.SelectObject(OpenMetaverse.Simulator,System.UInt32,System.Boolean)" />
            <seealso cref="M:OpenMetaverse.ObjectManager.SelectObjects(OpenMetaverse.Simulator,System.UInt32[])" />
        </member>
        <member name="E:OpenMetaverse.ObjectManager.ObjectPropertiesUpdated">
            <summary>Raised when the simulator sends us data containing
            Primitive.ObjectProperties for an object we are currently tracking</summary>
        </member>
        <member name="E:OpenMetaverse.ObjectManager.ObjectPropertiesFamily">
            <summary>Raised when the simulator sends us data containing
            additional <seea cref="Primitive" /> and <see cref="T:OpenMetaverse.Avatar" /> details</summary>
            <seealso cref="M:OpenMetaverse.ObjectManager.RequestObjectPropertiesFamily(OpenMetaverse.Simulator,OpenMetaverse.UUID,System.Boolean)" />
        </member>
        <member name="E:OpenMetaverse.ObjectManager.AvatarUpdate">
            <summary>Raised when the simulator sends us data containing
            updated information for an <see cref="T:OpenMetaverse.Avatar" /></summary>
        </member>
        <member name="E:OpenMetaverse.ObjectManager.TerseObjectUpdate">
            <summary>Raised when the simulator sends us data containing
            <see cref="T:OpenMetaverse.Primitive" /> and <see cref="T:OpenMetaverse.Avatar" /> movement changes</summary>
        </member>
        <member name="E:OpenMetaverse.ObjectManager.ObjectDataBlockUpdate">
            <summary>Raised when the simulator sends us data containing
            updates to an Objects DataBlock</summary>
        </member>
        <member name="E:OpenMetaverse.ObjectManager.KillObject">
            <summary>Raised when the simulator informs us an <see cref="T:OpenMetaverse.Primitive" />
            or <see cref="T:OpenMetaverse.Avatar" /> is no longer within view</summary>
        </member>
        <member name="E:OpenMetaverse.ObjectManager.AvatarSitChanged">
            <summary>Raised when the simulator sends us data containing
            updated sit information for our <see cref="T:OpenMetaverse.Avatar" /></summary>
        </member>
        <member name="E:OpenMetaverse.ObjectManager.PayPriceReply">
            <summary>Raised when the simulator sends us data containing
            purchase price information for a <see cref="T:OpenMetaverse.Primitive" /></summary>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.OnObjectUpdate(OpenMetaverse.PrimEventArgs)">
            <summary>Raises the ObjectUpdate Event</summary>
            <param name="e">A ObjectUpdateEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.OnObjectProperties(OpenMetaverse.ObjectPropertiesEventArgs)">
            <summary>Raises the ObjectProperties Event</summary>
            <param name="e">A ObjectPropertiesEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.OnObjectPropertiesUpdated(OpenMetaverse.ObjectPropertiesUpdatedEventArgs)">
            <summary>Raises the ObjectPropertiesUpdated Event</summary>
            <param name="e">A ObjectPropertiesUpdatedEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.OnObjectPropertiesFamily(OpenMetaverse.ObjectPropertiesFamilyEventArgs)">
            <summary>Raises the ObjectPropertiesFamily Event</summary>
            <param name="e">A ObjectPropertiesFamilyEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.OnAvatarUpdate(OpenMetaverse.AvatarUpdateEventArgs)">
            <summary>Raises the AvatarUpdate Event</summary>
            <param name="e">A AvatarUpdateEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.OnTerseObjectUpdate(OpenMetaverse.TerseObjectUpdateEventArgs)">
            <summary>Raises the TerseObjectUpdate Event</summary>
            <param name="e">A TerseObjectUpdateEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.OnObjectDataBlockUpdate(OpenMetaverse.ObjectDataBlockUpdateEventArgs)">
            <summary>Raises the ObjectDataBlockUpdate Event</summary>
            <param name="e">A ObjectDataBlockUpdateEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.OnKillObject(OpenMetaverse.KillObjectEventArgs)">
            <summary>Raises the KillObject Event</summary>
            <param name="e">A KillObjectEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.OnAvatarSitChanged(OpenMetaverse.AvatarSitChangedEventArgs)">
            <summary>Raises the AvatarSitChanged Event</summary>
            <param name="e">A AvatarSitChangedEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.OnPayPriceReply(OpenMetaverse.PayPriceReplyEventArgs)">
            <summary>Raises the PayPriceReply Event</summary>
            <param name="e">A PayPriceReplyEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.RequestObject(OpenMetaverse.Simulator,System.UInt32)">
            <summary>
            Request information for a single object from a <see cref="T:OpenMetaverse.Simulator" />
            you are currently connected to
            </summary>
            <param name="simulator">The <see cref="T:OpenMetaverse.Simulator" /> the object is located</param>
            <param name="localID">The Local ID of the object</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.RequestObjects(OpenMetaverse.Simulator,System.Collections.Generic.List{System.UInt32})">
            <summary>
            Request information for multiple objects contained in
            the same simulator
            </summary>
            <param name="simulator">The <see cref="T:OpenMetaverse.Simulator" /> the objects are located</param>
            <param name="localIDs">An array containing the Local IDs of the objects</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.BuyObject(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.SaleType,System.Int32,OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>
            Attempt to purchase an original object, a copy, or the contents of
            an object
            </summary>
            <param name="simulator">The <see cref="T:OpenMetaverse.Simulator" /> the object is located</param>
            <param name="localID">The Local ID of the object</param>
            <param name="saleType">Whether the original, a copy, or the object
            contents are on sale. This is used for verification, if the this
            sale type is not valid for the object the purchase will fail</param>
            <param name="price">Price of the object. This is used for
            verification, if it does not match the actual price the purchase
            will fail</param>
            <param name="groupID">Group ID that will be associated with the new
            purchase</param>
            <param name="categoryID">Inventory folder UUID where the object or objects
            purchased should be placed</param>
            <example>
                <code>
            BuyObject(Client.Network.CurrentSim, 500, SaleType.Copy,
            100, UUID.Zero, Client.Self.InventoryRootFolderUUID);
            </code>
            </example>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.RequestPayPrice(OpenMetaverse.Simulator,OpenMetaverse.UUID)">
            <summary>
            Request prices that should be displayed in pay dialog. This will triggger the simulator
            to send us back a PayPriceReply which can be handled by OnPayPriceReply event
            </summary>
            <param name="simulator">The <see cref="T:OpenMetaverse.Simulator" /> the object is located</param>
            <param name="objectID">The ID of the object</param>
            <remarks>The result is raised in the <see cref="E:OpenMetaverse.ObjectManager.PayPriceReply" /> event</remarks>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SelectObject(OpenMetaverse.Simulator,System.UInt32)">
            <summary>
            Select a single object. This will cause the <see cref="T:OpenMetaverse.Simulator" /> to send us
            an <see cref="T:OpenMetaverse.Packets.ObjectPropertiesPacket" /> which will raise the <see cref="E:OpenMetaverse.ObjectManager.ObjectProperties" /> event
            </summary>
            <param name="simulator">The <see cref="T:OpenMetaverse.Simulator" /> the object is located</param>
            <param name="localID">The Local ID of the object</param>
            <seealso cref="T:OpenMetaverse.ObjectPropertiesFamilyEventArgs" />
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SelectObject(OpenMetaverse.Simulator,System.UInt32,System.Boolean)">
            <summary>
            Select a single object. This will cause the <see cref="T:OpenMetaverse.Simulator" /> to send us
            an <see cref="T:OpenMetaverse.Packets.ObjectPropertiesPacket" /> which will raise the <see cref="E:OpenMetaverse.ObjectManager.ObjectProperties" /> event
            </summary>
            <param name="simulator">The <see cref="T:OpenMetaverse.Simulator" /> the object is located</param>
            <param name="localID">The Local ID of the object</param>
            <param name="automaticDeselect">if true, a call to <see cref="M:OpenMetaverse.ObjectManager.DeselectObject(OpenMetaverse.Simulator,System.UInt32)" /> is
            made immediately following the request</param>
            <seealso cref="T:OpenMetaverse.ObjectPropertiesFamilyEventArgs" />
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SelectObjects(OpenMetaverse.Simulator,System.UInt32[],System.Boolean)">
            <summary>
            Select multiple objects. This will cause the <see cref="T:OpenMetaverse.Simulator" /> to send us
            an <see cref="T:OpenMetaverse.Packets.ObjectPropertiesPacket" /> which will raise the <see cref="E:OpenMetaverse.ObjectManager.ObjectProperties" /> event
            </summary>
            <param name="simulator">The <see cref="T:OpenMetaverse.Simulator" /> the objects are located</param>
            <param name="localIDs">An array containing the Local IDs of the objects</param>
            <param name="automaticDeselect">Should objects be deselected immediately after selection</param>
            <seealso cref="T:OpenMetaverse.ObjectPropertiesFamilyEventArgs" />
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SelectObjects(OpenMetaverse.Simulator,System.UInt32[])">
            <summary>
            Select multiple objects. This will cause the <see cref="T:OpenMetaverse.Simulator" /> to send us
            an <see cref="T:OpenMetaverse.Packets.ObjectPropertiesPacket" /> which will raise the <see cref="E:OpenMetaverse.ObjectManager.ObjectProperties" /> event
            </summary>
            <param name="simulator">The <see cref="T:OpenMetaverse.Simulator" /> the objects are located</param>
            <param name="localIDs">An array containing the Local IDs of the objects</param>
            <seealso cref="T:OpenMetaverse.ObjectPropertiesFamilyEventArgs" />
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetFlags(OpenMetaverse.Simulator,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Update the properties of an object
            </summary>
            <param name="simulator">The <see cref="T:OpenMetaverse.Simulator" /> the object is located</param>
            <param name="localID">The Local ID of the object</param>
            <param name="physical">true to turn the objects physical property on</param>
            <param name="temporary">true to turn the objects temporary property on</param>
            <param name="phantom">true to turn the objects phantom property on</param>
            <param name="castsShadow">true to turn the objects cast shadows property on</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetSaleInfo(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.SaleType,System.Int32)">
            <summary>
            Sets the sale properties of a single object
            </summary>
            <param name="simulator">The <see cref="T:OpenMetaverse.Simulator" /> the object is located</param>
            <param name="localID">The Local ID of the object</param>
            <param name="saleType">One of the options from the <see cref="T:OpenMetaverse.SaleType" /> enum</param>
            <param name="price">The price of the object</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetSaleInfo(OpenMetaverse.Simulator,System.Collections.Generic.List{System.UInt32},OpenMetaverse.SaleType,System.Int32)">
            <summary>
            Sets the sale properties of multiple objects
            </summary>
            <param name="simulator">The <see cref="T:OpenMetaverse.Simulator" /> the objects are located</param>
            <param name="localIDs">An array containing the Local IDs of the objects</param>
            <param name="saleType">One of the options from the <see cref="T:OpenMetaverse.SaleType" /> enum</param>
            <param name="price">The price of the object</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.DeselectObject(OpenMetaverse.Simulator,System.UInt32)">
            <summary>
            Deselect a single object
            </summary>
            <param name="simulator">The <see cref="T:OpenMetaverse.Simulator" /> the object is located</param>
            <param name="localID">The Local ID of the object</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.DeselectObjects(OpenMetaverse.Simulator,System.UInt32[])">
            <summary>
            Deselect multiple objects.
            </summary>
            <param name="simulator">The <see cref="T:OpenMetaverse.Simulator" /> the objects are located</param>
            <param name="localIDs">An array containing the Local IDs of the objects</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.ClickObject(OpenMetaverse.Simulator,System.UInt32)">
            <summary>
            Perform a click action on an object
            </summary>
            <param name="simulator">The <see cref="T:OpenMetaverse.Simulator" /> the object is located</param>
            <param name="localID">The Local ID of the object</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.ClickObject(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Vector3,OpenMetaverse.Vector3,System.Int32,OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Vector3)">
            <summary>
            Perform a click action (Grab) on a single object
            </summary>
            <param name="simulator">The <see cref="T:OpenMetaverse.Simulator" /> the object is located</param>
            <param name="localID">The Local ID of the object</param>
            <param name="uvCoord">The texture coordinates to touch</param>
            <param name="stCoord">The surface coordinates to touch</param>
            <param name="faceIndex">The face of the position to touch</param>
            <param name="position">The region coordinates of the position to touch</param>
            <param name="normal">The surface normal of the position to touch (A normal is a vector perpindicular to the surface)</param>
            <param name="binormal">The surface binormal of the position to touch (A binormal is a vector tangen to the surface
            pointing along the U direction of the tangent space</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.AddPrim(OpenMetaverse.Simulator,OpenMetaverse.Primitive.ConstructionData,OpenMetaverse.UUID,OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Quaternion)">
            <summary>
            Create (rez) a new prim object in a simulator
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object to place the object in</param>
            <param name="prim">Data describing the prim object to rez</param>
            <param name="groupID">Group ID that this prim will be set to, or UUID.Zero if you
            do not want the object to be associated with a specific group</param>
            <param name="position">An approximation of the position at which to rez the prim</param>
            <param name="scale">Scale vector to size this prim</param>
            <param name="rotation">Rotation quaternion to rotate this prim</param>
            <remarks>Due to the way client prim rezzing is done on the server,
            the requested position for an object is only close to where the prim
            actually ends up. If you desire exact placement you'll need to
            follow up by moving the object after it has been created. This
            function will not set textures, light and flexible data, or other
            extended primitive properties</remarks>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.AddPrim(OpenMetaverse.Simulator,OpenMetaverse.Primitive.ConstructionData,OpenMetaverse.UUID,OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Quaternion,OpenMetaverse.PrimFlags)">
            <summary>
            Create (rez) a new prim object in a simulator
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object to place the object in</param>
            <param name="prim">Data describing the prim object to rez</param>
            <param name="groupID">Group ID that this prim will be set to, or UUID.Zero if you
            do not want the object to be associated with a specific group</param>
            <param name="position">An approximation of the position at which to rez the prim</param>
            <param name="scale">Scale vector to size this prim</param>
            <param name="rotation">Rotation quaternion to rotate this prim</param>
            <param name="createFlags">Specify the <seealso cref="T:OpenMetaverse.PrimFlags" /></param>
            <remarks>Due to the way client prim rezzing is done on the server,
            the requested position for an object is only close to where the prim
            actually ends up. If you desire exact placement you'll need to
            follow up by moving the object after it has been created. This
            function will not set textures, light and flexible data, or other
            extended primitive properties</remarks>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.AddTree(OpenMetaverse.Simulator,OpenMetaverse.Vector3,OpenMetaverse.Quaternion,OpenMetaverse.Vector3,OpenMetaverse.Tree,OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Rez a Linden tree
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the object resides</param>
            <param name="scale">The size of the tree</param>
            <param name="rotation">The rotation of the tree</param>
            <param name="position">The position of the tree</param>
            <param name="treeType">The Type of tree</param>
            <param name="groupOwner">The <seealso cref="T:OpenMetaverse.UUID" /> of the group to set the tree to,
            or UUID.Zero if no group is to be set</param>
            <param name="newTree">true to use the "new" Linden trees, false to use the old</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.AddGrass(OpenMetaverse.Simulator,OpenMetaverse.Vector3,OpenMetaverse.Quaternion,OpenMetaverse.Vector3,OpenMetaverse.Grass,OpenMetaverse.UUID)">
            <summary>
            Rez grass and ground cover
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the object resides</param>
            <param name="scale">The size of the grass</param>
            <param name="rotation">The rotation of the grass</param>
            <param name="position">The position of the grass</param>
            <param name="grassType">The type of grass from the <seealso cref="T:OpenMetaverse.Grass" /> enum</param>
            <param name="groupOwner">The <seealso cref="T:OpenMetaverse.UUID" /> of the group to set the tree to,
            or UUID.Zero if no group is to be set</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetTextures(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Primitive.TextureEntry)">
            <summary>
            Set the textures to apply to the faces of an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="textures">The texture data to apply</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetTextures(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Primitive.TextureEntry,System.String)">
            <summary>
            Set the textures to apply to the faces of an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="textures">The texture data to apply</param>
            <param name="mediaUrl">A media URL (not used)</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetLight(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Primitive.LightData)">
            <summary>
            Set the Light data on an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="light">A <seealso cref="T:OpenMetaverse.Primitive.LightData" /> object containing the data to set</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetFlexible(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Primitive.FlexibleData)">
            <summary>
            Set the flexible data on an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="flexible">A <seealso cref="T:OpenMetaverse.Primitive.FlexibleData" /> object containing the data to set</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetSculpt(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Primitive.SculptData)">
            <summary>
            Set the sculptie texture and data on an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="sculpt">A <seealso cref="T:OpenMetaverse.Primitive.SculptData" /> object containing the data to set</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetExtraParamOff(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.ExtraParamType)">
            <summary>
            Unset additional primitive parameters on an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="type">The extra parameters to set</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.LinkPrims(OpenMetaverse.Simulator,System.Collections.Generic.List{System.UInt32})">
            <summary>
            Link multiple prims into a linkset
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the objects reside</param>
            <param name="localIDs">An array which contains the IDs of the objects to link</param>
            <remarks>The last object in the array will be the root object of the linkset TODO: Is this true?</remarks>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetRotation(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Quaternion)">
            <summary>
            Change the rotation of an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="rotation">The new rotation of the object</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetName(OpenMetaverse.Simulator,System.UInt32,System.String)">
            <summary>
            Set the name of an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="name">A string containing the new name of the object</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetNames(OpenMetaverse.Simulator,System.UInt32[],System.String[])">
            <summary>
            Set the name of multiple objects
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the objects reside</param>
            <param name="localIDs">An array which contains the IDs of the objects to change the name of</param>
            <param name="names">An array which contains the new names of the objects</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetDescription(OpenMetaverse.Simulator,System.UInt32,System.String)">
            <summary>
            Set the description of an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="description">A string containing the new description of the object</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetDescriptions(OpenMetaverse.Simulator,System.UInt32[],System.String[])">
            <summary>
            Set the descriptions of multiple objects
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the objects reside</param>
            <param name="localIDs">An array which contains the IDs of the objects to change the description of</param>
            <param name="descriptions">An array which contains the new descriptions of the objects</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.AttachObject(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.AttachmentPoint,OpenMetaverse.Quaternion)">
            <summary>
            Attach an object to this avatar
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="attachPoint">The point on the avatar the object will be attached</param>
            <param name="rotation">The rotation of the attached object</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.DropObject(OpenMetaverse.Simulator,System.UInt32)">
            <summary>
            Drop an attached object from this avatar
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" />
            object where the objects reside. This will always be the simulator the avatar is currently in
            </param>
            <param name="localID">The object's ID which is local to the simulator the object is in</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.DetachObjects(OpenMetaverse.Simulator,System.Collections.Generic.List{System.UInt32})">
            <summary>
            Detach an object from yourself
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" />
            object where the objects reside
            This will always be the simulator the avatar is currently in
            </param>
            <param name="localIDs">An array which contains the IDs of the objects to detach</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetPosition(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Vector3)">
            <summary>
            Change the position of an object, Will change position of entire linkset
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="position">The new position of the object</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetPosition(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Vector3,System.Boolean)">
            <summary>
            Change the position of an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="position">The new position of the object</param>
            <param name="childOnly">if true, will change position of (this) child prim only, not entire linkset</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetScale(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Vector3,System.Boolean,System.Boolean)">
            <summary>
            Change the Scale (size) of an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="scale">The new scale of the object</param>
            <param name="childOnly">If true, will change scale of this prim only, not entire linkset</param>
            <param name="uniform">True to resize prims uniformly</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetRotation(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Quaternion,System.Boolean)">
            <summary>
            Change the Rotation of an object that is either a child or a whole linkset
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="quat">The new scale of the object</param>
            <param name="childOnly">If true, will change rotation of this prim only, not entire linkset</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.UpdateObject(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Vector3,OpenMetaverse.UpdateType)">
            <summary>
            Send a Multiple Object Update packet to change the size, scale or rotation of a primitive
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="data">The new rotation, size, or position of the target object</param>
            <param name="type">The flags from the <seealso cref="T:OpenMetaverse.UpdateType" /> Enum</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.DeedObject(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.UUID)">
            <summary>
            Deed an object (prim) to a group, Object must be shared with group which
            can be accomplished with SetPermissions()
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="groupOwner">The <seealso cref="T:OpenMetaverse.UUID" /> of the group to deed the object to</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.DeedObjects(OpenMetaverse.Simulator,System.Collections.Generic.List{System.UInt32},OpenMetaverse.UUID)">
            <summary>
            Deed multiple objects (prims) to a group, Objects must be shared with group which
            can be accomplished with SetPermissions()
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the object resides</param>
            <param name="localIDs">An array which contains the IDs of the objects to deed</param>
            <param name="groupOwner">The <seealso cref="T:OpenMetaverse.UUID" /> of the group to deed the object to</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetPermissions(OpenMetaverse.Simulator,System.Collections.Generic.List{System.UInt32},OpenMetaverse.PermissionWho,OpenMetaverse.PermissionMask,System.Boolean)">
            <summary>
            Set the permissions on multiple objects
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the objects reside</param>
            <param name="localIDs">An array which contains the IDs of the objects to set the permissions on</param>
            <param name="who">The new Who mask to set</param>
            <param name="permissions">The new Permissions mark to set</param>
            <param name="set">TODO: What does this do?</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.RequestObjectPropertiesFamily(OpenMetaverse.Simulator,OpenMetaverse.UUID)">
            <summary>
            Request additional properties for an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the object resides</param>
            <param name="objectID">
            </param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.RequestObjectPropertiesFamily(OpenMetaverse.Simulator,OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Request additional properties for an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the object resides</param>
            <param name="objectID">Absolute UUID of the object</param>
            <param name="reliable">Whether to require server acknowledgement of this request</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetObjectsGroup(OpenMetaverse.Simulator,System.Collections.Generic.List{System.UInt32},OpenMetaverse.UUID)">
            <summary>
            Set the ownership of a list of objects to the specified group
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the objects reside</param>
            <param name="localIds">An array which contains the IDs of the objects to set the group id on</param>
            <param name="groupID">The Groups ID</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.NavigateObjectMedia(OpenMetaverse.UUID,System.Int32,System.String,OpenMetaverse.Simulator)">
            <summary>
            Update current URL of the previously set prim media
            </summary>
            <param name="primID">UUID of the prim</param>
            <param name="newURL">Set current URL to this</param>
            <param name="face">Prim face number</param>
            <param name="sim">Simulator in which prim is located</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.UpdateObjectMedia(OpenMetaverse.UUID,OpenMetaverse.MediaEntry[],OpenMetaverse.Simulator)">
            <summary>
            Set object media
            </summary>
            <param name="primID">UUID of the prim</param>
            <param name="faceMedia">Array the length of prims number of faces. Null on face indexes where there is
            no media, <seealso cref="T:OpenMetaverse.MediaEntry" /> on faces which contain the media</param>
            <param name="sim">Simulatior in which prim is located</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.RequestObjectMedia(OpenMetaverse.UUID,OpenMetaverse.Simulator,OpenMetaverse.ObjectManager.ObjectMediaCallback)">
            <summary>
            Retrieve information about object media
            </summary>
            <param name="primID">UUID of the primitive</param>
            <param name="sim">Simulator where prim is located</param>
            <param name="callback">Call this callback when done</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.ObjectUpdateHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.ImprovedTerseObjectUpdateHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>
            A terse object update, used when a transformation matrix or
            velocity/acceleration for an object changes but nothing else
            (scale/position/rotation/acceleration/velocity)
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.ObjectUpdateCompressedHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.ObjectUpdateCachedHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.KillObjectHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.ObjectPropertiesHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.ObjectPropertiesFamilyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.PayPriceReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.BuildBasicShape(OpenMetaverse.PrimType)">
            <summary>
            Setup construction data for a basic primitive shape
            </summary>
            <param name="type">Primitive shape to construct</param>
            <returns>Construction data that can be plugged into a <seealso cref="T:OpenMetaverse.Primitive" /></returns>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetAvatarSittingOn(OpenMetaverse.Simulator,OpenMetaverse.Avatar,System.UInt32,System.UInt32)">
            <summary>
            </summary>
            <param name="sim">
            </param>
            <param name="av">
            </param>
            <param name="localid">
            </param>
            <param name="oldSeatID">
            </param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.UpdateDilation(OpenMetaverse.Simulator,System.UInt32)">
            <summary>
            </summary>
            <param name="s">
            </param>
            <param name="dilation">
            </param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetShape(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Primitive.ConstructionData)">
            <summary>
            Set the Shape data of an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="prim">Data describing the prim shape</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.SetMaterial(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.Material)">
            <summary>
            Set the Material data of an object
            </summary>
            <param name="simulator">A reference to the <seealso cref="T:OpenMetaverse.Simulator" /> object where the object resides</param>
            <param name="localID">The objects ID which is local to the simulator the object is in</param>
            <param name="material">The new material of the object</param>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.GetPrimitive(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.UUID)">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="localID">
            </param>
            <param name="fullID">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.ObjectManager.GetAvatar(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.UUID)">
            <summary>
            </summary>
            <param name="simulator">
            </param>
            <param name="localID">
            </param>
            <param name="fullID">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:OpenMetaverse.PrimEventArgs">
            <summary>Provides data for the <see cref="E:OpenMetaverse.ObjectManager.ObjectUpdate" /> event</summary>
            <remarks>
                <para>The <see cref="E:OpenMetaverse.ObjectManager.ObjectUpdate" /> event occurs when the simulator sends
            an <see cref="T:OpenMetaverse.Packets.ObjectUpdatePacket" /> containing a Primitive, Foliage or Attachment data</para>
                <para>Note 1: The <see cref="E:OpenMetaverse.ObjectManager.ObjectUpdate" /> event will not be raised when the object is an Avatar</para>
                <para>Note 2: It is possible for the <see cref="E:OpenMetaverse.ObjectManager.ObjectUpdate" /> to be
            raised twice for the same object if for example the primitive moved to a new simulator, then returned to the current simulator or
            if an Avatar crosses the border into a new simulator and returns to the current simulator</para>
            </remarks>
            <example>
            The following code example uses the <see cref="P:OpenMetaverse.PrimEventArgs.Prim" />, <see cref="P:OpenMetaverse.PrimEventArgs.Simulator" />, and <see cref="P:OpenMetaverse.PrimEventArgs.IsAttachment" />
            properties to display new Primitives and Attachments on the <see cref="T:System.Console" /> window.
            <code>
            // Subscribe to the event that gives us prim and foliage information
            Client.Objects.ObjectUpdate += Objects_ObjectUpdate;
            private void Objects_ObjectUpdate(object sender, PrimEventArgs e)
            {
            Console.WriteLine("Primitive {0} {1} in {2} is an attachment {3}", e.Prim.ID, e.Prim.LocalID, e.Simulator.Name, e.IsAttachment);
            }
            </code></example>
            <seealso cref="E:OpenMetaverse.ObjectManager.ObjectUpdate" />
            <seealso cref="E:OpenMetaverse.ObjectManager.AvatarUpdate" />
            <seealso cref="T:OpenMetaverse.AvatarUpdateEventArgs" />
        </member>
        <member name="M:OpenMetaverse.PrimEventArgs.#ctor(OpenMetaverse.Simulator,OpenMetaverse.Primitive,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Construct a new instance of the PrimEventArgs class
            </summary>
            <param name="simulator">The simulator the object originated from</param>
            <param name="prim">The Primitive</param>
            <param name="timeDilation">The simulator time dilation</param>
            <param name="isNew">The prim was not in the dictionary before this update</param>
            <param name="isAttachment">true if the primitive represents an attachment to an agent</param>
        </member>
        <member name="P:OpenMetaverse.PrimEventArgs.Simulator">
            <summary>Get the simulator the <see cref="T:OpenMetaverse.Primitive" /> originated from</summary>
        </member>
        <member name="P:OpenMetaverse.PrimEventArgs.Prim">
            <summary>Get the <see cref="T:OpenMetaverse.Primitive" /> details</summary>
        </member>
        <member name="P:OpenMetaverse.PrimEventArgs.IsNew">
            <summary>true if the <see cref="T:OpenMetaverse.Primitive" /> did not exist in the dictionary before this update (always true if object tracking has been disabled)</summary>
        </member>
        <member name="P:OpenMetaverse.PrimEventArgs.IsAttachment">
            <summary>true if the <see cref="T:OpenMetaverse.Primitive" /> is attached to an <see cref="T:OpenMetaverse.Avatar" /></summary>
        </member>
        <member name="P:OpenMetaverse.PrimEventArgs.TimeDilation">
            <summary>Get the simulator Time Dilation</summary>
        </member>
        <member name="T:OpenMetaverse.AvatarUpdateEventArgs">
            <summary>Provides data for the <see cref="E:OpenMetaverse.ObjectManager.AvatarUpdate" /> event</summary>
            <remarks>
                <para>The <see cref="E:OpenMetaverse.ObjectManager.AvatarUpdate" /> event occurs when the simulator sends
            an <see cref="T:OpenMetaverse.Packets.ObjectUpdatePacket" /> containing Avatar data</para>
                <para>Note 1: The <see cref="E:OpenMetaverse.ObjectManager.AvatarUpdate" /> event will not be raised when the object is an Avatar</para>
                <para>Note 2: It is possible for the <see cref="E:OpenMetaverse.ObjectManager.AvatarUpdate" /> to be
            raised twice for the same avatar if for example the avatar moved to a new simulator, then returned to the current simulator</para>
            </remarks>
            <example>
            The following code example uses the <see cref="P:OpenMetaverse.AvatarUpdateEventArgs.Avatar" /> property to make a request for the top picks
            using the <see cref="M:OpenMetaverse.AvatarManager.RequestAvatarPicks(OpenMetaverse.UUID)" /> method in the <see cref="T:OpenMetaverse.AvatarManager" /> class to display the names
            of our own agents picks listings on the <see cref="T:System.Console" /> window.
            <code>
            // subscribe to the AvatarUpdate event to get our information
            Client.Objects.AvatarUpdate += Objects_AvatarUpdate;
            Client.Avatars.AvatarPicksReply += Avatars_AvatarPicksReply;
            private void Objects_AvatarUpdate(object sender, AvatarUpdateEventArgs e)
            {
            // we only want our own data
            if (e.Avatar.LocalID == Client.Self.LocalID)
            {
            // Unsubscribe from the avatar update event to prevent a loop
            // where we continually request the picks every time we get an update for ourselves
            Client.Objects.AvatarUpdate -= Objects_AvatarUpdate;
            // make the top picks request through AvatarManager
            Client.Avatars.RequestAvatarPicks(e.Avatar.ID);
            }
            }
            private void Avatars_AvatarPicksReply(object sender, AvatarPicksReplyEventArgs e)
            {
            // we'll unsubscribe from the AvatarPicksReply event since we now have the data
            // we were looking for
            Client.Avatars.AvatarPicksReply -= Avatars_AvatarPicksReply;
            // loop through the dictionary and extract the names of the top picks from our profile
            foreach (var pickName in e.Picks.Values)
            {
            Console.WriteLine(pickName);
            }
            }
            </code></example>
            <seealso cref="E:OpenMetaverse.ObjectManager.ObjectUpdate" />
            <seealso cref="T:OpenMetaverse.PrimEventArgs" />
        </member>
        <member name="M:OpenMetaverse.AvatarUpdateEventArgs.#ctor(OpenMetaverse.Simulator,OpenMetaverse.Avatar,System.UInt16,System.Boolean)">
            <summary>
            Construct a new instance of the AvatarUpdateEventArgs class
            </summary>
            <param name="simulator">The simulator the packet originated from</param>
            <param name="avatar">The <see cref="T:OpenMetaverse.Avatar" /> data</param>
            <param name="timeDilation">The simulator time dilation</param>
            <param name="isNew">The avatar was not in the dictionary before this update</param>
        </member>
        <member name="P:OpenMetaverse.AvatarUpdateEventArgs.Simulator">
            <summary>Get the simulator the object originated from</summary>
        </member>
        <member name="P:OpenMetaverse.AvatarUpdateEventArgs.Avatar">
            <summary>Get the <see cref="T:OpenMetaverse.Avatar" /> data</summary>
        </member>
        <member name="P:OpenMetaverse.AvatarUpdateEventArgs.TimeDilation">
            <summary>Get the simulator time dilation</summary>
        </member>
        <member name="P:OpenMetaverse.AvatarUpdateEventArgs.IsNew">
            <summary>true if the <see cref="T:OpenMetaverse.Avatar" /> did not exist in the dictionary before this update (always true if avatar tracking has been disabled)</summary>
        </member>
        <member name="T:OpenMetaverse.ObjectPropertiesEventArgs">
            <summary>Provides additional primitive data for the <see cref="E:OpenMetaverse.ObjectManager.ObjectProperties" /> event</summary>
            <remarks>
                <para>The <see cref="E:OpenMetaverse.ObjectManager.ObjectProperties" /> event occurs when the simulator sends
            an <see cref="T:OpenMetaverse.Packets.ObjectPropertiesPacket" /> containing additional details for a Primitive, Foliage data or Attachment data</para>
                <para>The <see cref="E:OpenMetaverse.ObjectManager.ObjectProperties" /> event is also raised when a <see cref="M:OpenMetaverse.ObjectManager.SelectObject(OpenMetaverse.Simulator,System.UInt32,System.Boolean)" /> request is
            made.</para>
            </remarks>
            <example>
            The following code example uses the <see cref="P:OpenMetaverse.PrimEventArgs.Prim" />, <see cref="P:OpenMetaverse.PrimEventArgs.Simulator" /> and
            <see cref="P:OpenMetaverse.ObjectPropertiesEventArgs.Properties" />
            properties to display new attachments and send a request for additional properties containing the name of the
            attachment then display it on the <see cref="T:System.Console" /> window.
            <code>
            // Subscribe to the event that provides additional primitive details
            Client.Objects.ObjectProperties += Objects_ObjectProperties;
            // handle the properties data that arrives
            private void Objects_ObjectProperties(object sender, ObjectPropertiesEventArgs e)
            {
            Console.WriteLine("Primitive Properties: {0} Name is {1}", e.Properties.ObjectID, e.Properties.Name);
            }
            </code></example>
        </member>
        <member name="M:OpenMetaverse.ObjectPropertiesEventArgs.#ctor(OpenMetaverse.Simulator,OpenMetaverse.Primitive.ObjectProperties)">
            <summary>
            Construct a new instance of the ObjectPropertiesEventArgs class
            </summary>
            <param name="simulator">The simulator the object is located</param>
            <param name="props">The primitive Properties</param>
        </member>
        <member name="P:OpenMetaverse.ObjectPropertiesEventArgs.Simulator">
            <summary>Get the simulator the object is located</summary>
        </member>
        <member name="P:OpenMetaverse.ObjectPropertiesEventArgs.Properties">
            <summary>Get the primitive properties</summary>
        </member>
        <member name="T:OpenMetaverse.ObjectPropertiesUpdatedEventArgs">
            <summary>Provides additional primitive data for the <see cref="E:OpenMetaverse.ObjectManager.ObjectPropertiesUpdated" /> event</summary>
            <remarks>
                <para>The <see cref="E:OpenMetaverse.ObjectManager.ObjectPropertiesUpdated" /> event occurs when the simulator sends
            an <see cref="T:OpenMetaverse.Packets.ObjectPropertiesPacket" /> containing additional details for a Primitive or Foliage data that is currently
            being tracked in the <see cref="F:OpenMetaverse.Simulator.ObjectsPrimitives" /> dictionary</para>
                <para>The <see cref="E:OpenMetaverse.ObjectManager.ObjectPropertiesUpdated" /> event is also raised when a <see cref="M:OpenMetaverse.ObjectManager.SelectObject(OpenMetaverse.Simulator,System.UInt32,System.Boolean)" /> request is
            made and <see cref="F:OpenMetaverse.Settings.OBJECT_TRACKING" /> is enabled</para>
            </remarks>
        </member>
        <member name="M:OpenMetaverse.ObjectPropertiesUpdatedEventArgs.#ctor(OpenMetaverse.Simulator,OpenMetaverse.Primitive,OpenMetaverse.Primitive.ObjectProperties)">
            <summary>
            Construct a new instance of the ObjectPropertiesUpdatedEvenrArgs class
            </summary>
            <param name="simulator">The simulator the object is located</param>
            <param name="prim">The Primitive</param>
            <param name="props">The primitive Properties</param>
        </member>
        <member name="P:OpenMetaverse.ObjectPropertiesUpdatedEventArgs.Simulator">
            <summary>Get the simulator the object is located</summary>
        </member>
        <member name="P:OpenMetaverse.ObjectPropertiesUpdatedEventArgs.Prim">
            <summary>Get the primitive details</summary>
        </member>
        <member name="P:OpenMetaverse.ObjectPropertiesUpdatedEventArgs.Properties">
            <summary>Get the primitive properties</summary>
        </member>
        <member name="T:OpenMetaverse.ObjectPropertiesFamilyEventArgs">
            <summary>Provides additional primitive data, permissions and sale info for the <see cref="E:OpenMetaverse.ObjectManager.ObjectPropertiesFamily" /> event</summary>
            <remarks>
                <para>The <see cref="E:OpenMetaverse.ObjectManager.ObjectPropertiesFamily" /> event occurs when the simulator sends
            an <see cref="T:OpenMetaverse.Packets.ObjectPropertiesPacket" /> containing additional details for a Primitive, Foliage data or Attachment. This includes
            Permissions, Sale info, and other basic details on an object</para>
                <para>The <see cref="E:OpenMetaverse.ObjectManager.ObjectProperties" /> event is also raised when a <see cref="M:OpenMetaverse.ObjectManager.RequestObjectPropertiesFamily(OpenMetaverse.Simulator,OpenMetaverse.UUID,System.Boolean)" /> request is
            made, the viewer equivalent is hovering the mouse cursor over an object</para>
            </remarks>
        </member>
        <member name="P:OpenMetaverse.ObjectPropertiesFamilyEventArgs.Simulator">
            <summary>Get the simulator the object is located</summary>
        </member>
        <member name="P:OpenMetaverse.ObjectPropertiesFamilyEventArgs.Properties">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.ObjectPropertiesFamilyEventArgs.Type">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.TerseObjectUpdateEventArgs">
            <summary>Provides primitive data containing updated location, velocity, rotation, textures for the <see cref="E:OpenMetaverse.ObjectManager.TerseObjectUpdate" /> event</summary>
            <remarks>
                <para>The <see cref="E:OpenMetaverse.ObjectManager.TerseObjectUpdate" /> event occurs when the simulator sends updated location, velocity, rotation, etc</para>
            </remarks>
        </member>
        <member name="P:OpenMetaverse.TerseObjectUpdateEventArgs.Simulator">
            <summary>Get the simulator the object is located</summary>
        </member>
        <member name="P:OpenMetaverse.TerseObjectUpdateEventArgs.Prim">
            <summary>Get the primitive details</summary>
        </member>
        <member name="P:OpenMetaverse.TerseObjectUpdateEventArgs.Update">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.TerseObjectUpdateEventArgs.TimeDilation">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.ObjectDataBlockUpdateEventArgs">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.ObjectDataBlockUpdateEventArgs.Simulator">
            <summary>Get the simulator the object is located</summary>
        </member>
        <member name="P:OpenMetaverse.ObjectDataBlockUpdateEventArgs.Prim">
            <summary>Get the primitive details</summary>
        </member>
        <member name="P:OpenMetaverse.ObjectDataBlockUpdateEventArgs.ConstructionData">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.ObjectDataBlockUpdateEventArgs.Block">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.ObjectDataBlockUpdateEventArgs.Update">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.ObjectDataBlockUpdateEventArgs.NameValues">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.KillObjectEventArgs">
            <summary>Provides notification when an Avatar, Object or Attachment is DeRezzed or moves out of the avatars view for the
            <see cref="E:OpenMetaverse.ObjectManager.KillObject" /> event</summary>
        </member>
        <member name="P:OpenMetaverse.KillObjectEventArgs.Simulator">
            <summary>Get the simulator the object is located</summary>
        </member>
        <member name="P:OpenMetaverse.KillObjectEventArgs.ObjectLocalID">
            <summary>The LocalID of the object</summary>
        </member>
        <member name="T:OpenMetaverse.AvatarSitChangedEventArgs">
            <summary>
            Provides updates sit position data
            </summary>
        </member>
        <member name="P:OpenMetaverse.AvatarSitChangedEventArgs.Simulator">
            <summary>Get the simulator the object is located</summary>
        </member>
        <member name="P:OpenMetaverse.AvatarSitChangedEventArgs.Avatar">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.AvatarSitChangedEventArgs.SittingOn">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.AvatarSitChangedEventArgs.OldSeat">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.PayPriceReplyEventArgs">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.PayPriceReplyEventArgs.Simulator">
            <summary>Get the simulator the object is located</summary>
        </member>
        <member name="P:OpenMetaverse.PayPriceReplyEventArgs.ObjectID">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.PayPriceReplyEventArgs.DefaultPrice">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.PayPriceReplyEventArgs.ButtonPrices">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.ObjectMediaEventArgs.Success">
            <summary>
            Indicates if the operation was successful
            </summary>
        </member>
        <member name="P:OpenMetaverse.ObjectMediaEventArgs.Version">
            <summary>
            Media version string
            </summary>
        </member>
        <member name="P:OpenMetaverse.ObjectMediaEventArgs.FaceMedia">
            <summary>
            Array of media entries indexed by face number
            </summary>
        </member>
        <member name="M:OpenMetaverse.UDPPacketBuffer.#ctor">
            <summary>
            Create an allocated UDP packet buffer for receiving a packet
            </summary>
        </member>
        <member name="M:OpenMetaverse.UDPPacketBuffer.#ctor(System.Net.IPEndPoint)">
            <summary>
            Create an allocated UDP packet buffer for sending a packet
            </summary>
            <param name="endPoint">EndPoint of the remote host</param>
        </member>
        <member name="M:OpenMetaverse.UDPPacketBuffer.#ctor(System.Net.IPEndPoint,System.Int32)">
            <summary>
            Create an allocated UDP packet buffer for sending a packet
            </summary>
            <param name="endPoint">EndPoint of the remote host</param>
            <param name="bufferSize">Size of the buffer to allocate for packet data</param>
        </member>
        <member name="F:OpenMetaverse.UDPPacketBuffer.BUFFER_SIZE">
            <summary>Size of the byte array used to store raw packet data</summary>
        </member>
        <member name="F:OpenMetaverse.UDPPacketBuffer.Data">
            <summary>Raw packet data buffer</summary>
        </member>
        <member name="F:OpenMetaverse.UDPPacketBuffer.DataLength">
            <summary>Length of the data to transmit</summary>
        </member>
        <member name="F:OpenMetaverse.UDPPacketBuffer.RemoteEndPoint">
            <summary>EndPoint of the remote host</summary>
        </member>
        <member name="T:OpenMetaverse.PacketBufferPool">
            <summary>
            Object pool for packet buffers. This is used to allocate memory for all
            incoming and outgoing packets, and zerocoding buffers for those packets
            </summary>
        </member>
        <member name="M:OpenMetaverse.PacketBufferPool.#ctor(System.Net.IPEndPoint,System.Int32,System.Int32)">
            <summary>
            Initialize the object pool in client mode
            </summary>
            <param name="endPoint">Server to connect to</param>
            <param name="itemsPerSegment">
            </param>
            <param name="minSegments">
            </param>
        </member>
        <member name="M:OpenMetaverse.PacketBufferPool.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize the object pool in server mode
            </summary>
            <param name="itemsPerSegment">
            </param>
            <param name="minSegments">
            </param>
        </member>
        <member name="M:OpenMetaverse.PacketBufferPool.GetObjectInstance">
            <summary>
            Returns a packet buffer with EndPoint set if the buffer is in
            client mode, or with EndPoint set to null in server mode
            </summary>
            <returns>Initialized UDPPacketBuffer object</returns>
        </member>
        <member name="M:OpenMetaverse.Pool.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenMetaverse.Pool.CheckOut">
            <summary>
            Check a packet buffer out of the pool
            </summary>
            <returns>A packet buffer object</returns>
        </member>
        <member name="P:OpenMetaverse.WrappedObject`1.Instance">
            <summary>
            Returns an instance of the class that has been checked out of the Object Pool.
            </summary>
        </member>
        <member name="M:OpenMetaverse.WrappedObject`1.Dispose">
            <summary>
            Checks the instance back into the object pool
            </summary>
        </member>
        <member name="M:OpenMetaverse.ObjectPoolBase`1.#ctor">
            <summary>
            Creates a new instance of the ObjectPoolBase class. Initialize MUST be called
            after using this constructor.
            </summary>
        </member>
        <member name="M:OpenMetaverse.ObjectPoolBase`1.#ctor(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Creates a new instance of the ObjectPool Base class.
            </summary>
            <param name="itemsPerSegment">The object pool is composed of segments, which
            are allocated whenever the size of the pool is exceeded. The number of items
            in a segment should be large enough that allocating a new segmeng is a rare
            thing. For example, on a server that will have 10k people logged in at once,
            the receive buffer object pool should have segment sizes of at least 1000
            byte arrays per segment.
            </param>
            <param name="minimumSegmentCount">The minimun number of segments that may exist.</param>
            <param name="gcOnPoolGrowth">Perform a full GC.Collect whenever a segment is allocated, and then again after allocation to compact the heap.</param>
            <param name="cleanupFrequenceMS">The frequency which segments are checked to see if they're eligible for cleanup.</param>
        </member>
        <member name="P:OpenMetaverse.ObjectPoolBase`1.TotalSegments">
            <summary>
            The total number of segments created. Intended to be used by the Unit Tests.
            </summary>
        </member>
        <member name="P:OpenMetaverse.ObjectPoolBase`1.ItemsPerSegment">
            <summary>
            The number of items that are in a segment. Items in a segment
            are all allocated at the same time, and are hopefully close to
            each other in the managed heap.
            </summary>
        </member>
        <member name="P:OpenMetaverse.ObjectPoolBase`1.MinimumSegmentCount">
            <summary>
            The minimum number of segments. When segments are reclaimed,
            this number of segments will always be left alone. These
            segments are allocated at startup.
            </summary>
        </member>
        <member name="P:OpenMetaverse.ObjectPoolBase`1.MinimumSegmentAgePriorToCleanup">
            <summary>
            The age a segment must be before it's eligible for cleanup.
            This  is used to prevent thrash, and typical values are in
            the 5 minute range.
            </summary>
        </member>
        <member name="P:OpenMetaverse.ObjectPoolBase`1.CleanupFrequencyMilliseconds">
            <summary>
            The frequence which the cleanup thread runs. This is typically
            expected to be in the 5 minute range.
            </summary>
        </member>
        <member name="M:OpenMetaverse.ObjectPoolBase`1.ForceCleanup">
            <summary>
            Forces the segment cleanup algorithm to be run. This method is intended
            primarly for use from the Unit Test libraries.
            </summary>
        </member>
        <member name="M:OpenMetaverse.ObjectPoolBase`1.GetObjectInstance">
            <summary>
            Responsible for allocate 1 instance of an object that will be stored in a segment.
            </summary>
            <returns>An instance of whatever objec the pool is pooling.</returns>
        </member>
        <member name="M:OpenMetaverse.ObjectPoolBase`1.CheckIn(OpenMetaverse.ObjectPoolSegment{`0},`0)">
            <summary>
            Checks in an instance of T owned by the object pool. This method is only intended to be called
            by the <c>WrappedObject</c> class.
            </summary>
            <param name="owningSegment">The segment from which the instance is checked out.</param>
            <param name="instance">The instance of <c>T</c> to check back into the segment.</param>
        </member>
        <member name="M:OpenMetaverse.ObjectPoolBase`1.CheckOut">
            <summary>
            Checks an instance of <c>T</c> from the pool. If the pool is not sufficient to
            allow the checkout, a new segment is created.
            </summary>
            <returns>A <c>WrappedObject</c> around the instance of <c>T</c>. To check
            the instance back into the segment, be sureto dispose the WrappedObject
            when finished. </returns>
        </member>
        <member name="T:OpenMetaverse.DictionaryEventAction">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DictionaryEventAction.Add">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DictionaryEventAction.Remove">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.DictionaryEventAction.Change">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.ObservableDictionary`2">
            <summary>
            The ObservableDictionary class is used for storing key/value pairs. It has methods for firing
            events to subscribers when items are added, removed, or changed.
            </summary>
            <typeparam name="TKey">Key <see langword="Tkey" /></typeparam>
            <typeparam name="TValue">Value <see langword="TValue" /></typeparam>
        </member>
        <member name="M:OpenMetaverse.ObservableDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <seealso cref="T:ObservableDictionary" /> Class
            with the specified key/value, has the default initial capacity.
            </summary>
            <example>
                <code>
            // initialize a new ObservableDictionary named testDict with a string as the key and an int as the value.
            public ObservableDictionary&lt;string, int&gt; testDict = new ObservableDictionary&lt;string, int&gt;();
            </code>
            </example>
        </member>
        <member name="M:OpenMetaverse.ObservableDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <seealso cref="T:OpenMetaverse.ObservableDictionary" /> Class
            with the specified key/value, With its initial capacity specified.
            </summary>
            <param name="capacity">Initial size of dictionary</param>
            <example>
                <code>
            // initialize a new ObservableDictionary named testDict with a string as the key and an int as the value,
            // initially allocated room for 10 entries.
            public ObservableDictionary&lt;string, int&gt; testDict = new ObservableDictionary&lt;string, int&gt;(10);
            </code>
            </example>
        </member>
        <member name="F:OpenMetaverse.ObservableDictionary`2.Delegates">
            <summary>
            A dictionary of callbacks to fire when specified action occurs
            </summary>
        </member>
        <member name="F:OpenMetaverse.ObservableDictionary`2.Dictionary">
            <summary>Internal dictionary that this class wraps around. Do not
            modify or enumerate the contents of this dictionary without locking</summary>
        </member>
        <member name="P:OpenMetaverse.ObservableDictionary`2.Item(`0)">
            <summary>
            Indexer for the dictionary
            </summary>
            <param name="key">The key</param>
            <returns>The value</returns>
        </member>
        <member name="P:OpenMetaverse.ObservableDictionary`2.Count">
            <summary>
            Gets the number of Key/Value pairs contained in the <seealso cref="T:ObservableDictionary" /></summary>
        </member>
        <member name="M:OpenMetaverse.ObservableDictionary`2.AddDelegate(OpenMetaverse.DictionaryEventAction,OpenMetaverse.DictionaryChangeCallback)">
            <summary>
            Register a callback to be fired when an action occurs
            </summary>
            <param name="action">The action</param>
            <param name="callback">The callback to fire</param>
        </member>
        <member name="M:OpenMetaverse.ObservableDictionary`2.RemoveDelegate(OpenMetaverse.DictionaryEventAction,OpenMetaverse.DictionaryChangeCallback)">
            <summary>
            Unregister a callback
            </summary>
            <param name="action">The action</param>
            <param name="callback">The callback to fire</param>
        </member>
        <member name="M:OpenMetaverse.ObservableDictionary`2.FireChangeEvent(OpenMetaverse.DictionaryEventAction,System.Collections.DictionaryEntry)">
            <summary>
            </summary>
            <param name="action">
            </param>
            <param name="entry">
            </param>
        </member>
        <member name="M:OpenMetaverse.ObservableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Try to get entry from the <seealso cref="!:ObservableDictionary" /> with specified key
            </summary>
            <param name="key">Key to use for lookup</param>
            <param name="value">Value returned</param>
            <returns>
                <see langword="true" /> if specified key exists,  <see langword="false" /> if not found</returns>
            <example>
                <code>
            // find your avatar using the Simulator.ObjectsAvatars ObservableDictionary:
            Avatar av;
            if (Client.Network.CurrentSim.ObjectsAvatars.TryGetValue(Client.Self.AgentID, out av))
            Console.WriteLine("Found Avatar {0}", av.Name);
            </code>
                <seealso cref="F:OpenMetaverse.Simulator.ObjectsAvatars" />
            </example>
        </member>
        <member name="M:OpenMetaverse.ObservableDictionary`2.Find(System.Predicate{`1})">
            <summary>
            Finds the specified match.
            </summary>
            <param name="match">The match.</param>
            <returns>Matched value</returns>
            <example>
                <code>
            // use a delegate to find a prim in the ObjectsPrimitives ObservableDictionary
            // with the ID 95683496
            uint findID = 95683496;
            Primitive findPrim = sim.ObjectsPrimitives.Find(
            delegate(Primitive prim) { return prim.ID == findID; });
            </code>
            </example>
        </member>
        <member name="M:OpenMetaverse.ObservableDictionary`2.FindAll(System.Predicate{`1})">
            <summary>Find All items in an <seealso cref="T:ObservableDictionary" /></summary>
            <param name="match">return matching items.</param>
            <returns>a <seealso cref="T:System.Collections.Generic.List" /> containing found items.</returns>
            <example>
            Find All prims within 20 meters and store them in a List
            <code>
            int radius = 20;
            List&lt;Primitive&gt; prims = Client.Network.CurrentSim.ObjectsPrimitives.FindAll(
            delegate(Primitive prim) {
            Vector3 pos = prim.Position;
            return ((prim.ParentID == 0) &amp;&amp; (pos != Vector3.Zero) &amp;&amp; (Vector3.Distance(pos, location) &lt; radius));
            }
            );
            </code></example>
        </member>
        <member name="M:OpenMetaverse.ObservableDictionary`2.FindAll(System.Predicate{`0})">
            <summary>Find All items in an <seealso cref="T:ObservableDictionary" /></summary>
            <param name="match">return matching keys.</param>
            <returns>a <seealso cref="T:System.Collections.Generic.List" /> containing found keys.</returns>
            <example>
            Find All keys which also exist in another dictionary
            <code>
            List&lt;UUID&gt; matches = myDict.FindAll(
            delegate(UUID id) {
            return myOtherDict.ContainsKey(id);
            }
            );
            </code></example>
        </member>
        <member name="M:OpenMetaverse.ObservableDictionary`2.ContainsKey(`0)">
            <summary>Check if Key exists in Dictionary</summary>
            <param name="key">Key to check for</param>
            <returns>
                <see langword="true" /> if found, <see langword="false" /> otherwise</returns>
        </member>
        <member name="M:OpenMetaverse.ObservableDictionary`2.ContainsValue(`1)">
            <summary>Check if Value exists in Dictionary</summary>
            <param name="value">Value to check for</param>
            <returns>
                <see langword="true" /> if found, <see langword="false" /> otherwise</returns>
        </member>
        <member name="M:OpenMetaverse.ObservableDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key to the dictionary, dictionary locking is not performed,
            <see cref="!:SafeAdd" /></summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
        </member>
        <member name="M:OpenMetaverse.ObservableDictionary`2.Remove(`0)">
            <summary>
            Removes the specified key, dictionary locking is not performed
            </summary>
            <param name="key">The key.</param>
            <returns>
                <see langword="true" /> if successful, <see langword="false" /> otherwise</returns>
        </member>
        <member name="M:OpenMetaverse.ObservableDictionary`2.Clear">
            <summary>
            Clear the contents of the dictionary
            </summary>
        </member>
        <member name="M:OpenMetaverse.ObservableDictionary`2.GetEnumerator">
            <summary>
            Enumerator for iterating dictionary entries
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:OpenMetaverse.Packets.PacketDecoder.CustomPacketDecoder">
            <summary>
            A custom decoder callback
            </summary>
            <param name="fieldName">The key of the object</param>
            <param name="fieldData">the data to decode</param>
            <returns>A string represending the fieldData</returns>
        </member>
        <member name="M:OpenMetaverse.Packets.PacketDecoder.AddCallback(System.String,OpenMetaverse.Packets.PacketDecoder.CustomPacketDecoder)">
            <summary>
            Add a custom decoder callback
            </summary>
            <param name="key">The key of the field to decode</param>
            <param name="customPacketHandler">The custom decode handler</param>
        </member>
        <member name="M:OpenMetaverse.Packets.PacketDecoder.RemoveCustomHandler(System.String,OpenMetaverse.Packets.PacketDecoder.CustomPacketDecoder)">
            <summary>
            Remove a custom decoder callback
            </summary>
            <param name="key">The key of the field to decode</param>
            <param name="customPacketHandler">The custom decode handler</param>
        </member>
        <member name="M:OpenMetaverse.Packets.PacketDecoder.PacketToString(OpenMetaverse.Packets.Packet)">
            <summary>
            Creates a formatted string containing the values of a Packet
            </summary>
            <param name="packet">The Packet</param>
            <returns>A formatted string of values of the nested items in the Packet object</returns>
        </member>
        <member name="M:OpenMetaverse.Packets.PacketDecoder.MessageToString(System.Object,System.Int32)">
            <summary>
            Decode an IMessage object into a beautifully formatted string
            </summary>
            <param name="message">The IMessage object</param>
            <param name="recurseLevel">Recursion level (used for indenting)</param>
            <returns>A formatted string containing the names and values of the source object</returns>
        </member>
        <member name="T:OpenMetaverse.ObjectReturnType">
            <summary>
            Type of return to use when returning objects from a parcel
            </summary>
        </member>
        <member name="F:OpenMetaverse.ObjectReturnType.None">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ObjectReturnType.Owner">
            <summary>Return objects owned by parcel owner</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectReturnType.Group">
            <summary>Return objects set to group</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectReturnType.Other">
            <summary>Return objects not owned by parcel owner or set to group</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectReturnType.List">
            <summary>Return a specific list of objects on parcel</summary>
        </member>
        <member name="F:OpenMetaverse.ObjectReturnType.Sell">
            <summary>Return objects that are marked for-sale</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelAccessFlags">
            <summary>
            Blacklist/Whitelist flags used in parcels Access List
            </summary>
        </member>
        <member name="F:OpenMetaverse.ParcelAccessFlags.NoAccess">
            <summary>Agent is denied access</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelAccessFlags.Access">
            <summary>Agent is granted access</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelResult">
            <summary>
            The result of a request for parcel properties
            </summary>
        </member>
        <member name="F:OpenMetaverse.ParcelResult.NoData">
            <summary>No matches were found for the request</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelResult.Single">
            <summary>Request matched a single parcel</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelResult.Multiple">
            <summary>Request matched multiple parcels</summary>
        </member>
        <member name="T:OpenMetaverse.AccessList">
            <summary>
            Flags used in the ParcelAccessListRequest packet to specify whether
            we want the access list (whitelist), ban list (blacklist), or both
            </summary>
        </member>
        <member name="F:OpenMetaverse.AccessList.Access">
            <summary>Request the access list</summary>
        </member>
        <member name="F:OpenMetaverse.AccessList.Ban">
            <summary>Request the ban list</summary>
        </member>
        <member name="F:OpenMetaverse.AccessList.Both">
            <summary>Request both White and Black lists</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelPropertiesStatus">
            <summary>
            Sequence ID in ParcelPropertiesReply packets (sent when avatar
            tries to cross a parcel border)
            </summary>
        </member>
        <member name="F:OpenMetaverse.ParcelPropertiesStatus.ParcelSelected">
            <summary>Parcel is currently selected</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelPropertiesStatus.CollisionNotInGroup">
            <summary>Parcel restricted to a group the avatar is not a
            member of</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelPropertiesStatus.CollisionBanned">
            <summary>Avatar is banned from the parcel</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelPropertiesStatus.CollisionNotOnAccessList">
            <summary>Parcel is restricted to an access list that the
            avatar is not on</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelPropertiesStatus.HoveredOverParcel">
            <summary>Response to hovering over a parcel</summary>
        </member>
        <member name="T:OpenMetaverse.TerraformAction">
            <summary>
            The tool to use when modifying terrain levels
            </summary>
        </member>
        <member name="F:OpenMetaverse.TerraformAction.Level">
            <summary>Level the terrain</summary>
        </member>
        <member name="F:OpenMetaverse.TerraformAction.Raise">
            <summary>Raise the terrain</summary>
        </member>
        <member name="F:OpenMetaverse.TerraformAction.Lower">
            <summary>Lower the terrain</summary>
        </member>
        <member name="F:OpenMetaverse.TerraformAction.Smooth">
            <summary>Smooth the terrain</summary>
        </member>
        <member name="F:OpenMetaverse.TerraformAction.Noise">
            <summary>Add random noise to the terrain</summary>
        </member>
        <member name="F:OpenMetaverse.TerraformAction.Revert">
            <summary>Revert terrain to simulator default</summary>
        </member>
        <member name="T:OpenMetaverse.TerraformBrushSize">
            <summary>
            The tool size to use when changing terrain levels
            </summary>
        </member>
        <member name="F:OpenMetaverse.TerraformBrushSize.Small">
            <summary>Small</summary>
        </member>
        <member name="F:OpenMetaverse.TerraformBrushSize.Medium">
            <summary>Medium</summary>
        </member>
        <member name="F:OpenMetaverse.TerraformBrushSize.Large">
            <summary>Large</summary>
        </member>
        <member name="T:OpenMetaverse.AccessDeniedReason">
            <summary>
            Reasons agent is denied access to a parcel on the simulator
            </summary>
        </member>
        <member name="F:OpenMetaverse.AccessDeniedReason.NotDenied">
            <summary>Agent is not denied, access is granted</summary>
        </member>
        <member name="F:OpenMetaverse.AccessDeniedReason.NotInGroup">
            <summary>Agent is not a member of the group set for the parcel, or which owns the parcel</summary>
        </member>
        <member name="F:OpenMetaverse.AccessDeniedReason.NotOnAllowList">
            <summary>Agent is not on the parcels specific allow list</summary>
        </member>
        <member name="F:OpenMetaverse.AccessDeniedReason.BannedFromParcel">
            <summary>Agent is on the parcels ban list</summary>
        </member>
        <member name="F:OpenMetaverse.AccessDeniedReason.NoAccess">
            <summary>Unknown</summary>
        </member>
        <member name="F:OpenMetaverse.AccessDeniedReason.NotAgeVerified">
            <summary>Agent is not age verified and parcel settings deny access to non age verified avatars</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelOverlayType">
            <summary>
            Parcel overlay type. This is used primarily for highlighting and
            coloring which is why it is a single integer instead of a set of
            flags
            </summary>
            <remarks>These values seem to be poorly thought out. The first three
            bits represent a single value, not flags. For example Auction (0x05) is
            not a combination of OwnedByOther (0x01) and ForSale(0x04). However,
            the BorderWest and BorderSouth values are bit flags that get attached
            to the value stored in the first three bits. Bits four, five, and six
            are unused</remarks>
        </member>
        <member name="F:OpenMetaverse.ParcelOverlayType.Public">
            <summary>Public land</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelOverlayType.OwnedByOther">
            <summary>Land is owned by another avatar</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelOverlayType.OwnedByGroup">
            <summary>Land is owned by a group</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelOverlayType.OwnedBySelf">
            <summary>Land is owned by the current avatar</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelOverlayType.ForSale">
            <summary>Land is for sale</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelOverlayType.Auction">
            <summary>Land is being auctioned</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelOverlayType.BorderWest">
            <summary>To the west of this area is a parcel border</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelOverlayType.BorderSouth">
            <summary>To the south of this area is a parcel border</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelFlags">
            <summary>
            Various parcel properties
            </summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.None">
            <summary>No flags set</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.AllowFly">
            <summary>Allow avatars to fly (a client-side only restriction)</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.AllowOtherScripts">
            <summary>Allow foreign scripts to run</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.ForSale">
            <summary>This parcel is for sale</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.AllowLandmark">
            <summary>Allow avatars to create a landmark on this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.AllowTerraform">
            <summary>Allows all avatars to edit the terrain on this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.AllowDamage">
            <summary>Avatars have health and can take damage on this parcel.
            If set, avatars can be killed and sent home here</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.CreateObjects">
            <summary>Foreign avatars can create objects here</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.ForSaleObjects">
            <summary>All objects on this parcel can be purchased</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.UseAccessGroup">
            <summary>Access is restricted to a group</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.UseAccessList">
            <summary>Access is restricted to a whitelist</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.UseBanList">
            <summary>Ban blacklist is enabled</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.UsePassList">
            <summary>Unknown</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.ShowDirectory">
            <summary>List this parcel in the search directory</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.AllowDeedToGroup">
            <summary>Allow personally owned parcels to be deeded to group</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.ContributeWithDeed">
            <summary>If Deeded, owner contributes required tier to group parcel is deeded to</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.SoundLocal">
            <summary>Restrict sounds originating on this parcel to the
            parcel boundaries</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.SellParcelObjects">
            <summary>Objects on this parcel are sold when the land is
            purchsaed</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.AllowPublish">
            <summary>Allow this parcel to be published on the web</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.MaturePublish">
            <summary>The information for this parcel is mature content</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.UrlWebPage">
            <summary>The media URL is an HTML page</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.UrlRawHtml">
            <summary>The media URL is a raw HTML string</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.RestrictPushObject">
            <summary>Restrict foreign object pushes</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.DenyAnonymous">
            <summary>Ban all non identified/transacted avatars</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.AllowGroupScripts">
            <summary>Allow group-owned scripts to run</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.CreateGroupObjects">
            <summary>Allow object creation by group members or group
            objects</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.AllowAPrimitiveEntry">
            <summary>Allow all objects to enter this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.AllowGroupObjectEntry">
            <summary>Only allow group and owner objects to enter this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.AllowVoiceChat">
            <summary>Voice Enabled on this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.UseEstateVoiceChan">
            <summary>Use Estate Voice channel for Voice on this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelFlags.DenyAgeUnverified">
            <summary>Deny Age Unverified Users</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelStatus">
            <summary>
            Parcel ownership status
            </summary>
        </member>
        <member name="F:OpenMetaverse.ParcelStatus.None">
            <summary>Placeholder</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelStatus.Leased">
            <summary>Parcel is leased (owned) by an avatar or group</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelStatus.LeasePending">
            <summary>Parcel is in process of being leased (purchased) by an avatar or group</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelStatus.Abandoned">
            <summary>Parcel has been abandoned back to Governor Linden</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelCategory">
            <summary>
            Category parcel is listed in under search
            </summary>
        </member>
        <member name="F:OpenMetaverse.ParcelCategory.None">
            <summary>No assigned category</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelCategory.Linden">
            <summary>Linden Infohub or public area</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelCategory.Adult">
            <summary>Adult themed area</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelCategory.Arts">
            <summary>Arts and Culture</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelCategory.Business">
            <summary>Business</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelCategory.Educational">
            <summary>Educational</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelCategory.Gaming">
            <summary>Gaming</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelCategory.Hangout">
            <summary>Hangout or Club</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelCategory.Newcomer">
            <summary>Newcomer friendly</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelCategory.Park">
            <summary>Parks and Nature</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelCategory.Residential">
            <summary>Residential</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelCategory.Shopping">
            <summary>Shopping</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelCategory.Stage">
            <summary>Not Used?</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelCategory.Other">
            <summary>Other</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelCategory.Any">
            <summary>Not an actual category, only used for queries</summary>
        </member>
        <member name="T:OpenMetaverse.LandingType">
            <summary>
            Type of teleport landing for a parcel
            </summary>
        </member>
        <member name="F:OpenMetaverse.LandingType.None">
            <summary>Unset, simulator default</summary>
        </member>
        <member name="F:OpenMetaverse.LandingType.LandingPoint">
            <summary>Specific landing point set for this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.LandingType.Direct">
            <summary>No landing point set, direct teleports enabled for
            this parcel</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelMediaCommand">
            <summary>
            Parcel Media Command used in ParcelMediaCommandMessage
            </summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMediaCommand.Stop">
            <summary>Stop the media stream and go back to the first frame</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMediaCommand.Pause">
            <summary>Pause the media stream (stop playing but stay on current frame)</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMediaCommand.Play">
            <summary>Start the current media stream playing and stop when the end is reached</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMediaCommand.Loop">
            <summary>Start the current media stream playing,
            loop to the beginning when the end is reached and continue to play</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMediaCommand.Texture">
            <summary>Specifies the texture to replace with video</summary>
            <remarks>If passing the key of a texture, it must be explicitly typecast as a key,
            not just passed within double quotes.</remarks>
        </member>
        <member name="F:OpenMetaverse.ParcelMediaCommand.URL">
            <summary>Specifies the movie URL (254 characters max)</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMediaCommand.Time">
            <summary>Specifies the time index at which to begin playing</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMediaCommand.Agent">
            <summary>Specifies a single agent to apply the media command to</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMediaCommand.Unload">
            <summary>Unloads the stream. While the stop command sets the texture to the first frame of the movie,
            unload resets it to the real texture that the movie was replacing.</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMediaCommand.AutoAlign">
            <summary>Turn on/off the auto align feature, similar to the auto align checkbox in the parcel media properties
            (NOT to be confused with the "align" function in the textures view of the editor!) Takes TRUE or FALSE as parameter.</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMediaCommand.Type">
            <summary>Allows a Web page or image to be placed on a prim (1.19.1 RC0 and later only).
            Use "text/html" for HTML.</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMediaCommand.Size">
            <summary>Resizes a Web page to fit on x, y pixels (1.19.1 RC0 and later only).</summary>
            <remarks>This might still not be working</remarks>
        </member>
        <member name="F:OpenMetaverse.ParcelMediaCommand.Desc">
            <summary>Sets a description for the media being displayed (1.19.1 RC0 and later only).</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelInfo">
            <summary>
            Some information about a parcel of land returned from a DirectoryManager search
            </summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.ID">
            <summary>Global Key of record</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.OwnerID">
            <summary>Parcel Owners <seealso cref="T:OpenMetaverse.UUID" /></summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.Name">
            <summary>Name field of parcel, limited to 128 characters</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.Description">
            <summary>Description field of parcel, limited to 256 characters</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.ActualArea">
            <summary>Total Square meters of parcel</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.BillableArea">
            <summary>Total area billable as Tier, for group owned land this will be 10% less than ActualArea</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.Mature">
            <summary>True of parcel is in Mature simulator</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.GlobalX">
            <summary>Grid global X position of parcel</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.GlobalY">
            <summary>Grid global Y position of parcel</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.GlobalZ">
            <summary>Grid global Z position of parcel (not used)</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.SimName">
            <summary>Name of simulator parcel is located in</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.SnapshotID">
            <summary>Texture <seealso cref="T:OpenMetaverse.UUID" /> of parcels display picture</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.Dwell">
            <summary>Float representing calculated traffic based on time spent on parcel by avatars</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.SalePrice">
            <summary>Sale price of parcel (not used)</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelInfo.AuctionID">
            <summary>Auction ID of parcel</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelMedia">
            <summary>
            Parcel Media Information
            </summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMedia.MediaAutoScale">
            <summary>A byte, if 0x1 viewer should auto scale media to fit object</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMedia.MediaLoop">
            <summary>A boolean, if true the viewer should loop the media</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMedia.MediaID">
            <summary>The Asset UUID of the Texture which when applied to a
            primitive will display the media</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMedia.MediaURL">
            <summary>A URL which points to any Quicktime supported media type</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMedia.MediaDesc">
            <summary>A description of the media</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMedia.MediaHeight">
            <summary>An Integer which represents the height of the media</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMedia.MediaWidth">
            <summary>An integer which represents the width of the media</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelMedia.MediaType">
            <summary>A string which contains the mime type of the media</summary>
        </member>
        <member name="T:OpenMetaverse.Parcel">
            <summary>
            Parcel of land, a portion of virtual real estate in a simulator
            </summary>
        </member>
        <member name="M:OpenMetaverse.Parcel.#ctor(System.Int32)">
            <summary>
            Defalt constructor
            </summary>
            <param name="localID">Local ID of this parcel</param>
        </member>
        <member name="F:OpenMetaverse.Parcel.SelfCount">
            <summary>The total number of contiguous 4x4 meter blocks your agent owns within this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.OtherCount">
            <summary>The total number of contiguous 4x4 meter blocks contained in this parcel owned by a group or agent other than your own</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.PublicCount">
            <summary>Deprecated, Value appears to always be 0</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.LocalID">
            <summary>Simulator-local ID of this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.OwnerID">
            <summary>UUID of the owner of this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.IsGroupOwned">
            <summary>Whether the land is deeded to a group or not</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.AuctionID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ClaimDate">
            <summary>Date land was claimed</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ClaimPrice">
            <summary>Appears to always be zero</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.RentPrice">
            <summary>This field is no longer used</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.AABBMin">
            <summary>Minimum corner of the axis-aligned bounding box for this
            parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.AABBMax">
            <summary>Maximum corner of the axis-aligned bounding box for this
            parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.Bitmap">
            <summary>Bitmap describing land layout in 4x4m squares across the
            entire region</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.Area">
            <summary>Total parcel land area</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.Status">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.SimWideMaxPrims">
            <summary>Maximum primitives across the entire simulator owned by the same agent or group that owns this parcel that can be used</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.SimWideTotalPrims">
            <summary>Total primitives across the entire simulator calculated by combining the allowed prim counts for each parcel
            owned by the agent or group that owns this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.MaxPrims">
            <summary>Maximum number of primitives this parcel supports</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.TotalPrims">
            <summary>Total number of primitives on this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.OwnerPrims">
            <summary>For group-owned parcels this indicates the total number of prims deeded to the group,
            for parcels owned by an individual this inicates the number of prims owned by the individual</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.GroupPrims">
            <summary>Total number of primitives owned by the parcel group on
            this parcel, or for parcels owned by an individual with a group set the
            total number of prims set to that group.</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.OtherPrims">
            <summary>Total number of prims owned by other avatars that are not set to group, or not the parcel owner</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ParcelPrimBonus">
            <summary>A bonus multiplier which allows parcel prim counts to go over times this amount, this does not affect
            the max prims per simulator. e.g: 117 prim parcel limit x 1.5 bonus = 175 allowed</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.OtherCleanTime">
            <summary>Autoreturn value in minutes for others' objects</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.Flags">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.SalePrice">
            <summary>Sale price of the parcel, only useful if ForSale is set</summary>
            <remarks>The SalePrice will remain the same after an ownership
            transfer (sale), so it can be used to see the purchase price after
            a sale if the new owner has not changed it</remarks>
        </member>
        <member name="F:OpenMetaverse.Parcel.Name">
            <summary>Parcel Name</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.Desc">
            <summary>Parcel Description</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.MusicURL">
            <summary>URL For Music Stream</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.GroupID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.PassPrice">
            <summary>Price for a temporary pass</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.PassHours">
            <summary>How long is pass valid for</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.Category">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.AuthBuyerID">
            <summary>Key of authorized buyer</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.SnapshotID">
            <summary>Key of parcel snapshot</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.UserLocation">
            <summary>The landing point location</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.UserLookAt">
            <summary>The landing point LookAt</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.Landing">
            <summary>The type of landing enforced from the <see cref="T:OpenMetaverse.LandingType" /> enum</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.Dwell">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.RegionDenyAnonymous">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.RegionPushOverride">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.AccessWhiteList">
            <summary>Access list of who is whitelisted on this
            parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.AccessBlackList">
            <summary>Access list of who is blacklisted on this
            parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.RegionDenyAgeUnverified">
            <summary>TRUE of region denies access to age unverified users</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ObscureMedia">
            <summary>true to obscure (hide) media url</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.ObscureMusic">
            <summary>true to obscure (hide) music url</summary>
        </member>
        <member name="F:OpenMetaverse.Parcel.Media">
            <summary>A struct containing media details</summary>
        </member>
        <member name="M:OpenMetaverse.Parcel.ToString">
            <summary>
            Displays a parcel object in string format
            </summary>
            <returns>string containing key=value pairs of a parcel object</returns>
        </member>
        <member name="M:OpenMetaverse.Parcel.Update(OpenMetaverse.Simulator,System.Boolean)">
            <summary>
            Update the simulator with any local changes to this Parcel object
            </summary>
            <param name="simulator">Simulator to send updates to</param>
            <param name="wantReply">Whether we want the simulator to confirm
            the update with a reply packet or not</param>
        </member>
        <member name="M:OpenMetaverse.Parcel.UpdateOtherCleanTime(OpenMetaverse.Simulator)">
            <summary>
            Set Autoreturn time
            </summary>
            <param name="simulator">Simulator to send the update to</param>
        </member>
        <member name="T:OpenMetaverse.ParcelManager">
            <summary>
            Parcel (subdivided simulator lots) subsystem
            </summary>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Default constructor
            </summary>
            <param name="client">A reference to the GridClient object</param>
        </member>
        <member name="T:OpenMetaverse.ParcelManager.ParcelAccessEntry">
            <summary>
            Parcel Accesslist
            </summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.ParcelAccessEntry.AgentID">
            <summary>Agents <seealso cref="T:OpenMetaverse.UUID" /></summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.ParcelAccessEntry.Time">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.ParcelAccessEntry.Flags">
            <summary>Flags for specific entry in white/black lists</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelManager.ParcelPrimOwners">
            <summary>
            Owners of primitives on parcel
            </summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.ParcelPrimOwners.OwnerID">
            <summary>Prim Owners <seealso cref="T:OpenMetaverse.UUID" /></summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.ParcelPrimOwners.IsGroupOwned">
            <summary>True of owner is group</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.ParcelPrimOwners.Count">
            <summary>Total count of prims owned by OwnerID</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.ParcelPrimOwners.OnlineStatus">
            <summary>true of OwnerID is currently online and is not a group</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.ParcelPrimOwners.NewestPrim">
            <summary>The date of the most recent prim left by OwnerID</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelManager.LandResourcesCallback">
            <summary>
            Called once parcel resource usage information has been collected
            </summary>
            <param name="success">Indicates if operation was successfull</param>
            <param name="info">Parcel resource usage information</param>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.m_DwellReply">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.m_DwellReplyLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.m_ParcelInfo">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.m_ParcelInfoLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.m_ParcelProperties">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.m_ParcelPropertiesLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.m_ParcelACL">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.m_ParcelACLLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.m_ParcelObjectOwnersReply">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.m_ParcelObjectOwnersLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.m_SimParcelsDownloaded">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.m_SimParcelsDownloadedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.m_ForceSelectObjects">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.m_ForceSelectObjectsLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.m_ParcelMediaUpdateReply">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.m_ParcelMediaUpdateReplyLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.m_ParcelMediaCommand">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.ParcelManager.m_ParcelMediaCommandLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="E:OpenMetaverse.ParcelManager.ParcelDwellReply">
            <summary>Raised when the simulator responds to a <see cref="M:OpenMetaverse.ParcelManager.RequestDwell(OpenMetaverse.Simulator,System.Int32)" /> request</summary>
        </member>
        <member name="E:OpenMetaverse.ParcelManager.ParcelInfoReply">
            <summary>Raised when the simulator responds to a <see cref="M:OpenMetaverse.ParcelManager.RequestParcelInfo(OpenMetaverse.UUID)" /> request</summary>
        </member>
        <member name="E:OpenMetaverse.ParcelManager.ParcelProperties">
            <summary>Raised when the simulator responds to a <see cref="M:OpenMetaverse.ParcelManager.RequestParcelProperties(OpenMetaverse.Simulator,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean)" /> request</summary>
        </member>
        <member name="E:OpenMetaverse.ParcelManager.ParcelAccessListReply">
            <summary>Raised when the simulator responds to a <see cref="M:OpenMetaverse.ParcelManager.RequestParcelAccessList(OpenMetaverse.Simulator,System.Int32,OpenMetaverse.AccessList,System.Int32)" /> request</summary>
        </member>
        <member name="E:OpenMetaverse.ParcelManager.ParcelObjectOwnersReply">
            <summary>Raised when the simulator responds to a <see cref="M:OpenMetaverse.ParcelManager.RequestObjectOwners(OpenMetaverse.Simulator,System.Int32)" /> request</summary>
        </member>
        <member name="E:OpenMetaverse.ParcelManager.SimParcelsDownloaded">
            <summary>Raised when the simulator responds to a <see cref="M:OpenMetaverse.ParcelManager.RequestAllSimParcels(OpenMetaverse.Simulator,System.Boolean,System.Int32)" /> request</summary>
        </member>
        <member name="E:OpenMetaverse.ParcelManager.ForceSelectObjectsReply">
            <summary>Raised when the simulator responds to a <see cref="!:RequestForceSelectObjects" /> request</summary>
        </member>
        <member name="E:OpenMetaverse.ParcelManager.ParcelMediaUpdateReply">
            <summary>Raised when the simulator responds to a Parcel Update request</summary>
        </member>
        <member name="E:OpenMetaverse.ParcelManager.ParcelMediaCommand">
            <summary>Raised when the parcel your agent is located sends a ParcelMediaCommand</summary>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.OnParcelDwellReply(OpenMetaverse.ParcelDwellReplyEventArgs)">
            <summary>Raises the ParcelDwellReply event</summary>
            <param name="e">A ParcelDwellReplyEventArgs object containing the
            data returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.OnParcelInfoReply(OpenMetaverse.ParcelInfoReplyEventArgs)">
            <summary>Raises the ParcelInfoReply event</summary>
            <param name="e">A ParcelInfoReplyEventArgs object containing the
            data returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.OnParcelProperties(OpenMetaverse.ParcelPropertiesEventArgs)">
            <summary>Raises the ParcelProperties event</summary>
            <param name="e">A ParcelPropertiesEventArgs object containing the
            data returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.OnParcelAccessListReply(OpenMetaverse.ParcelAccessListReplyEventArgs)">
            <summary>Raises the ParcelAccessListReply event</summary>
            <param name="e">A ParcelAccessListReplyEventArgs object containing the
            data returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.OnParcelObjectOwnersReply(OpenMetaverse.ParcelObjectOwnersReplyEventArgs)">
            <summary>Raises the ParcelObjectOwnersReply event</summary>
            <param name="e">A ParcelObjectOwnersReplyEventArgs object containing the
            data returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.OnSimParcelsDownloaded(OpenMetaverse.SimParcelsDownloadedEventArgs)">
            <summary>Raises the SimParcelsDownloaded event</summary>
            <param name="e">A SimParcelsDownloadedEventArgs object containing the
            data returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.OnForceSelectObjectsReply(OpenMetaverse.ForceSelectObjectsReplyEventArgs)">
            <summary>Raises the ForceSelectObjectsReply event</summary>
            <param name="e">A ForceSelectObjectsReplyEventArgs object containing the
            data returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.OnParcelMediaUpdateReply(OpenMetaverse.ParcelMediaUpdateReplyEventArgs)">
            <summary>Raises the ParcelMediaUpdateReply event</summary>
            <param name="e">A ParcelMediaUpdateReplyEventArgs object containing the
            data returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.OnParcelMediaCommand(OpenMetaverse.ParcelMediaCommandEventArgs)">
            <summary>Raises the ParcelMediaCommand event</summary>
            <param name="e">A ParcelMediaCommandEventArgs object containing the
            data returned from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.RequestParcelInfo(OpenMetaverse.UUID)">
            <summary>
            Request basic information for a single parcel
            </summary>
            <param name="parcelID">Simulator-local ID of the parcel</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.RequestParcelProperties(OpenMetaverse.Simulator,System.Int32,System.Int32)">
            <summary>
            Request properties of a single parcel
            </summary>
            <param name="simulator">Simulator containing the parcel</param>
            <param name="localID">Simulator-local ID of the parcel</param>
            <param name="sequenceID">An arbitrary integer that will be returned
            with the ParcelProperties reply, useful for distinguishing between
            multiple simultaneous requests</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.RequestParcelAccessList(OpenMetaverse.Simulator,System.Int32,OpenMetaverse.AccessList,System.Int32)">
            <summary>
            Request the access list for a single parcel
            </summary>
            <param name="simulator">Simulator containing the parcel</param>
            <param name="localID">Simulator-local ID of the parcel</param>
            <param name="sequenceID">An arbitrary integer that will be returned
            with the ParcelAccessList reply, useful for distinguishing between
            multiple simultaneous requests</param>
            <param name="flags">
            </param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.RequestParcelProperties(OpenMetaverse.Simulator,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Request properties of parcels using a bounding box selection
            </summary>
            <param name="simulator">Simulator containing the parcel</param>
            <param name="north">Northern boundary of the parcel selection</param>
            <param name="east">Eastern boundary of the parcel selection</param>
            <param name="south">Southern boundary of the parcel selection</param>
            <param name="west">Western boundary of the parcel selection</param>
            <param name="sequenceID">An arbitrary integer that will be returned
            with the ParcelProperties reply, useful for distinguishing between
            different types of parcel property requests</param>
            <param name="snapSelection">A boolean that is returned with the
            ParcelProperties reply, useful for snapping focus to a single
            parcel</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.RequestAllSimParcels(OpenMetaverse.Simulator)">
            <summary>
            Request all simulator parcel properties (used for populating the <code>Simulator.Parcels</code>
            dictionary)
            </summary>
            <param name="simulator">Simulator to request parcels from (must be connected)</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.RequestAllSimParcels(OpenMetaverse.Simulator,System.Boolean,System.Int32)">
            <summary>
            Request all simulator parcel properties (used for populating the <code>Simulator.Parcels</code>
            dictionary)
            </summary>
            <param name="simulator">Simulator to request parcels from (must be connected)</param>
            <param name="refresh">If TRUE, will force a full refresh</param>
            <param name="msDelay">Number of milliseconds to pause in between each request</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.RequestDwell(OpenMetaverse.Simulator,System.Int32)">
            <summary>
            Request the dwell value for a parcel
            </summary>
            <param name="simulator">Simulator containing the parcel</param>
            <param name="localID">Simulator-local ID of the parcel</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.Buy(OpenMetaverse.Simulator,System.Int32,System.Boolean,OpenMetaverse.UUID,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Send a request to Purchase a parcel of land
            </summary>
            <param name="simulator">The Simulator the parcel is located in</param>
            <param name="localID">The parcels region specific local ID</param>
            <param name="forGroup">true if this parcel is being purchased by a group</param>
            <param name="groupID">The groups <seealso cref="T:OpenMetaverse.UUID" /></param>
            <param name="removeContribution">true to remove tier contribution if purchase is successful</param>
            <param name="parcelArea">The parcels size</param>
            <param name="parcelPrice">The purchase price of the parcel</param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.Reclaim(OpenMetaverse.Simulator,System.Int32)">
            <summary>
            Reclaim a parcel of land
            </summary>
            <param name="simulator">The simulator the parcel is in</param>
            <param name="localID">The parcels region specific local ID</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.DeedToGroup(OpenMetaverse.Simulator,System.Int32,OpenMetaverse.UUID)">
            <summary>
            Deed a parcel to a group
            </summary>
            <param name="simulator">The simulator the parcel is in</param>
            <param name="localID">The parcels region specific local ID</param>
            <param name="groupID">The groups <seealso cref="T:OpenMetaverse.UUID" /></param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.RequestObjectOwners(OpenMetaverse.Simulator,System.Int32)">
            <summary>
            Request prim owners of a parcel of land.
            </summary>
            <param name="simulator">Simulator parcel is in</param>
            <param name="localID">The parcels region specific local ID</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.ReturnObjects(OpenMetaverse.Simulator,System.Int32,OpenMetaverse.ObjectReturnType,System.Collections.Generic.List{OpenMetaverse.UUID})">
            <summary>
            Return objects from a parcel
            </summary>
            <param name="simulator">Simulator parcel is in</param>
            <param name="localID">The parcels region specific local ID</param>
            <param name="type">the type of objects to return, <seealso cref="T:OpenMetaverse.ObjectReturnType" /></param>
            <param name="ownerIDs">A list containing object owners <seealso cref="T:OpenMetaverse.UUID" />s to return</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.ParcelSubdivide(OpenMetaverse.Simulator,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Subdivide (split) a parcel
            </summary>
            <param name="simulator">
            </param>
            <param name="west">
            </param>
            <param name="south">
            </param>
            <param name="east">
            </param>
            <param name="north">
            </param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.ParcelJoin(OpenMetaverse.Simulator,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Join two parcels of land creating a single parcel
            </summary>
            <param name="simulator">
            </param>
            <param name="west">
            </param>
            <param name="south">
            </param>
            <param name="east">
            </param>
            <param name="north">
            </param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.GetParcelLocalID(OpenMetaverse.Simulator,OpenMetaverse.Vector3)">
            <summary>
            Get a parcels LocalID
            </summary>
            <param name="simulator">Simulator parcel is in</param>
            <param name="position">Vector3 position in simulator (Z not used)</param>
            <returns>0 on failure, or parcel LocalID on success.</returns>
            <remarks>A call to <code>Parcels.RequestAllSimParcels</code> is required to populate map and
            dictionary.</remarks>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.Terraform(OpenMetaverse.Simulator,System.Int32,OpenMetaverse.TerraformAction,OpenMetaverse.TerraformBrushSize)">
            <summary>
            Terraform (raise, lower, etc) an area or whole parcel of land
            </summary>
            <param name="simulator">Simulator land area is in.</param>
            <param name="localID">LocalID of parcel, or -1 if using bounding box</param>
            <param name="action">From Enum, Raise, Lower, Level, Smooth, Etc.</param>
            <param name="brushSize">Size of area to modify</param>
            <returns>true on successful request sent.</returns>
            <remarks>Settings.STORE_LAND_PATCHES must be true,
            Parcel information must be downloaded using <code>RequestAllSimParcels()</code></remarks>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.Terraform(OpenMetaverse.Simulator,System.Single,System.Single,System.Single,System.Single,OpenMetaverse.TerraformAction,OpenMetaverse.TerraformBrushSize)">
            <summary>
            Terraform (raise, lower, etc) an area or whole parcel of land
            </summary>
            <param name="simulator">Simulator land area is in.</param>
            <param name="west">west border of area to modify</param>
            <param name="south">south border of area to modify</param>
            <param name="east">east border of area to modify</param>
            <param name="north">north border of area to modify</param>
            <param name="action">From Enum, Raise, Lower, Level, Smooth, Etc.</param>
            <param name="brushSize">Size of area to modify</param>
            <returns>true on successful request sent.</returns>
            <remarks>Settings.STORE_LAND_PATCHES must be true,
            Parcel information must be downloaded using <code>RequestAllSimParcels()</code></remarks>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.Terraform(OpenMetaverse.Simulator,System.Int32,System.Single,System.Single,System.Single,System.Single,OpenMetaverse.TerraformAction,OpenMetaverse.TerraformBrushSize,System.Int32)">
            <summary>
            Terraform (raise, lower, etc) an area or whole parcel of land
            </summary>
            <param name="simulator">Simulator land area is in.</param>
            <param name="localID">LocalID of parcel, or -1 if using bounding box</param>
            <param name="west">west border of area to modify</param>
            <param name="south">south border of area to modify</param>
            <param name="east">east border of area to modify</param>
            <param name="north">north border of area to modify</param>
            <param name="action">From Enum, Raise, Lower, Level, Smooth, Etc.</param>
            <param name="brushSize">Size of area to modify</param>
            <param name="seconds">How many meters + or - to lower, 1 = 1 meter</param>
            <returns>true on successful request sent.</returns>
            <remarks>Settings.STORE_LAND_PATCHES must be true,
            Parcel information must be downloaded using <code>RequestAllSimParcels()</code></remarks>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.Terraform(OpenMetaverse.Simulator,System.Int32,System.Single,System.Single,System.Single,System.Single,OpenMetaverse.TerraformAction,OpenMetaverse.TerraformBrushSize,System.Int32,System.Single)">
            <summary>
            Terraform (raise, lower, etc) an area or whole parcel of land
            </summary>
            <param name="simulator">Simulator land area is in.</param>
            <param name="localID">LocalID of parcel, or -1 if using bounding box</param>
            <param name="west">west border of area to modify</param>
            <param name="south">south border of area to modify</param>
            <param name="east">east border of area to modify</param>
            <param name="north">north border of area to modify</param>
            <param name="action">From Enum, Raise, Lower, Level, Smooth, Etc.</param>
            <param name="brushSize">Size of area to modify</param>
            <param name="seconds">How many meters + or - to lower, 1 = 1 meter</param>
            <param name="height">Height at which the terraform operation is acting at</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.RequestSelectObjects(System.Int32,OpenMetaverse.ObjectReturnType,OpenMetaverse.UUID)">
            <summary>
            Sends a request to the simulator to return a list of objects owned by specific owners
            </summary>
            <param name="localID">Simulator local ID of parcel</param>
            <param name="selectType">Owners, Others, Etc</param>
            <param name="ownerID">List containing keys of avatars objects to select;
            if List is null will return Objects of type <c>selectType</c></param>
            <remarks>Response data is returned in the event <seealso cref="E:OnParcelSelectedObjects" /></remarks>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.EjectUser(OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Eject and optionally ban a user from a parcel
            </summary>
            <param name="targetID">target key of avatar to eject</param>
            <param name="ban">true to also ban target</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.FreezeUser(OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Freeze or unfreeze an avatar over your land
            </summary>
            <param name="targetID">target key to freeze</param>
            <param name="freeze">true to freeze, false to unfreeze</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.ReleaseParcel(OpenMetaverse.Simulator,System.Int32)">
            <summary>
            Abandon a parcel of land
            </summary>
            <param name="simulator">Simulator parcel is in</param>
            <param name="localID">Simulator local ID of parcel</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.RequestRemoteParcelID(OpenMetaverse.Vector3,System.UInt64,OpenMetaverse.UUID)">
            <summary>
            Requests the UUID of the parcel in a remote region at a specified location
            </summary>
            <param name="location">Location of the parcel in the remote region</param>
            <param name="regionHandle">Remote region handle</param>
            <param name="regionID">Remote region UUID</param>
            <returns>If successful UUID of the remote parcel, UUID.Zero otherwise</returns>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.GetParcelResouces(OpenMetaverse.UUID,System.Boolean,OpenMetaverse.ParcelManager.LandResourcesCallback)">
            <summary>
            Retrieves information on resources used by the parcel
            </summary>
            <param name="parcelID">UUID of the parcel</param>
            <param name="getDetails">Should per object resource usage be requested</param>
            <param name="callback">Callback invoked when the request is complete</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.ParcelDwellReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
            <remarks>Raises the <see cref="E:OpenMetaverse.ParcelManager.ParcelDwellReply" /> event</remarks>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.ParcelInfoReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
            <remarks>Raises the <see cref="E:OpenMetaverse.ParcelManager.ParcelInfoReply" /> event</remarks>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.ParcelAccessListReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
            <remarks>Raises the <see cref="E:OpenMetaverse.ParcelManager.ParcelAccessListReply" /> event</remarks>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.SelectParcelObjectsReplyHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
            <remarks>Raises the <see cref="E:OpenMetaverse.ParcelManager.ForceSelectObjectsReply" /> event</remarks>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.ParcelMediaUpdateHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
            <remarks>Raises the <see cref="E:OpenMetaverse.ParcelManager.ParcelMediaUpdateReply" /> event</remarks>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.ParcelOverlayHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.ParcelManager.ParcelMediaCommandMessagePacketHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
            <remarks>Raises the <see cref="T:OpenMetaverse.ParcelMediaCommand" /> event</remarks>
        </member>
        <member name="T:OpenMetaverse.ParcelDwellReplyEventArgs">
            <summary>Contains a parcels dwell data returned from the simulator in response to an <see cref="!:RequestParcelDwell" /></summary>
        </member>
        <member name="M:OpenMetaverse.ParcelDwellReplyEventArgs.#ctor(OpenMetaverse.UUID,System.Int32,System.Single)">
            <summary>
            Construct a new instance of the ParcelDwellReplyEventArgs class
            </summary>
            <param name="parcelID">The global ID of the parcel</param>
            <param name="localID">The simulator specific ID of the parcel</param>
            <param name="dwell">The calculated dwell for the parcel</param>
        </member>
        <member name="P:OpenMetaverse.ParcelDwellReplyEventArgs.ParcelID">
            <summary>Get the global ID of the parcel</summary>
        </member>
        <member name="P:OpenMetaverse.ParcelDwellReplyEventArgs.LocalID">
            <summary>Get the simulator specific ID of the parcel</summary>
        </member>
        <member name="P:OpenMetaverse.ParcelDwellReplyEventArgs.Dwell">
            <summary>Get the calculated dwell</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelInfoReplyEventArgs">
            <summary>Contains basic parcel information data returned from the
            simulator in response to an <see cref="!:RequestParcelInfo" /> request</summary>
        </member>
        <member name="M:OpenMetaverse.ParcelInfoReplyEventArgs.#ctor(OpenMetaverse.ParcelInfo)">
            <summary>
            Construct a new instance of the ParcelInfoReplyEventArgs class
            </summary>
            <param name="parcel">The <see cref="T:OpenMetaverse.ParcelInfo" /> object containing basic parcel info</param>
        </member>
        <member name="P:OpenMetaverse.ParcelInfoReplyEventArgs.Parcel">
            <summary>Get the <see cref="T:OpenMetaverse.ParcelInfo" /> object containing basic parcel info</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelPropertiesEventArgs">
            <summary>Contains basic parcel information data returned from the simulator in response to an <see cref="!:RequestParcelInfo" /> request</summary>
        </member>
        <member name="M:OpenMetaverse.ParcelPropertiesEventArgs.#ctor(OpenMetaverse.Simulator,OpenMetaverse.Parcel,OpenMetaverse.ParcelResult,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Construct a new instance of the ParcelPropertiesEventArgs class
            </summary>
            <param name="simulator">The <see cref="T:OpenMetaverse.Parcel" /> object containing the details</param>
            <param name="parcel">The <see cref="T:OpenMetaverse.Parcel" /> object containing the details</param>
            <param name="result">The result of the request</param>
            <param name="selectedPrims">The number of primitieves your agent is
            currently selecting and or sitting on in this parcel</param>
            <param name="sequenceID">The user assigned ID used to correlate a request with
            these results</param>
            <param name="snapSelection">TODO:</param>
        </member>
        <member name="P:OpenMetaverse.ParcelPropertiesEventArgs.Simulator">
            <summary>Get the simulator the parcel is located in</summary>
        </member>
        <member name="P:OpenMetaverse.ParcelPropertiesEventArgs.Parcel">
            <summary>Get the <see cref="T:OpenMetaverse.Parcel" /> object containing the details</summary>
            <remarks>If Result is NoData, this object will not contain valid data</remarks>
        </member>
        <member name="P:OpenMetaverse.ParcelPropertiesEventArgs.Result">
            <summary>Get the result of the request</summary>
        </member>
        <member name="P:OpenMetaverse.ParcelPropertiesEventArgs.SelectedPrims">
            <summary>Get the number of primitieves your agent is
            currently selecting and or sitting on in this parcel</summary>
        </member>
        <member name="P:OpenMetaverse.ParcelPropertiesEventArgs.SequenceID">
            <summary>Get the user assigned ID used to correlate a request with
            these results</summary>
        </member>
        <member name="P:OpenMetaverse.ParcelPropertiesEventArgs.SnapSelection">
            <summary>TODO:</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelAccessListReplyEventArgs">
            <summary>Contains blacklist and whitelist data returned from the simulator in response to an <see cref="!:RequestParcelAccesslist" /> request</summary>
        </member>
        <member name="M:OpenMetaverse.ParcelAccessListReplyEventArgs.#ctor(OpenMetaverse.Simulator,System.Int32,System.Int32,System.UInt32,System.Collections.Generic.List{OpenMetaverse.ParcelManager.ParcelAccessEntry})">
            <summary>
            Construct a new instance of the ParcelAccessListReplyEventArgs class
            </summary>
            <param name="simulator">The simulator the parcel is located in</param>
            <param name="sequenceID">The user assigned ID used to correlate a request with
            these results</param>
            <param name="localID">The simulator specific ID of the parcel</param>
            <param name="flags">TODO:</param>
            <param name="accessEntries">The list containing the white/blacklisted agents for the parcel</param>
        </member>
        <member name="P:OpenMetaverse.ParcelAccessListReplyEventArgs.Simulator">
            <summary>Get the simulator the parcel is located in</summary>
        </member>
        <member name="P:OpenMetaverse.ParcelAccessListReplyEventArgs.SequenceID">
            <summary>Get the user assigned ID used to correlate a request with
            these results</summary>
        </member>
        <member name="P:OpenMetaverse.ParcelAccessListReplyEventArgs.LocalID">
            <summary>Get the simulator specific ID of the parcel</summary>
        </member>
        <member name="P:OpenMetaverse.ParcelAccessListReplyEventArgs.Flags">
            <summary>TODO:</summary>
        </member>
        <member name="P:OpenMetaverse.ParcelAccessListReplyEventArgs.AccessList">
            <summary>Get the list containing the white/blacklisted agents for the parcel</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelObjectOwnersReplyEventArgs">
            <summary>Contains blacklist and whitelist data returned from the
            simulator in response to an <see cref="!:RequestParcelAccesslist" /> request</summary>
        </member>
        <member name="M:OpenMetaverse.ParcelObjectOwnersReplyEventArgs.#ctor(OpenMetaverse.Simulator,System.Collections.Generic.List{OpenMetaverse.ParcelManager.ParcelPrimOwners})">
            <summary>
            Construct a new instance of the ParcelObjectOwnersReplyEventArgs class
            </summary>
            <param name="simulator">The simulator the parcel is located in</param>
            <param name="primOwners">The list containing prim ownership counts</param>
        </member>
        <member name="P:OpenMetaverse.ParcelObjectOwnersReplyEventArgs.Simulator">
            <summary>Get the simulator the parcel is located in</summary>
        </member>
        <member name="P:OpenMetaverse.ParcelObjectOwnersReplyEventArgs.PrimOwners">
            <summary>Get the list containing prim ownership counts</summary>
        </member>
        <member name="T:OpenMetaverse.SimParcelsDownloadedEventArgs">
            <summary>Contains the data returned when all parcel data has been retrieved from a simulator</summary>
        </member>
        <member name="M:OpenMetaverse.SimParcelsDownloadedEventArgs.#ctor(OpenMetaverse.Simulator,OpenMetaverse.InternalDictionary{System.Int32,OpenMetaverse.Parcel},System.Int32[,])">
            <summary>
            Construct a new instance of the SimParcelsDownloadedEventArgs class
            </summary>
            <param name="simulator">The simulator the parcel data was retrieved from</param>
            <param name="simParcels">The dictionary containing the parcel data</param>
            <param name="parcelMap">The multidimensional array containing a x,y grid mapped
            to each 64x64 parcel's LocalID.</param>
        </member>
        <member name="P:OpenMetaverse.SimParcelsDownloadedEventArgs.Simulator">
            <summary>Get the simulator the parcel data was retrieved from</summary>
        </member>
        <member name="P:OpenMetaverse.SimParcelsDownloadedEventArgs.Parcels">
            <summary>A dictionary containing the parcel data where the key correlates to the ParcelMap entry</summary>
        </member>
        <member name="P:OpenMetaverse.SimParcelsDownloadedEventArgs.ParcelMap">
            <summary>Get the multidimensional array containing a x,y grid mapped
            to each 64x64 parcel's LocalID.</summary>
        </member>
        <member name="T:OpenMetaverse.ForceSelectObjectsReplyEventArgs">
            <summary>Contains the data returned when a <see cref="!:RequestForceSelectObjects" /> request</summary>
        </member>
        <member name="M:OpenMetaverse.ForceSelectObjectsReplyEventArgs.#ctor(OpenMetaverse.Simulator,System.Collections.Generic.List{System.UInt32},System.Boolean)">
            <summary>
            Construct a new instance of the ForceSelectObjectsReplyEventArgs class
            </summary>
            <param name="simulator">The simulator the parcel data was retrieved from</param>
            <param name="objectIDs">The list of primitive IDs</param>
            <param name="resetList">true if the list is clean and contains the information
            only for a given request</param>
        </member>
        <member name="P:OpenMetaverse.ForceSelectObjectsReplyEventArgs.Simulator">
            <summary>Get the simulator the parcel data was retrieved from</summary>
        </member>
        <member name="P:OpenMetaverse.ForceSelectObjectsReplyEventArgs.ObjectIDs">
            <summary>Get the list of primitive IDs</summary>
        </member>
        <member name="P:OpenMetaverse.ForceSelectObjectsReplyEventArgs.ResetList">
            <summary>true if the list is clean and contains the information
            only for a given request</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelMediaUpdateReplyEventArgs">
            <summary>Contains data when the media data for a parcel the avatar is on changes</summary>
        </member>
        <member name="M:OpenMetaverse.ParcelMediaUpdateReplyEventArgs.#ctor(OpenMetaverse.Simulator,OpenMetaverse.ParcelMedia)">
            <summary>
            Construct a new instance of the ParcelMediaUpdateReplyEventArgs class
            </summary>
            <param name="simulator">the simulator the parcel media data was updated in</param>
            <param name="media">The updated media information</param>
        </member>
        <member name="P:OpenMetaverse.ParcelMediaUpdateReplyEventArgs.Simulator">
            <summary>Get the simulator the parcel media data was updated in</summary>
        </member>
        <member name="P:OpenMetaverse.ParcelMediaUpdateReplyEventArgs.Media">
            <summary>Get the updated media information</summary>
        </member>
        <member name="T:OpenMetaverse.ParcelMediaCommandEventArgs">
            <summary>Contains the media command for a parcel the agent is currently on</summary>
        </member>
        <member name="M:OpenMetaverse.ParcelMediaCommandEventArgs.#ctor(OpenMetaverse.Simulator,System.UInt32,OpenMetaverse.ParcelFlags,OpenMetaverse.ParcelMediaCommand,System.Single)">
            <summary>
            Construct a new instance of the ParcelMediaCommandEventArgs class
            </summary>
            <param name="simulator">The simulator the parcel media command was issued in</param>
            <param name="sequence">
            </param>
            <param name="flags">
            </param>
            <param name="command">The media command that was sent</param>
            <param name="time">
            </param>
        </member>
        <member name="P:OpenMetaverse.ParcelMediaCommandEventArgs.Simulator">
            <summary>Get the simulator the parcel media command was issued in</summary>
        </member>
        <member name="P:OpenMetaverse.ParcelMediaCommandEventArgs.Sequence">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.ParcelMediaCommandEventArgs.ParcelFlags">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.ParcelMediaCommandEventArgs.MediaCommand">
            <summary>Get the media command that was sent</summary>
        </member>
        <member name="P:OpenMetaverse.ParcelMediaCommandEventArgs.Time">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.PermissionMask">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.PermissionWho">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.PermissionWho.Base">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.PermissionWho.Owner">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.PermissionWho.Group">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.PermissionWho.Everyone">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.PermissionWho.NextOwner">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.PermissionWho.All">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.Permissions">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.FieldType">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.U8">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.U16">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.U32">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.U64">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.S8">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.S16">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.S32">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.F32">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.F64">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.UUID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.BOOL">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.Vector3">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.Vector3d">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.Vector4">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.Quaternion">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.IPADDR">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.IPPORT">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.Variable">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.Fixed">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.Single">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.FieldType.Multiple">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.MapField">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MapField.KeywordPosition">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MapField.Name">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MapField.Type">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MapField.Count">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.MapField.CompareTo(System.Object)">
            <summary>
            </summary>
            <param name="obj">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:OpenMetaverse.MapBlock">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MapBlock.KeywordPosition">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MapBlock.Name">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MapBlock.Count">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MapBlock.Fields">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.MapBlock.CompareTo(System.Object)">
            <summary>
            </summary>
            <param name="obj">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:OpenMetaverse.MapPacket">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MapPacket.ID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MapPacket.Name">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MapPacket.Frequency">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MapPacket.Trusted">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MapPacket.Encoded">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MapPacket.Blocks">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.ProtocolManager">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.ProtocolManager.#ctor(System.String,OpenMetaverse.GridClient)">
            <summary>
            </summary>
            <param name="mapFile">
            </param>
            <param name="client">
            </param>
        </member>
        <member name="F:OpenMetaverse.ProtocolManager.TypeSizes">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ProtocolManager.KeywordPositions">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ProtocolManager.LowMaps">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ProtocolManager.MediumMaps">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.ProtocolManager.HighMaps">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.ProtocolManager.Command(System.String)">
            <summary>
            </summary>
            <param name="command">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.ProtocolManager.Command(System.Byte[])">
            <summary>
            </summary>
            <param name="data">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.ProtocolManager.Command(System.UInt16,OpenMetaverse.PacketFrequency)">
            <summary>
            </summary>
            <param name="command">
            </param>
            <param name="frequency">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.ProtocolManager.PrintMap">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.ProtocolManager.PrintOneMap(OpenMetaverse.MapPacket[],System.String)">
            <summary>
            </summary>
            <param name="map">
            </param>
            <param name="frequency">
            </param>
        </member>
        <member name="M:OpenMetaverse.ProtocolManager.DecodeMapFile(System.String,System.String)">
            <summary>
            </summary>
            <param name="mapFile">
            </param>
            <param name="outputFile">
            </param>
        </member>
        <member name="M:OpenMetaverse.ProtocolManager.LoadMapFile(System.String)">
            <summary>
            </summary>
            <param name="mapFile">
            </param>
        </member>
        <member name="T:OpenMetaverse.Settings">
            <summary>
            Class for controlling various system settings.
            </summary>
            <remarks>Some values are readonly because they affect things that
            happen when the GridClient object is initialized, so changing them at
            runtime won't do any good. Non-readonly values may affect things that
            happen at login or dynamically</remarks>
        </member>
        <member name="M:OpenMetaverse.Settings.#ctor(OpenMetaverse.GridClient)">
            <summary>Constructor</summary>
            <param name="client">Reference to a GridClient object</param>
        </member>
        <member name="F:OpenMetaverse.Settings.AGNI_LOGIN_SERVER">
            <summary>Main grid login server</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.ADITI_LOGIN_SERVER">
            <summary>Beta grid login server</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.ENABLE_INVENTORY_STORE">
            <summary>
            InventoryManager requests inventory information on login,
            GridClient initializes an Inventory store for main inventory.
            </summary>
        </member>
        <member name="F:OpenMetaverse.Settings.ENABLE_LIBRARY_STORE">
            <summary>
            InventoryManager requests library information on login,
            GridClient initializes an Inventory store for the library.
            </summary>
        </member>
        <member name="F:OpenMetaverse.Settings.PING_INTERVAL">
            <summary>Number of milliseconds between sending pings to each sim</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.DEFAULT_AGENT_UPDATE_INTERVAL">
            <summary>Number of milliseconds between sending camera updates</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.INTERPOLATION_INTERVAL">
            <summary>Number of milliseconds between updating the current
            positions of moving, non-accelerating and non-colliding objects</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.NETWORK_TICK_INTERVAL">
            <summary>Millisecond interval between ticks, where all ACKs are
            sent out and the age of unACKed packets is checked</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.PACKET_INBOX_SIZE">
            <summary>The initial size of the packet inbox, where packets are
            stored before processing</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.MAX_PACKET_SIZE">
            <summary>Maximum size of packet that we want to send over the wire</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.MAX_SEQUENCE">
            <summary>The maximum value of a packet sequence number before it
            rolls over back to one</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.PACKET_ARCHIVE_SIZE">
            <summary>The maximum size of the sequence number archive, used to
            check for resent and/or duplicate packets</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.RESOURCE_DIR">
            <summary>The relative directory where external resources are kept</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.LOGIN_SERVER">
            <summary>Login server to connect to</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.BIND_ADDR">
            <summary>IP Address the client will bind to</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.USE_LLSD_LOGIN">
            <summary>Use XML-RPC Login or LLSD Login, default is XML-RPC Login</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.TRANSFER_TIMEOUT">
            <summary>Number of milliseconds before an asset transfer will time
            out</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.TELEPORT_TIMEOUT">
            <summary>Number of milliseconds before a teleport attempt will time
            out</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.LOGOUT_TIMEOUT">
            <summary>Number of milliseconds before NetworkManager.Logout() will
            time out</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.CAPS_TIMEOUT">
            <summary>Number of milliseconds before a CAPS call will time out</summary>
            <remarks>Setting this too low will cause web requests time out and
            possibly retry repeatedly</remarks>
        </member>
        <member name="F:OpenMetaverse.Settings.LOGIN_TIMEOUT">
            <summary>Number of milliseconds for xml-rpc to timeout</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.RESEND_TIMEOUT">
            <summary>Milliseconds before a packet is assumed lost and resent</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.SIMULATOR_TIMEOUT">
            <summary>Milliseconds without receiving a packet before the
            connection to a simulator is assumed lost</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.MAP_REQUEST_TIMEOUT">
            <summary>Milliseconds to wait for a simulator info request through
            the grid interface</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.MAX_PENDING_ACKS">
            <summary>Maximum number of queued ACKs to be sent before SendAcks()
            is forced</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.STATS_QUEUE_SIZE">
            <summary>Network stats queue length (seconds)</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.SYNC_PACKETCALLBACKS">
            <summary>Enable to process packets synchronously, where all of the
            callbacks for each packet must return before the next packet is
            processed</summary>
            <remarks>This is an experimental feature and is not completely
            reliable yet. Ideally it would reduce context switches and thread
            overhead, but several calls currently block for a long time and
            would need to be rewritten as asynchronous code before this is
            feasible</remarks>
        </member>
        <member name="F:OpenMetaverse.Settings.STORE_LAND_PATCHES">
            <summary>Enable/disable storing terrain heightmaps in the
            TerrainManager</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.SEND_AGENT_UPDATES">
            <summary>Enable/disable sending periodic camera updates</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.SEND_AGENT_APPEARANCE">
            <summary>Enable/disable automatically setting agent appearance at
            login and after sim crossing</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.SEND_AGENT_THROTTLE">
            <summary>Enable/disable automatically setting the bandwidth throttle
            after connecting to each simulator</summary>
            <remarks>The default throttle uses the equivalent of the maximum
            bandwidth setting in the official client. If you do not set a
            throttle your connection will by default be throttled well below
            the minimum values and you may experience connection problems</remarks>
        </member>
        <member name="F:OpenMetaverse.Settings.SEND_PINGS">
            <summary>Enable/disable the sending of pings to monitor lag and
            packet loss</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.MULTIPLE_SIMS">
            <summary>Should we connect to multiple sims? This will allow
            viewing in to neighboring simulators and sim crossings
            (Experimental)</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.ALWAYS_DECODE_OBJECTS">
            <summary>If true, all object update packets will be decoded in to
            native objects. If false, only updates for our own agent will be
            decoded. Registering an event handler will force objects for that
            type to always be decoded. If this is disabled the object tracking
            will have missing or partial prim and avatar information</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.ALWAYS_REQUEST_OBJECTS">
            <summary>If true, when a cached object check is received from the
            server the full object info will automatically be requested</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.ENABLE_CAPS">
            <summary>Whether to establish connections to HTTP capabilities
            servers for simulators</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.ENABLE_SIMSTATS">
            <summary>Whether to decode sim stats</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.LOG_ALL_CAPS_ERRORS">
            <summary>The capabilities servers are currently designed to
            periodically return a 502 error which signals for the client to
            re-establish a connection. Set this to true to log those 502 errors</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.FETCH_MISSING_INVENTORY">
            <summary>If true, any reference received for a folder or item
            the library is not aware of will automatically be fetched</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.DISABLE_AGENT_UPDATE_DUPLICATE_CHECK">
            <summary>If true, and <code>SEND_AGENT_UPDATES</code> is true,
            AgentUpdate packets will continuously be sent out to give the bot
            smoother movement and autopiloting</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.AVATAR_TRACKING">
            <summary>If true, currently visible avatars will be stored
            in dictionaries inside <code>Simulator.ObjectAvatars</code>.
            If false, a new Avatar or Primitive object will be created
            each time an object update packet is received</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.OBJECT_TRACKING">
            <summary>If true, currently visible avatars will be stored
            in dictionaries inside <code>Simulator.ObjectPrimitives</code>.
            If false, a new Avatar or Primitive object will be created
            each time an object update packet is received</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.USE_INTERPOLATION_TIMER">
            <summary>If true, position and velocity will periodically be
            interpolated (extrapolated, technically) for objects and
            avatars that are being tracked by the library. This is
            necessary to increase the accuracy of speed and position
            estimates for simulated objects</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.TRACK_UTILIZATION">
            <summary>
            If true, utilization statistics will be tracked. There is a minor penalty
            in CPU time for enabling this option.
            </summary>
        </member>
        <member name="F:OpenMetaverse.Settings.PARCEL_TRACKING">
            <summary>If true, parcel details will be stored in the
            <code>Simulator.Parcels</code> dictionary as they are received</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.ALWAYS_REQUEST_PARCEL_ACL">
            <summary>
            If true, an incoming parcel properties reply will automatically send
            a request for the parcel access list
            </summary>
        </member>
        <member name="F:OpenMetaverse.Settings.ALWAYS_REQUEST_PARCEL_DWELL">
            <summary>
            if true, an incoming parcel properties reply will automatically send
            a request for the traffic count.
            </summary>
        </member>
        <member name="F:OpenMetaverse.Settings.USE_ASSET_CACHE">
            <summary>
            If true, images, and other assets downloaded from the server
            will be cached in a local directory
            </summary>
        </member>
        <member name="F:OpenMetaverse.Settings.ASSET_CACHE_DIR">
            <summary>Path to store cached texture data</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.ASSET_CACHE_MAX_SIZE">
            <summary>Maximum size cached files are allowed to take on disk (bytes)</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.DEFAULT_EFFECT_COLOR">
            <summary>Default color used for viewer particle effects</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.MAX_RESEND_COUNT">
            <summary>Maximum number of times to resend a failed packet</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.THROTTLE_OUTGOING_PACKETS">
            <summary>Throttle outgoing packet rate</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.CLIENT_IDENTIFICATION_TAG">
            <summary>UUID of a texture used by some viewers to indentify type of client used</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.MAX_CONCURRENT_TEXTURE_DOWNLOADS">
            <summary>The maximum number of concurrent texture downloads allowed</summary>
            <remarks>Increasing this number will not necessarily increase texture retrieval times due to
            simulator throttles</remarks>
        </member>
        <member name="F:OpenMetaverse.Settings.PIPELINE_REFRESH_INTERVAL">
            <summary>
            The Refresh timer inteval is used to set the delay between checks for stalled texture downloads
            </summary>
            <remarks>This is a static variable which applies to all instances</remarks>
        </member>
        <member name="F:OpenMetaverse.Settings.PIPELINE_REQUEST_TIMEOUT">
            <summary>
            Textures taking longer than this value will be flagged as timed out and removed from the pipeline
            </summary>
        </member>
        <member name="F:OpenMetaverse.Settings.LOG_LEVEL">
            <summary>
            Get or set the minimum log level to output to the console by default
            If the library is not compiled with DEBUG defined and this level is set to DEBUG
            You will get no output on the console. This behavior can be overriden by creating
            a logger configuration file for log4net
            </summary>
        </member>
        <member name="F:OpenMetaverse.Settings.LOG_NAMES">
            <summary>Attach avatar names to log messages</summary>
        </member>
        <member name="F:OpenMetaverse.Settings.LOG_RESENDS">
            <summary>Log packet retransmission info</summary>
        </member>
        <member name="P:OpenMetaverse.Settings.UPLOAD_COST">
            <summary>Cost of uploading an asset</summary>
            <remarks>Read-only since this value is dynamically fetched at login</remarks>
        </member>
        <member name="M:OpenMetaverse.Settings.EconomyDataHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="T:OpenMetaverse.RegionFlags">
            <summary>
            Simulator (region) properties
            </summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.None">
            <summary>No flags set</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.AllowDamage">
            <summary>Agents can take damage and be killed</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.AllowLandmark">
            <summary>Landmarks can be created here</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.AllowSetHome">
            <summary>Home position can be set in this sim</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.ResetHomeOnTeleport">
            <summary>Home position is reset when an agent teleports away</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.SunFixed">
            <summary>Sun does not move</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.TaxFree">
            <summary>No object, land, etc. taxes</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.BlockTerraform">
            <summary>Disable heightmap alterations (agents can still plant
            foliage)</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.BlockLandResell">
            <summary>Land cannot be released, sold, or purchased</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.Sandbox">
            <summary>All content is wiped nightly</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.NullLayer">
            <summary>Unknown: Related to the availability of an overview world map tile.(Think mainland images when zoomed out.)</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.SkipAgentAction">
            <summary>Unknown: Related to region debug flags. Possibly to skip processing of agent interaction with world. </summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.SkipUpdateInterestList">
            <summary>Region does not update agent prim interest lists. Internal debugging option.</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.SkipCollisions">
            <summary>No collision detection for non-agent objects</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.SkipScripts">
            <summary>No scripts are ran</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.SkipPhysics">
            <summary>All physics processing is turned off</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.ExternallyVisible">
            <summary>Region can be seen from other regions on world map. (Legacy world map option?) </summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.MainlandVisible">
            <summary>Region can be seen from mainland on world map. (Legacy world map option?) </summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.PublicAllowed">
            <summary>Agents not explicitly on the access list can visit the region. </summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.BlockDwell">
            <summary>Traffic calculations are not run across entire region, overrides parcel settings. </summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.NoFly">
            <summary>Flight is disabled (not currently enforced by the sim)</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.AllowDirectTeleport">
            <summary>Allow direct (p2p) teleporting</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.EstateSkipScripts">
            <summary>Estate owner has temporarily disabled scripting</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.RestrictPushObject">
            <summary>Restricts the usage of the LSL llPushObject function, applies to whole region.</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.DenyAnonymous">
            <summary>Deny agents with no payment info on file</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.DenyIdentified">
            <summary>Deny agents with payment info on file</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.DenyTransacted">
            <summary>Deny agents who have made a monetary transaction</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.AllowParcelChanges">
            <summary>Parcels within the region may be joined or divided by anyone, not just estate owners/managers. </summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.AbuseEmailToEstateOwner">
            <summary>Abuse reports sent from within this region are sent to the estate owner defined email. </summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.AllowVoice">
            <summary>Region is Voice Enabled</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.BlockParcelSearch">
            <summary>Removes the ability from parcel owners to set their parcels to show in search.</summary>
        </member>
        <member name="F:OpenMetaverse.RegionFlags.DenyAgeUnverified">
            <summary>Deny agents who have not been age verified from entering the region.</summary>
        </member>
        <member name="T:OpenMetaverse.SimAccess">
            <summary>
            Access level for a simulator
            </summary>
        </member>
        <member name="F:OpenMetaverse.SimAccess.Min">
            <summary>Minimum access level, no additional checks</summary>
        </member>
        <member name="F:OpenMetaverse.SimAccess.Trial">
            <summary>Trial accounts allowed</summary>
        </member>
        <member name="F:OpenMetaverse.SimAccess.PG">
            <summary>PG rating</summary>
        </member>
        <member name="F:OpenMetaverse.SimAccess.Mature">
            <summary>Mature rating</summary>
        </member>
        <member name="F:OpenMetaverse.SimAccess.Down">
            <summary>Simulator is offline</summary>
        </member>
        <member name="F:OpenMetaverse.SimAccess.NonExistent">
            <summary>Simulator does not exist</summary>
        </member>
        <member name="T:OpenMetaverse.Simulator">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.Simulator.#ctor(OpenMetaverse.GridClient,System.Net.IPEndPoint,System.UInt64)">
            <summary>
            </summary>
            <param name="client">Reference to the GridClient object</param>
            <param name="address">IPEndPoint of the simulator</param>
            <param name="handle">handle of the simulator</param>
        </member>
        <member name="T:OpenMetaverse.Simulator.SimStats">
            <summary>
            Simulator Statistics
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.SentPackets">
            <summary>Total number of packets sent by this simulator to this agent</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.RecvPackets">
            <summary>Total number of packets received by this simulator to this agent</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.SentBytes">
            <summary>Total number of bytes sent by this simulator to this agent</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.RecvBytes">
            <summary>Total number of bytes received by this simulator to this agent</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.ConnectTime">
            <summary>Time in seconds agent has been connected to simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.ResentPackets">
            <summary>Total number of packets that have been resent</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.ReceivedResends">
            <summary>Total number of resent packets recieved</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.SentPings">
            <summary>Total number of pings sent to this simulator by this agent</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.ReceivedPongs">
            <summary>Total number of ping replies sent to this agent by this simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.IncomingBPS">
            <summary>
            Incoming bytes per second
            </summary>
            <remarks>It would be nice to have this claculated on the fly, but
            this is far, far easier</remarks>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.OutgoingBPS">
            <summary>
            Outgoing bytes per second
            </summary>
            <remarks>It would be nice to have this claculated on the fly, but
            this is far, far easier</remarks>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.LastPingSent">
            <summary>Time last ping was sent</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.LastPingID">
            <summary>ID of last Ping sent</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.LastLag">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.MissedPings">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.Dilation">
            <summary>Current time dilation of this simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.FPS">
            <summary>Current Frames per second of simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.PhysicsFPS">
            <summary>Current Physics frames per second of simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.AgentUpdates">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.FrameTime">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.NetTime">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.PhysicsTime">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.ImageTime">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.ScriptTime">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.AgentTime">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.OtherTime">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.Objects">
            <summary>Total number of objects Simulator is simulating</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.ScriptedObjects">
            <summary>Total number of Active (Scripted) objects running</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.Agents">
            <summary>Number of agents currently in this simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.ChildAgents">
            <summary>Number of agents in neighbor simulators</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.ActiveScripts">
            <summary>Number of Active scripts running in this simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.LSLIPS">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.INPPS">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.OUTPPS">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.PendingDownloads">
            <summary>Number of downloads pending</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.PendingUploads">
            <summary>Number of uploads pending</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.VirtualSize">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.ResidentSize">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.PendingLocalUploads">
            <summary>Number of local uploads pending</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimStats.UnackedBytes">
            <summary>Unacknowledged bytes in queue</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.Client">
            <summary>A public reference to the client that this Simulator object
            is attached to</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.ID">
            <summary>A Unique Cache identifier for this simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.Caps">
            <summary>The capabilities for this simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.Handle">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimVersion">
            <summary>The current version of software this simulator is running</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.Name">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.ParcelOverlay">
            <summary>A 64x64 grid of parcel coloring values. The values stored
            in this array are of the <seealso cref="!:ParcelArrayType" /> type</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.ParcelOverlaysReceived">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainHeightRange00">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainHeightRange01">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainHeightRange10">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainHeightRange11">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainStartHeight00">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainStartHeight01">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainStartHeight10">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainStartHeight11">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.WaterHeight">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.SimOwner">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainBase0">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainBase1">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainBase2">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainBase3">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainDetail0">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainDetail1">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainDetail2">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.TerrainDetail3">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.IsEstateManager">
            <summary>true if your agent has Estate Manager rights on this region</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.Flags">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.Access">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.BillableFactor">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.Stats">
            <summary>Statistics information for this simulator and the
            connection to the simulator, calculated by the simulator itself
            and the library</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.RegionID">
            <summary>The regions Unique ID</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.ColoLocation">
            <summary>The physical data center the simulator is located</summary>
            <remarks>Known values are:
            <list type="table"><item>Dallas</item><item>Chandler</item><item>SF</item></list></remarks>
        </member>
        <member name="F:OpenMetaverse.Simulator.CPUClass">
            <summary>The CPU Class of the simulator</summary>
            <remarks>Most full mainland/estate sims appear to be 5,
            Homesteads and Openspace appear to be 501</remarks>
        </member>
        <member name="F:OpenMetaverse.Simulator.CPURatio">
            <summary>The number of regions sharing the same CPU as this one</summary>
            <remarks>"Full Sims" appear to be 1, Homesteads appear to be 4</remarks>
        </member>
        <member name="F:OpenMetaverse.Simulator.ProductName">
            <summary>The billing product name</summary>
            <remarks>Known values are:
            <list type="table"><item>Mainland / Full Region (Sku: 023)</item><item>Estate / Full Region (Sku: 024)</item><item>Estate / Openspace (Sku: 027)</item><item>Estate / Homestead (Sku: 029)</item><item>Mainland / Homestead (Sku: 129) (Linden Owned)</item><item>Mainland / Linden Homes (Sku: 131)</item></list></remarks>
        </member>
        <member name="F:OpenMetaverse.Simulator.ProductSku">
            <summary>The billing product SKU</summary>
            <remarks>Known values are:
            <list type="table"><item>023 Mainland / Full Region</item><item>024 Estate / Full Region</item><item>027 Estate / Openspace</item><item>029 Estate / Homestead</item><item>129 Mainland / Homestead (Linden Owned)</item><item>131 Linden Homes / Full Region</item></list></remarks>
        </member>
        <member name="F:OpenMetaverse.Simulator.ObjectsAvatars">
            <summary>
            A thread-safe dictionary containing avatars in a simulator
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.ObjectsPrimitives">
            <summary>
            A thread-safe dictionary containing primitives in a simulator
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.Sequence">
            <summary>The current sequence number for packets sent to this
            simulator. Must be Interlocked before modifying. Only
            useful for applications manipulating sequence numbers</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.Parcels">
            <summary>
            Provides access to an internal thread-safe dictionary containing parcel
            information found in this simulator
            </summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.DisconnectCandidate">
            <summary>Used internally to track sim disconnections</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.ConnectedEvent">
            <summary>Event that is triggered when the simulator successfully
            establishes a connection</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.connected">
            <summary>Whether this sim is currently connected or not. Hooked up
            to the property Connected</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.avatarPositions">
            <summary>Coarse locations of avatars in this simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.preyID">
            <summary>AvatarPositions key representing TrackAgent target</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.PacketArchive">
            <summary>Sequence numbers of packets we've received
            (for duplicate checking)</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.NeedAck">
            <summary>Packets we sent out that need ACKs from the simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Simulator.pauseSerial">
            <summary>Sequence number for pause/resume</summary>
        </member>
        <member name="P:OpenMetaverse.Simulator.ParcelMap">
            <summary>
            Provides access to an internal thread-safe multidimensional array containing a x,y grid mapped
            to each 64x64 parcel's LocalID.
            </summary>
        </member>
        <member name="P:OpenMetaverse.Simulator.IPEndPoint">
            <summary>The IP address and port of the server</summary>
        </member>
        <member name="P:OpenMetaverse.Simulator.Connected">
            <summary>Whether there is a working connection to the simulator or
            not</summary>
        </member>
        <member name="P:OpenMetaverse.Simulator.AvatarPositions">
            <summary>Coarse locations of avatars in this simulator</summary>
        </member>
        <member name="P:OpenMetaverse.Simulator.PreyID">
            <summary>AvatarPositions key representing TrackAgent target</summary>
        </member>
        <member name="M:OpenMetaverse.Simulator.IsParcelMapFull">
            <summary>
            Checks simulator parcel map to make sure it has downloaded all data successfully
            </summary>
            <returns>true if map is full (contains no 0's)</returns>
        </member>
        <member name="M:OpenMetaverse.Simulator.Dispose">
            <summary>
            Called when this Simulator object is being destroyed
            </summary>
        </member>
        <member name="M:OpenMetaverse.Simulator.Connect(System.Boolean)">
            <summary>
            Attempt to connect to this simulator
            </summary>
            <param name="moveToSim">Whether to move our agent in to this sim or not</param>
            <returns>True if the connection succeeded or connection status is
            unknown, false if there was a failure</returns>
        </member>
        <member name="M:OpenMetaverse.Simulator.Disconnect(System.Boolean)">
            <summary>
            Disconnect from this simulator
            </summary>
        </member>
        <member name="M:OpenMetaverse.Simulator.Pause">
            <summary>
            Instructs the simulator to stop sending update (and possibly other) packets
            </summary>
        </member>
        <member name="M:OpenMetaverse.Simulator.Resume">
            <summary>
            Instructs the simulator to resume sending update packets (unpause)
            </summary>
        </member>
        <member name="M:OpenMetaverse.Simulator.TerrainHeightAtPoint(System.Int32,System.Int32,System.Single@)">
            <summary>
            Retrieve the terrain height at a given coordinate
            </summary>
            <param name="x">Sim X coordinate, valid range is from 0 to 255</param>
            <param name="y">Sim Y coordinate, valid range is from 0 to 255</param>
            <param name="height">The terrain height at the given point if the
            lookup was successful, otherwise 0.0f</param>
            <returns>True if the lookup was successful, otherwise false</returns>
        </member>
        <member name="M:OpenMetaverse.Simulator.SendPacket(OpenMetaverse.Packets.Packet)">
            <summary>
            Sends a packet
            </summary>
            <param name="packet">Packet to be sent</param>
        </member>
        <member name="M:OpenMetaverse.Simulator.SendPing">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.Simulator.ToString">
            <summary>
            Returns Simulator Name as a String
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Simulator.GetHashCode">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Simulator.Equals(System.Object)">
            <summary>
            </summary>
            <param name="obj">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Simulator.SendAcks">
            <summary>
            Sends out pending acknowledgements
            </summary>
        </member>
        <member name="M:OpenMetaverse.Simulator.ResendUnacked">
            <summary>
            Resend unacknowledged packets
            </summary>
        </member>
        <member name="T:OpenMetaverse.SoundManager">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.SoundManager.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Construct a new instance of the SoundManager class, used for playing and receiving
            sound assets
            </summary>
            <param name="client">A reference to the current GridClient instance</param>
        </member>
        <member name="F:OpenMetaverse.SoundManager.m_AttachedSound">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.SoundManager.m_AttachedSoundLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.SoundManager.m_AttachedSoundGainChange">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.SoundManager.m_AttachedSoundGainChangeLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.SoundManager.m_SoundTrigger">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.SoundManager.m_SoundTriggerLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:OpenMetaverse.SoundManager.m_PreloadSound">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="F:OpenMetaverse.SoundManager.m_PreloadSoundLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="E:OpenMetaverse.SoundManager.AttachedSound">
            <summary>Raised when the simulator sends us data containing
            sound</summary>
        </member>
        <member name="E:OpenMetaverse.SoundManager.AttachedSoundGainChange">
            <summary>Raised when the simulator sends us data containing
            ...</summary>
        </member>
        <member name="E:OpenMetaverse.SoundManager.SoundTrigger">
            <summary>Raised when the simulator sends us data containing
            ...</summary>
        </member>
        <member name="E:OpenMetaverse.SoundManager.PreloadSound">
            <summary>Raised when the simulator sends us data containing
            ...</summary>
        </member>
        <member name="M:OpenMetaverse.SoundManager.OnAttachedSound(OpenMetaverse.AttachedSoundEventArgs)">
            <summary>Raises the AttachedSound Event</summary>
            <param name="e">A AttachedSoundEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.SoundManager.OnAttachedSoundGainChange(OpenMetaverse.AttachedSoundGainChangeEventArgs)">
            <summary>Raises the AttachedSoundGainChange Event</summary>
            <param name="e">A AttachedSoundGainChangeEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.SoundManager.OnSoundTrigger(OpenMetaverse.SoundTriggerEventArgs)">
            <summary>Raises the SoundTrigger Event</summary>
            <param name="e">A SoundTriggerEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.SoundManager.OnPreloadSound(OpenMetaverse.PreloadSoundEventArgs)">
            <summary>Raises the PreloadSound Event</summary>
            <param name="e">A PreloadSoundEventArgs object containing
            the data sent from the simulator</param>
        </member>
        <member name="M:OpenMetaverse.SoundManager.PlaySound(OpenMetaverse.UUID)">
            <summary>
            Plays a sound in the current region at full volume from avatar position
            </summary>
            <param name="soundID">UUID of the sound to be played</param>
        </member>
        <member name="M:OpenMetaverse.SoundManager.SendSoundTrigger(OpenMetaverse.UUID,OpenMetaverse.Vector3)">
            <summary>
            Plays a sound in the current region at full volume
            </summary>
            <param name="soundID">UUID of the sound to be played.</param>
            <param name="position">position for the sound to be played at. Normally the avatar.</param>
        </member>
        <member name="M:OpenMetaverse.SoundManager.SendSoundTrigger(OpenMetaverse.UUID,OpenMetaverse.Vector3,System.Single)">
            <summary>
            Plays a sound in the current region
            </summary>
            <param name="soundID">UUID of the sound to be played.</param>
            <param name="position">position for the sound to be played at. Normally the avatar.</param>
            <param name="gain">volume of the sound, from 0.0 to 1.0</param>
        </member>
        <member name="M:OpenMetaverse.SoundManager.SendSoundTrigger(OpenMetaverse.UUID,OpenMetaverse.Simulator,OpenMetaverse.Vector3,System.Single)">
            <summary>
            Plays a sound in the specified sim
            </summary>
            <param name="soundID">UUID of the sound to be played.</param>
            <param name="sim">UUID of the sound to be played.</param>
            <param name="position">position for the sound to be played at. Normally the avatar.</param>
            <param name="gain">volume of the sound, from 0.0 to 1.0</param>
        </member>
        <member name="M:OpenMetaverse.SoundManager.SendSoundTrigger(OpenMetaverse.UUID,System.UInt64,OpenMetaverse.Vector3,System.Single)">
            <summary>
            Play a sound asset
            </summary>
            <param name="soundID">UUID of the sound to be played.</param>
            <param name="handle">handle id for the sim to be played in.</param>
            <param name="position">position for the sound to be played at. Normally the avatar.</param>
            <param name="gain">volume of the sound, from 0.0 to 1.0</param>
        </member>
        <member name="M:OpenMetaverse.SoundManager.AttachedSoundHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.SoundManager.AttachedSoundGainChangeHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.SoundManager.PreloadSoundHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.SoundManager.SoundTriggerHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>Process an incoming packet and raise the appropriate events</summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="T:OpenMetaverse.AttachedSoundEventArgs">
            <summary>Provides data for the <see cref="E:OpenMetaverse.SoundManager.AttachedSound" /> event</summary>
            <remarks>The <see cref="E:OpenMetaverse.SoundManager.AttachedSound" /> event occurs when the simulator sends
            the sound data which emits from an agents attachment</remarks>
            <example>
            The following code example shows the process to subscribe to the <see cref="E:OpenMetaverse.SoundManager.AttachedSound" /> event
            and a stub to handle the data passed from the simulator
            <code>
            // Subscribe to the AttachedSound event
            Client.Sound.AttachedSound += Sound_AttachedSound;
            // process the data raised in the event here
            private void Sound_AttachedSound(object sender, AttachedSoundEventArgs e)
            {
            // ... Process AttachedSoundEventArgs here ...
            }
            </code></example>
        </member>
        <member name="M:OpenMetaverse.AttachedSoundEventArgs.#ctor(OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.UUID,System.Single,OpenMetaverse.SoundFlags)">
            <summary>
            Construct a new instance of the SoundTriggerEventArgs class
            </summary>
            <param name="soundID">The sound asset id</param>
            <param name="ownerID">The ID of the owner</param>
            <param name="objectID">The ID of the object</param>
            <param name="gain">The volume level</param>
            <param name="flags">The <see cref="T:OpenMetaverse.SoundFlags" /></param>
        </member>
        <member name="P:OpenMetaverse.AttachedSoundEventArgs.SoundID">
            <summary>Get the sound asset id</summary>
        </member>
        <member name="P:OpenMetaverse.AttachedSoundEventArgs.OwnerID">
            <summary>Get the ID of the owner</summary>
        </member>
        <member name="P:OpenMetaverse.AttachedSoundEventArgs.ObjectID">
            <summary>Get the ID of the Object</summary>
        </member>
        <member name="P:OpenMetaverse.AttachedSoundEventArgs.Gain">
            <summary>Get the volume level</summary>
        </member>
        <member name="P:OpenMetaverse.AttachedSoundEventArgs.Flags">
            <summary>Get the <see cref="T:OpenMetaverse.SoundFlags" /></summary>
        </member>
        <member name="T:OpenMetaverse.AttachedSoundGainChangeEventArgs">
            <summary>Provides data for the <see cref="E:OpenMetaverse.SoundManager.AttachedSoundGainChange" /> event</summary>
            <remarks>The <see cref="E:OpenMetaverse.SoundManager.AttachedSoundGainChange" /> event occurs when an attached sound
            changes its volume level</remarks>
        </member>
        <member name="M:OpenMetaverse.AttachedSoundGainChangeEventArgs.#ctor(OpenMetaverse.UUID,System.Single)">
            <summary>
            Construct a new instance of the AttachedSoundGainChangedEventArgs class
            </summary>
            <param name="objectID">The ID of the Object</param>
            <param name="gain">The new volume level</param>
        </member>
        <member name="P:OpenMetaverse.AttachedSoundGainChangeEventArgs.ObjectID">
            <summary>Get the ID of the Object</summary>
        </member>
        <member name="P:OpenMetaverse.AttachedSoundGainChangeEventArgs.Gain">
            <summary>Get the volume level</summary>
        </member>
        <member name="T:OpenMetaverse.SoundTriggerEventArgs">
            <summary>Provides data for the <see cref="E:OpenMetaverse.SoundManager.SoundTrigger" /> event</summary>
            <remarks>
                <para>The <see cref="E:OpenMetaverse.SoundManager.SoundTrigger" /> event occurs when the simulator forwards
            a request made by yourself or another agent to play either an asset sound or a built in sound</para>
                <para>Requests to play sounds where the <see cref="P:OpenMetaverse.SoundTriggerEventArgs.SoundID" /> is not one of the built-in
            <see cref="T:OpenMetaverse.Sounds" /> will require sending a request to download the sound asset before it can be played</para>
            </remarks>
            <example>
            The following code example uses the <see cref="P:OpenMetaverse.SoundTriggerEventArgs.OwnerID" />, <see cref="P:OpenMetaverse.SoundTriggerEventArgs.SoundID" />
            and <see cref="P:OpenMetaverse.SoundTriggerEventArgs.Gain" />
            properties to display some information on a sound request on the <see cref="T:System.Console" /> window.
            <code>
            // subscribe to the event
            Client.Sound.SoundTrigger += Sound_SoundTrigger;
            // play the pre-defined BELL_TING sound
            Client.Sound.SendSoundTrigger(Sounds.BELL_TING);
            // handle the response data
            private void Sound_SoundTrigger(object sender, SoundTriggerEventArgs e)
            {
            Console.WriteLine("{0} played the sound {1} at volume {2}",
            e.OwnerID, e.SoundID, e.Gain);
            }
            </code></example>
        </member>
        <member name="M:OpenMetaverse.SoundTriggerEventArgs.#ctor(OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.UUID,System.Single,System.UInt64,OpenMetaverse.Vector3)">
            <summary>
            Construct a new instance of the SoundTriggerEventArgs class
            </summary>
            <param name="soundID">The sound asset id</param>
            <param name="ownerID">The ID of the owner</param>
            <param name="objectID">The ID of the object</param>
            <param name="parentID">The ID of the objects parent</param>
            <param name="gain">The volume level</param>
            <param name="regionHandle">The regionhandle</param>
            <param name="position">The source position</param>
        </member>
        <member name="P:OpenMetaverse.SoundTriggerEventArgs.SoundID">
            <summary>Get the sound asset id</summary>
        </member>
        <member name="P:OpenMetaverse.SoundTriggerEventArgs.OwnerID">
            <summary>Get the ID of the owner</summary>
        </member>
        <member name="P:OpenMetaverse.SoundTriggerEventArgs.ObjectID">
            <summary>Get the ID of the Object</summary>
        </member>
        <member name="P:OpenMetaverse.SoundTriggerEventArgs.ParentID">
            <summary>Get the ID of the objects parent</summary>
        </member>
        <member name="P:OpenMetaverse.SoundTriggerEventArgs.Gain">
            <summary>Get the volume level</summary>
        </member>
        <member name="P:OpenMetaverse.SoundTriggerEventArgs.RegionHandle">
            <summary>Get the regionhandle</summary>
        </member>
        <member name="P:OpenMetaverse.SoundTriggerEventArgs.Position">
            <summary>Get the source position</summary>
        </member>
        <member name="T:OpenMetaverse.PreloadSoundEventArgs">
            <summary>Provides data for the <see cref="E:OpenMetaverse.AvatarManager.AvatarAppearance" /> event</summary>
            <remarks>The <see cref="E:OpenMetaverse.AvatarManager.AvatarAppearance" /> event occurs when the simulator sends
            the appearance data for an avatar</remarks>
            <example>
            The following code example uses the <see cref="P:OpenMetaverse.AvatarAppearanceEventArgs.AvatarID" /> and <see cref="P:OpenMetaverse.AvatarAppearanceEventArgs.VisualParams" />
            properties to display the selected shape of an avatar on the <see cref="T:System.Console" /> window.
            <code>
            // subscribe to the event
            Client.Avatars.AvatarAppearance += Avatars_AvatarAppearance;
            // handle the data when the event is raised
            void Avatars_AvatarAppearance(object sender, AvatarAppearanceEventArgs e)
            {
            Console.WriteLine("The Agent {0} is using a {1} shape.", e.AvatarID, (e.VisualParams[31] &gt; 0) : "male" ? "female")
            }
            </code></example>
        </member>
        <member name="M:OpenMetaverse.PreloadSoundEventArgs.#ctor(OpenMetaverse.UUID,OpenMetaverse.UUID,OpenMetaverse.UUID)">
            <summary>
            Construct a new instance of the PreloadSoundEventArgs class
            </summary>
            <param name="soundID">The sound asset id</param>
            <param name="ownerID">The ID of the owner</param>
            <param name="objectID">The ID of the object</param>
        </member>
        <member name="P:OpenMetaverse.PreloadSoundEventArgs.SoundID">
            <summary>Get the sound asset id</summary>
        </member>
        <member name="P:OpenMetaverse.PreloadSoundEventArgs.OwnerID">
            <summary>Get the ID of the owner</summary>
        </member>
        <member name="P:OpenMetaverse.PreloadSoundEventArgs.ObjectID">
            <summary>Get the ID of the Object</summary>
        </member>
        <member name="T:OpenMetaverse.Sounds">
            <summary>
            pre-defined built in sounds
            </summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.BELL_TING">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.CLICK">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.HEALTH_REDUCTION_FEMALE">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.HEALTH_REDUCTION_MALE">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.IM_START">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.INSTANT_MESSAGE_NOTIFICATION">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.INVALID_OPERATION">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.KEYBOARD_LOOP">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.MONEY_REDUCTION_COINS">
            <summary>coins</summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.MONEY_INCREASE_CASH_REGISTER_BELL">
            <summary>cash register bell</summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.NULL_KEYSTROKE">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.OBJECT_COLLISION">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.OBJECT_COLLISION_RUBBER">
            <summary>rubber</summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.OBJECT_COLLISION_PLASTIC">
            <summary>plastic</summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.OBJECT_COLLISION_FLESH">
            <summary>flesh</summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.OBJECT_COLLISION_WOOD_SPLINTERING">
            <summary>wood splintering?</summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.OBJECT_COLLISION_GLASS_BREAK">
            <summary>glass break</summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.OBJECT_COLLISION_METAL_CLUNK">
            <summary>metal clunk</summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.OBJECT_CREATE_WHOOSH">
            <summary>whoosh</summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.OBJECT_DELETE_SHAKE">
            <summary>shake</summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.OBJECT_REZ">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.PIE_MENU_APPEAR_DING">
            <summary>ding</summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.PIE_MENU_SLICE_HIGHLIGHT">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.PIE_MENU_SLICE_HIGHLIGHT1">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.PIE_MENU_SLICE_HIGHLIGHT2">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.PIE_MENU_SLICE_HIGHLIGHT3">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.PIE_MENU_SLICE_HIGHLIGHT4">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.PIE_MENU_SLICE_HIGHLIGHT5">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.PIE_MENU_SLICE_HIGHLIGHT6">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.PIE_MENU_SLICE_HIGHLIGHT7">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.SNAPSHOT">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.TELEPORT_TEXTURE_APPLY">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.THUNDER">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.WINDOW_CLOSE">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.WINDOW_OPEN">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Sounds.ZIPPER">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.Sounds.ToDictionary">
            <summary>
            A dictionary containing all pre-defined sounds
            </summary>
            <returns>A dictionary containing the pre-defined sounds,
            where the key is the sounds ID, and the value is a string
            containing a name to identify the purpose of the sound</returns>
        </member>
        <member name="F:OpenMetaverse.TerrainPatch.X">
            <summary>X position of this patch</summary>
        </member>
        <member name="F:OpenMetaverse.TerrainPatch.Y">
            <summary>Y position of this patch</summary>
        </member>
        <member name="F:OpenMetaverse.TerrainPatch.Data">
            <summary>A 16x16 array of floats holding decompressed layer data</summary>
        </member>
        <member name="M:OpenMetaverse.TerrainCompressor.CreateLandPacket(System.Single[],System.Int32[])">
            <summary>
            Creates a LayerData packet for compressed land data given a full
            simulator heightmap and an array of indices of patches to compress
            </summary>
            <param name="heightmap">A 256 * 256 array of floating point values
            specifying the height at each meter in the simulator</param>
            <param name="patches">Array of indexes in the 16x16 grid of patches
            for this simulator. For example if 1 and 17 are specified, patches
            x=1,y=0 and x=1,y=1 are sent</param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.TerrainCompressor.CreatePatchFromHeightmap(OpenMetaverse.BitPack,System.Single[],System.Int32,System.Int32)">
            <summary>
            Add a patch of terrain to a BitPacker
            </summary>
            <param name="output">BitPacker to write the patch to</param>
            <param name="heightmap">Heightmap of the simulator, must be a 256 *
            256 float array</param>
            <param name="x">X offset of the patch to create, valid values are
            from 0 to 15</param>
            <param name="y">Y offset of the patch to create, valid values are
            from 0 to 15</param>
        </member>
        <member name="M:OpenMetaverse.TerrainManager.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Default constructor
            </summary>
            <param name="client">
            </param>
        </member>
        <member name="F:OpenMetaverse.TerrainManager.m_LandPatchReceivedEvent">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="F:OpenMetaverse.TerrainManager.m_LandPatchReceivedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="E:OpenMetaverse.TerrainManager.LandPatchReceived">
            <summary>Raised when the simulator responds sends </summary>
        </member>
        <member name="M:OpenMetaverse.TerrainManager.OnLandPatchReceived(OpenMetaverse.LandPatchReceivedEventArgs)">
            <summary>Raises the LandPatchReceived event</summary>
            <param name="e">A LandPatchReceivedEventArgs object containing the
            data returned from the simulator</param>
        </member>
        <member name="P:OpenMetaverse.LandPatchReceivedEventArgs.Simulator">
            <summary>Simulator from that sent tha data</summary>
        </member>
        <member name="P:OpenMetaverse.LandPatchReceivedEventArgs.X">
            <summary>Sim coordinate of the patch</summary>
        </member>
        <member name="P:OpenMetaverse.LandPatchReceivedEventArgs.Y">
            <summary>Sim coordinate of the patch</summary>
        </member>
        <member name="P:OpenMetaverse.LandPatchReceivedEventArgs.PatchSize">
            <summary>Size of tha patch</summary>
        </member>
        <member name="P:OpenMetaverse.LandPatchReceivedEventArgs.HeightMap">
            <summary>Heightmap for the patch</summary>
        </member>
        <member name="T:OpenMetaverse.TextureRequestState">
            <summary>
            The current status of a texture request as it moves through the pipeline or final result of a texture request.
            </summary>
        </member>
        <member name="F:OpenMetaverse.TextureRequestState.Pending">
            <summary>The initial state given to a request. Requests in this state
            are waiting for an available slot in the pipeline</summary>
        </member>
        <member name="F:OpenMetaverse.TextureRequestState.Started">
            <summary>A request that has been added to the pipeline and the request packet
            has been sent to the simulator</summary>
        </member>
        <member name="F:OpenMetaverse.TextureRequestState.Progress">
            <summary>A request that has received one or more packets back from the simulator</summary>
        </member>
        <member name="F:OpenMetaverse.TextureRequestState.Finished">
            <summary>A request that has received all packets back from the simulator</summary>
        </member>
        <member name="F:OpenMetaverse.TextureRequestState.Timeout">
            <summary>A request that has taken longer than <seealso cref="F:OpenMetaverse.Settings.PIPELINE_REQUEST_TIMEOUT" />
            to download OR the initial packet containing the packet information was never received</summary>
        </member>
        <member name="F:OpenMetaverse.TextureRequestState.Aborted">
            <summary>The texture request was aborted by request of the agent</summary>
        </member>
        <member name="F:OpenMetaverse.TextureRequestState.NotFound">
            <summary>The simulator replied to the request that it was not able to find the requested texture</summary>
        </member>
        <member name="T:OpenMetaverse.TexturePipeline">
            <summary>
            Texture request download handler, allows a configurable number of download slots which manage multiple
            concurrent texture downloads from the <seealso cref="T:OpenMetaverse.Simulator" /></summary>
            <remarks>This class makes full use of the internal <seealso cref="!:TextureCache" />
            system for full texture downloads.</remarks>
        </member>
        <member name="M:OpenMetaverse.TexturePipeline.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Default constructor, Instantiates a new copy of the TexturePipeline class
            </summary>
            <param name="client">Reference to the instantiated <see cref="T:OpenMetaverse.GridClient" /> object</param>
        </member>
        <member name="T:OpenMetaverse.TexturePipeline.TaskInfo">
            <summary>
            A request task containing information and status of a request as it is processed through the <see cref="T:OpenMetaverse.TexturePipeline" /></summary>
        </member>
        <member name="F:OpenMetaverse.TexturePipeline.TaskInfo.State">
            <summary>The current <seealso cref="T:OpenMetaverse.TextureRequestState" /> which identifies the current status of the request</summary>
        </member>
        <member name="F:OpenMetaverse.TexturePipeline.TaskInfo.RequestID">
            <summary>The Unique Request ID, This is also the Asset ID of the texture being requested</summary>
        </member>
        <member name="F:OpenMetaverse.TexturePipeline.TaskInfo.RequestSlot">
            <summary>The slot this request is occupying in the threadpoolSlots array</summary>
        </member>
        <member name="F:OpenMetaverse.TexturePipeline.TaskInfo.Type">
            <summary>The ImageType of the request.</summary>
        </member>
        <member name="F:OpenMetaverse.TexturePipeline.TaskInfo.Callbacks">
            <summary>The callback to fire when the request is complete, will include
            the <seealso cref="T:OpenMetaverse.TextureRequestState" /> and the <see cref="T:OpenMetaverse.Assets.AssetTexture" />
            object containing the result data</summary>
        </member>
        <member name="F:OpenMetaverse.TexturePipeline.TaskInfo.ReportProgress">
            <summary>If true, indicates the callback will be fired whenever new data is returned from the simulator.
            This is used to progressively render textures as portions of the texture are received.</summary>
        </member>
        <member name="F:OpenMetaverse.TexturePipeline.TaskInfo.Transfer">
            <summary>An object that maintains the data of an request thats in-process.</summary>
        </member>
        <member name="F:OpenMetaverse.TexturePipeline._Transfers">
            <summary>A dictionary containing all pending and in-process transfer requests where the Key is both the RequestID
            and also the Asset Texture ID, and the value is an object containing the current state of the request and also
            the asset data as it is being re-assembled</summary>
        </member>
        <member name="F:OpenMetaverse.TexturePipeline._Client">
            <summary>Holds the reference to the <see cref="T:OpenMetaverse.GridClient" /> client object</summary>
        </member>
        <member name="F:OpenMetaverse.TexturePipeline.maxTextureRequests">
            <summary>Maximum concurrent texture requests allowed at a time</summary>
        </member>
        <member name="F:OpenMetaverse.TexturePipeline.resetEvents">
            <summary>An array of <see cref="T:System.Threading.AutoResetEvent" /> objects used to manage worker request threads</summary>
        </member>
        <member name="F:OpenMetaverse.TexturePipeline.threadpoolSlots">
            <summary>An array of worker slots which shows the availablity status of the slot</summary>
        </member>
        <member name="F:OpenMetaverse.TexturePipeline.downloadMaster">
            <summary>The primary thread which manages the requests.</summary>
        </member>
        <member name="F:OpenMetaverse.TexturePipeline._Running">
            <summary>true if the TexturePipeline is currently running</summary>
        </member>
        <member name="F:OpenMetaverse.TexturePipeline.lockerObject">
            <summary>A synchronization object used by the primary thread</summary>
        </member>
        <member name="F:OpenMetaverse.TexturePipeline.RefreshDownloadsTimer">
            <summary>A refresh timer used to increase the priority of stalled requests</summary>
        </member>
        <member name="P:OpenMetaverse.TexturePipeline.TransferCount">
            <summary>Current number of pending and in-process transfers</summary>
        </member>
        <member name="M:OpenMetaverse.TexturePipeline.Startup">
            <summary>
            Initialize callbacks required for the TexturePipeline to operate
            </summary>
        </member>
        <member name="M:OpenMetaverse.TexturePipeline.Shutdown">
            <summary>
            Shutdown the TexturePipeline and cleanup any callbacks or transfers
            </summary>
        </member>
        <member name="M:OpenMetaverse.TexturePipeline.RequestTexture(OpenMetaverse.UUID,OpenMetaverse.ImageType,System.Single,System.Int32,System.UInt32,OpenMetaverse.TextureDownloadCallback,System.Boolean)">
            <summary>
            Request a texture asset from the simulator using the <see cref="T:OpenMetaverse.TexturePipeline" /> system to
            manage the requests and re-assemble the image from the packets received from the simulator
            </summary>
            <param name="textureID">The <see cref="T:OpenMetaverse.UUID" /> of the texture asset to download</param>
            <param name="imageType">The <see cref="T:OpenMetaverse.ImageType" /> of the texture asset.
            Use <see cref="F:OpenMetaverse.ImageType.Normal" /> for most textures, or <see cref="F:OpenMetaverse.ImageType.Baked" /> for baked layer texture assets</param>
            <param name="priority">A float indicating the requested priority for the transfer. Higher priority values tell the simulator
            to prioritize the request before lower valued requests. An image already being transferred using the <see cref="T:OpenMetaverse.TexturePipeline" /> can have
            its priority changed by resending the request with the new priority value</param>
            <param name="discardLevel">Number of quality layers to discard.
            This controls the end marker of the data sent</param>
            <param name="packetStart">The packet number to begin the request at. A value of 0 begins the request
            from the start of the asset texture</param>
            <param name="callback">The <see cref="T:OpenMetaverse.TextureDownloadCallback" /> callback to fire when the image is retrieved. The callback
            will contain the result of the request and the texture asset data</param>
            <param name="progressive">If true, the callback will be fired for each chunk of the downloaded image.
            The callback asset parameter will contain all previously received chunks of the texture asset starting
            from the beginning of the request</param>
        </member>
        <member name="M:OpenMetaverse.TexturePipeline.RequestImage(OpenMetaverse.UUID,OpenMetaverse.ImageType,System.Single,System.Int32,System.UInt32)">
            <summary>
            Sends the actual request packet to the simulator
            </summary>
            <param name="imageID">The image to download</param>
            <param name="type">Type of the image to download, either a baked
            avatar texture or a normal texture</param>
            <param name="priority">Priority level of the download. Default is
            <c>1,013,000.0f</c></param>
            <param name="discardLevel">Number of quality layers to discard.
            This controls the end marker of the data sent</param>
            <param name="packetNum">Packet number to start the download at.
            This controls the start marker of the data sent</param>
            <remarks>Sending a priority of 0 and a discardlevel of -1 aborts
            download</remarks>
        </member>
        <member name="M:OpenMetaverse.TexturePipeline.AbortTextureRequest(OpenMetaverse.UUID)">
            <summary>
            Cancel a pending or in process texture request
            </summary>
            <param name="textureID">The texture assets unique ID</param>
        </member>
        <member name="M:OpenMetaverse.TexturePipeline.DownloadThread">
            <summary>
            Master Download Thread, Queues up downloads in the threadpool
            </summary>
        </member>
        <member name="M:OpenMetaverse.TexturePipeline.TextureRequestDoWork(System.Object)">
            <summary>
            The worker thread that sends the request and handles timeouts
            </summary>
            <param name="threadContext">A <see cref="T:OpenMetaverse.TexturePipeline.TaskInfo" /> object containing the request details</param>
        </member>
        <member name="M:OpenMetaverse.TexturePipeline.ImageNotInDatabaseHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>
            Handle responses from the simulator that tell us a texture we have requested is unable to be located
            or no longer exists. This will remove the request from the pipeline and free up a slot if one is in use
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.TexturePipeline.ImagePacketHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>
            Handles the remaining Image data that did not fit in the initial ImageData packet
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="M:OpenMetaverse.TexturePipeline.ImageDataHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>
            Handle the initial ImageDataPacket sent from the simulator
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The EventArgs object containing the packet data</param>
        </member>
        <member name="T:ThreadUtil">
            <summary>
            </summary>
        </member>
        <member name="T:ThreadUtil.DelegateWrapper">
            <summary>
            Delegate to wrap another delegate and its arguments
            </summary>
            <param name="d">
            </param>
            <param name="args">
            </param>
        </member>
        <member name="F:ThreadUtil.wrapperInstance">
            <summary>
            An instance of DelegateWrapper which calls InvokeWrappedDelegate,
            which in turn calls the DynamicInvoke method of the wrapped
            delegate
            </summary>
        </member>
        <member name="F:ThreadUtil.callback">
            <summary>
            Callback used to call EndInvoke on the asynchronously
            invoked DelegateWrapper
            </summary>
        </member>
        <member name="M:ThreadUtil.FireAndForget(System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate with the specified arguments
            asynchronously on a thread pool thread
            </summary>
            <param name="d">
            </param>
            <param name="args">
            </param>
        </member>
        <member name="M:ThreadUtil.InvokeWrappedDelegate(System.Delegate,System.Object[])">
            <summary>
            Invokes the wrapped delegate synchronously
            </summary>
            <param name="d">
            </param>
            <param name="args">
            </param>
        </member>
        <member name="M:ThreadUtil.EndWrapperInvoke(System.IAsyncResult)">
            <summary>
            Calls EndInvoke on the wrapper and Close on the resulting WaitHandle
            to prevent resource leaks
            </summary>
            <param name="ar">
            </param>
        </member>
        <member name="T:OpenMetaverse.UDPBase">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.UDPBase.#ctor(System.Int32)">
            <summary>
            Initialize the UDP packet handler in server mode
            </summary>
            <param name="port">Port to listening for incoming UDP packets on</param>
        </member>
        <member name="M:OpenMetaverse.UDPBase.#ctor(System.Net.IPEndPoint)">
            <summary>
            Initialize the UDP packet handler in client mode
            </summary>
            <param name="endPoint">Remote UDP server to connect to</param>
        </member>
        <member name="P:OpenMetaverse.UDPBase.IsRunning">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.UDPBase.Start">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.UDPBase.Stop">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.PacketFrequency">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.PacketFrequency.Low">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.PacketFrequency.Medium">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.PacketFrequency.High">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.Packets.MalformedDataException">
            <summary>
            Thrown when a packet could not be successfully deserialized
            </summary>
        </member>
        <member name="M:OpenMetaverse.Packets.MalformedDataException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenMetaverse.Packets.MalformedDataException.#ctor(System.String)">
            <summary>
            Constructor that takes an additional error message
            </summary>
            <param name="Message">An error message to attach to this exception</param>
        </member>
        <member name="T:OpenMetaverse.Packets.Header">
            <summary>
            The header of a message template packet. Holds packet flags, sequence
            number, packet ID, and any ACKs that will be appended at the end of
            the packet
            </summary>
        </member>
        <member name="M:OpenMetaverse.Packets.Header.AcksToBytes(System.Byte[],System.Int32@)">
            <summary>
            Convert the AckList to a byte array, used for packet serializing
            </summary>
            <param name="bytes">Reference to the target byte array</param>
            <param name="i">Beginning position to start writing to in the byte
            array, will be updated with the ending position of the ACK list</param>
        </member>
        <member name="M:OpenMetaverse.Packets.Header.BuildHeader(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            </summary>
            <param name="bytes">
            </param>
            <param name="pos">
            </param>
            <param name="packetEnd">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Packets.Header.CreateAckList(OpenMetaverse.Packets.Header@,System.Byte[],System.Int32@)">
            <summary>
            </summary>
            <param name="header">
            </param>
            <param name="bytes">
            </param>
            <param name="packetEnd">
            </param>
        </member>
        <member name="T:OpenMetaverse.Packets.PacketBlock">
            <summary>
            A block of data in a packet. Packets are composed of one or more blocks,
            each block containing one or more fields
            </summary>
        </member>
        <member name="P:OpenMetaverse.Packets.PacketBlock.Length">
            <summary>Current length of the data in this packet</summary>
        </member>
        <member name="M:OpenMetaverse.Packets.PacketBlock.FromBytes(System.Byte[],System.Int32@)">
            <summary>
            Create a block from a byte array
            </summary>
            <param name="bytes">Byte array containing the serialized block</param>
            <param name="i">Starting position of the block in the byte array.
            This will point to the data after the end of the block when the
            call returns</param>
        </member>
        <member name="M:OpenMetaverse.Packets.PacketBlock.ToBytes(System.Byte[],System.Int32@)">
            <summary>
            Serialize this block into a byte array
            </summary>
            <param name="bytes">Byte array to serialize this block into</param>
            <param name="i">Starting position in the byte array to serialize to.
            This will point to the position directly after the end of the
            serialized block when the call returns</param>
        </member>
        <member name="F:OpenMetaverse.Packets.PacketType.Default">
            <summary>A generic value, not an actual packet type</summary>
        </member>
        <member name="T:OpenMetaverse.Packets.TestMessagePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TestMessagePacket.TestBlock1Block">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TestMessagePacket.NeighborBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UseCircuitCodePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UseCircuitCodePacket.CircuitCodeBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TelehubInfoPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TelehubInfoPacket.TelehubBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TelehubInfoPacket.SpawnPointBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EconomyDataRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EconomyDataPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EconomyDataPacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPickerRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPickerRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPickerRequestPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPickerReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPickerReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPickerReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PlacesQueryPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PlacesQueryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PlacesQueryPacket.TransactionDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PlacesQueryPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PlacesReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PlacesReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PlacesReplyPacket.TransactionDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PlacesReplyPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirFindQueryPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirFindQueryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirFindQueryPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirPlacesQueryPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirPlacesQueryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirPlacesQueryPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirPlacesReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirPlacesReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirPlacesReplyPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirPlacesReplyPacket.QueryRepliesBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirPlacesReplyPacket.StatusDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirPeopleReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirPeopleReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirPeopleReplyPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirPeopleReplyPacket.QueryRepliesBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirEventsReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirEventsReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirEventsReplyPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirEventsReplyPacket.QueryRepliesBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirEventsReplyPacket.StatusDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirGroupsReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirGroupsReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirGroupsReplyPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirGroupsReplyPacket.QueryRepliesBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirClassifiedQueryPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirClassifiedQueryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirClassifiedQueryPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirClassifiedReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirClassifiedReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirClassifiedReplyPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirClassifiedReplyPacket.QueryRepliesBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirClassifiedReplyPacket.StatusDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarClassifiedReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarClassifiedReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarClassifiedReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedInfoRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedInfoRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedInfoRequestPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedInfoReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedInfoReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedInfoReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedInfoUpdatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedInfoUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedInfoUpdatePacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedDeletePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedDeletePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedDeletePacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedGodDeletePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedGodDeletePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ClassifiedGodDeletePacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirLandQueryPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirLandQueryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirLandQueryPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirLandReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirLandReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirLandReplyPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirLandReplyPacket.QueryRepliesBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirPopularQueryPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirPopularQueryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirPopularQueryPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirPopularReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirPopularReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirPopularReplyPacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DirPopularReplyPacket.QueryRepliesBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelInfoRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelInfoRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelInfoRequestPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelInfoReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelInfoReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelInfoReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelObjectOwnersRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelObjectOwnersRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelObjectOwnersRequestPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelObjectOwnersReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelObjectOwnersReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupNoticesListRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupNoticesListRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupNoticesListRequestPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupNoticesListReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupNoticesListReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupNoticesListReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupNoticeRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupNoticeRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupNoticeRequestPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportRequestPacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportLocationRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportLocationRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportLocationRequestPacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportLocalPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportLocalPacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportLandmarkRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportLandmarkRequestPacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportProgressPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportProgressPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportProgressPacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportFinishPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportFinishPacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.StartLurePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.StartLurePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.StartLurePacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.StartLurePacket.TargetDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportLureRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportLureRequestPacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportCancelPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportCancelPacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportStartPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportStartPacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportFailedPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportFailedPacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TeleportFailedPacket.AlertInfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UndoPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UndoPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UndoPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RedoPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RedoPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RedoPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UndoLandPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UndoLandPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentPausePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentPausePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentResumePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentResumePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChatFromViewerPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChatFromViewerPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChatFromViewerPacket.ChatDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentThrottlePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentThrottlePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentThrottlePacket.ThrottleBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentFOVPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentFOVPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentFOVPacket.FOVBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentHeightWidthPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentHeightWidthPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentHeightWidthPacket.HeightWidthBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentSetAppearancePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentSetAppearancePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentSetAppearancePacket.WearableDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentSetAppearancePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentSetAppearancePacket.VisualParamBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentQuitCopyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentQuitCopyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentQuitCopyPacket.FuseBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ImageNotInDatabasePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ImageNotInDatabasePacket.ImageIDBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RebakeAvatarTexturesPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RebakeAvatarTexturesPacket.TextureDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SetAlwaysRunPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SetAlwaysRunPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDeletePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDeletePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDeletePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDuplicatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDuplicatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDuplicatePacket.SharedDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDuplicatePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDuplicateOnRayPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDuplicateOnRayPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDuplicateOnRayPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectScalePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectScalePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectScalePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectRotationPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectRotationPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectRotationPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectFlagUpdatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectFlagUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectClickActionPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectClickActionPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectClickActionPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectImagePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectImagePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectImagePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectMaterialPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectMaterialPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectMaterialPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectShapePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectShapePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectShapePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectExtraParamsPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectExtraParamsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectExtraParamsPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectOwnerPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectOwnerPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectOwnerPacket.HeaderDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectOwnerPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectGroupPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectGroupPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectGroupPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectBuyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectBuyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectBuyPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.BuyObjectInventoryPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.BuyObjectInventoryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.BuyObjectInventoryPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DerezContainerPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DerezContainerPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectPermissionsPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectPermissionsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectPermissionsPacket.HeaderDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectPermissionsPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSaleInfoPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSaleInfoPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSaleInfoPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectNamePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectNamePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectNamePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDescriptionPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDescriptionPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDescriptionPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectCategoryPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectCategoryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectCategoryPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSelectPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSelectPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSelectPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDeselectPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDeselectPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDeselectPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectAttachPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectAttachPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectAttachPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDetachPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDetachPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDetachPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDropPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDropPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDropPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectLinkPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectLinkPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectLinkPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDelinkPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDelinkPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDelinkPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectGrabPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectGrabPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectGrabPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectGrabPacket.SurfaceInfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectGrabUpdatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectGrabUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectGrabUpdatePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectGrabUpdatePacket.SurfaceInfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDeGrabPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDeGrabPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDeGrabPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectDeGrabPacket.SurfaceInfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSpinStartPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSpinStartPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSpinStartPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSpinUpdatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSpinUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSpinUpdatePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSpinStopPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSpinStopPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectSpinStopPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectExportSelectedPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectExportSelectedPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectExportSelectedPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ModifyLandPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ModifyLandPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ModifyLandPacket.ModifyBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ModifyLandPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ModifyLandPacket.ModifyBlockExtendedBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.VelocityInterpolateOnPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.VelocityInterpolateOnPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.VelocityInterpolateOffPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.VelocityInterpolateOffPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.StateSavePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.StateSavePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.StateSavePacket.DataBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ReportAutosaveCrashPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ReportAutosaveCrashPacket.AutosaveDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SimWideDeletesPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SimWideDeletesPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SimWideDeletesPacket.DataBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TrackAgentPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TrackAgentPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TrackAgentPacket.TargetDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerStatsPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerStatsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerStatsPacket.DownloadTotalsBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerStatsPacket.NetStatsBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerStatsPacket.FailStatsBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerStatsPacket.MiscStatsBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptAnswerYesPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptAnswerYesPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptAnswerYesPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UserReportPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UserReportPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UserReportPacket.ReportDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AlertMessagePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AlertMessagePacket.AlertDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AlertMessagePacket.AlertInfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentAlertMessagePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentAlertMessagePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentAlertMessagePacket.AlertDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MeanCollisionAlertPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MeanCollisionAlertPacket.MeanCollisionBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerFrozenMessagePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerFrozenMessagePacket.FrozenDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.HealthMessagePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.HealthMessagePacket.HealthDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChatFromSimulatorPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChatFromSimulatorPacket.ChatDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SimStatsPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SimStatsPacket.RegionBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SimStatsPacket.StatBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SimStatsPacket.PidStatBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RequestRegionInfoPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RequestRegionInfoPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RegionInfoPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RegionInfoPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RegionInfoPacket.RegionInfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RegionInfoPacket.RegionInfo2Block">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GodUpdateRegionInfoPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GodUpdateRegionInfoPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GodUpdateRegionInfoPacket.RegionInfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RegionHandshakePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RegionHandshakePacket.RegionInfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RegionHandshakePacket.RegionInfo2Block">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RegionHandshakePacket.RegionInfo3Block">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RegionHandshakeReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RegionHandshakeReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RegionHandshakeReplyPacket.RegionInfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SimulatorViewerTimeMessagePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SimulatorViewerTimeMessagePacket.TimeInfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EnableSimulatorPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EnableSimulatorPacket.SimulatorInfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DisableSimulatorPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TransferRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TransferRequestPacket.TransferInfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TransferInfoPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TransferInfoPacket.TransferInfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TransferAbortPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TransferAbortPacket.TransferInfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RequestXferPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RequestXferPacket.XferIDBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AbortXferPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AbortXferPacket.XferIDBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarAppearancePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarAppearancePacket.SenderBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarAppearancePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarAppearancePacket.VisualParamBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SetFollowCamPropertiesPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SetFollowCamPropertiesPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SetFollowCamPropertiesPacket.CameraPropertyBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ClearFollowCamPropertiesPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ClearFollowCamPropertiesPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RequestPayPricePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RequestPayPricePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PayPriceReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PayPriceReplyPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PayPriceReplyPacket.ButtonDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.KickUserPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.KickUserPacket.TargetBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.KickUserPacket.UserInfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GodKickUserPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GodKickUserPacket.UserInfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EjectUserPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EjectUserPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EjectUserPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.FreezeUserPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.FreezeUserPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.FreezeUserPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPropertiesRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPropertiesRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPropertiesReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPropertiesReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPropertiesReplyPacket.PropertiesDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarInterestsReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarInterestsReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarInterestsReplyPacket.PropertiesDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarGroupsReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarGroupsReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarGroupsReplyPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarGroupsReplyPacket.NewGroupDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPropertiesUpdatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPropertiesUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPropertiesUpdatePacket.PropertiesDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarInterestsUpdatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarInterestsUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarInterestsUpdatePacket.PropertiesDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarNotesReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarNotesReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarNotesReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarNotesUpdatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarNotesUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarNotesUpdatePacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPicksReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPicksReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarPicksReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EventInfoRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EventInfoRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EventInfoRequestPacket.EventDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EventInfoReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EventInfoReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EventInfoReplyPacket.EventDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EventNotificationAddRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EventNotificationAddRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EventNotificationAddRequestPacket.EventDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EventNotificationRemoveRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EventNotificationRemoveRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EventNotificationRemoveRequestPacket.EventDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EventGodDeletePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EventGodDeletePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EventGodDeletePacket.EventDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EventGodDeletePacket.QueryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PickInfoReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PickInfoReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PickInfoReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PickInfoUpdatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PickInfoUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PickInfoUpdatePacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PickDeletePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PickDeletePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PickDeletePacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PickGodDeletePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PickGodDeletePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PickGodDeletePacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptQuestionPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptQuestionPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptControlChangePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptControlChangePacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptDialogPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptDialogPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptDialogPacket.ButtonsBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptDialogReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptDialogReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptDialogReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ForceScriptControlReleasePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ForceScriptControlReleasePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RevokePermissionsPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RevokePermissionsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RevokePermissionsPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LoadURLPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LoadURLPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptTeleportRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptTeleportRequestPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelOverlayPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelOverlayPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelPropertiesRequestByIDPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelPropertiesRequestByIDPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelPropertiesRequestByIDPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelPropertiesUpdatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelPropertiesUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelPropertiesUpdatePacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelReturnObjectsPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelReturnObjectsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelReturnObjectsPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelReturnObjectsPacket.TaskIDsBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelReturnObjectsPacket.OwnerIDsBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelSetOtherCleanTimePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelSetOtherCleanTimePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelSetOtherCleanTimePacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDisableObjectsPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDisableObjectsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDisableObjectsPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDisableObjectsPacket.TaskIDsBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDisableObjectsPacket.OwnerIDsBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelSelectObjectsPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelSelectObjectsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelSelectObjectsPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelSelectObjectsPacket.ReturnIDsBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EstateCovenantRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EstateCovenantRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EstateCovenantReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EstateCovenantReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ForceObjectSelectPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ForceObjectSelectPacket.HeaderBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ForceObjectSelectPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelBuyPassPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelBuyPassPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelBuyPassPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDeedToGroupPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDeedToGroupPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDeedToGroupPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelReclaimPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelReclaimPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelReclaimPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelClaimPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelClaimPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelClaimPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelClaimPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelJoinPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelJoinPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelJoinPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDividePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDividePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDividePacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelReleasePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelReleasePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelReleasePacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelBuyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelBuyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelBuyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelBuyPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelGodForceOwnerPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelGodForceOwnerPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelGodForceOwnerPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelAccessListRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelAccessListRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelAccessListRequestPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelAccessListReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelAccessListReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelAccessListReplyPacket.ListBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelAccessListUpdatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelAccessListUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelAccessListUpdatePacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelAccessListUpdatePacket.ListBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDwellRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDwellRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDwellRequestPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDwellReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDwellReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelDwellReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelGodMarkAsContentPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelGodMarkAsContentPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelGodMarkAsContentPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerStartAuctionPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerStartAuctionPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerStartAuctionPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UUIDNameRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UUIDNameRequestPacket.UUIDNameBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UUIDNameReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UUIDNameReplyPacket.UUIDNameBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UUIDGroupNameRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UUIDGroupNameRequestPacket.UUIDNameBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UUIDGroupNameReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UUIDGroupNameReplyPacket.UUIDNameBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentDyingPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentDyingPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentUnknownPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentUnknownPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GetScriptRunningPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GetScriptRunningPacket.ScriptBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptRunningReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptRunningReplyPacket.ScriptBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SetScriptRunningPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SetScriptRunningPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SetScriptRunningPacket.ScriptBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptResetPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptResetPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptResetPacket.ScriptBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptSensorRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptSensorRequestPacket.RequesterBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptSensorReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptSensorReplyPacket.RequesterBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ScriptSensorReplyPacket.SensedDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CompleteAgentMovementPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CompleteAgentMovementPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentMovementCompletePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentMovementCompletePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentMovementCompletePacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentMovementCompletePacket.SimDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LogoutRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LogoutRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LogoutReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LogoutReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LogoutReplyPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ImprovedInstantMessagePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ImprovedInstantMessagePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ImprovedInstantMessagePacket.MessageBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RetrieveInstantMessagesPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RetrieveInstantMessagesPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.FindAgentPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.FindAgentPacket.AgentBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.FindAgentPacket.LocationBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RequestGodlikePowersPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RequestGodlikePowersPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RequestGodlikePowersPacket.RequestBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GrantGodlikePowersPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GrantGodlikePowersPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GrantGodlikePowersPacket.GrantDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GodlikeMessagePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GodlikeMessagePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GodlikeMessagePacket.MethodDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GodlikeMessagePacket.ParamListBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EstateOwnerMessagePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EstateOwnerMessagePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EstateOwnerMessagePacket.MethodDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EstateOwnerMessagePacket.ParamListBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GenericMessagePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GenericMessagePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GenericMessagePacket.MethodDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GenericMessagePacket.ParamListBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MuteListRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MuteListRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MuteListRequestPacket.MuteDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateMuteListEntryPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateMuteListEntryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateMuteListEntryPacket.MuteDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveMuteListEntryPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveMuteListEntryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveMuteListEntryPacket.MuteDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CopyInventoryFromNotecardPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CopyInventoryFromNotecardPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CopyInventoryFromNotecardPacket.NotecardDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CopyInventoryFromNotecardPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateInventoryItemPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateInventoryItemPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateInventoryItemPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateCreateInventoryItemPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateCreateInventoryItemPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateCreateInventoryItemPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MoveInventoryItemPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MoveInventoryItemPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MoveInventoryItemPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CopyInventoryItemPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CopyInventoryItemPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CopyInventoryItemPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveInventoryItemPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveInventoryItemPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveInventoryItemPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChangeInventoryItemFlagsPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChangeInventoryItemFlagsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChangeInventoryItemFlagsPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SaveAssetIntoInventoryPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SaveAssetIntoInventoryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SaveAssetIntoInventoryPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CreateInventoryFolderPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CreateInventoryFolderPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CreateInventoryFolderPacket.FolderDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateInventoryFolderPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateInventoryFolderPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateInventoryFolderPacket.FolderDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MoveInventoryFolderPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MoveInventoryFolderPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MoveInventoryFolderPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveInventoryFolderPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveInventoryFolderPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveInventoryFolderPacket.FolderDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.FetchInventoryDescendentsPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.FetchInventoryDescendentsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.FetchInventoryDescendentsPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.InventoryDescendentsPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.InventoryDescendentsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.InventoryDescendentsPacket.FolderDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.InventoryDescendentsPacket.ItemDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.FetchInventoryPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.FetchInventoryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.FetchInventoryPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.FetchInventoryReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.FetchInventoryReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.FetchInventoryReplyPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.BulkUpdateInventoryPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.BulkUpdateInventoryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.BulkUpdateInventoryPacket.FolderDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.BulkUpdateInventoryPacket.ItemDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveInventoryObjectsPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveInventoryObjectsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveInventoryObjectsPacket.FolderDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveInventoryObjectsPacket.ItemDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PurgeInventoryDescendentsPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PurgeInventoryDescendentsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PurgeInventoryDescendentsPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateTaskInventoryPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateTaskInventoryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateTaskInventoryPacket.UpdateDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateTaskInventoryPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveTaskInventoryPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveTaskInventoryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RemoveTaskInventoryPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MoveTaskInventoryPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MoveTaskInventoryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MoveTaskInventoryPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RequestTaskInventoryPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RequestTaskInventoryPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RequestTaskInventoryPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ReplyTaskInventoryPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ReplyTaskInventoryPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DeRezObjectPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DeRezObjectPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DeRezObjectPacket.AgentBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DeRezObjectPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DeRezAckPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DeRezAckPacket.TransactionDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RezObjectPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RezObjectPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RezObjectPacket.RezDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RezObjectPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RezObjectFromNotecardPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RezObjectFromNotecardPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RezObjectFromNotecardPacket.RezDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RezObjectFromNotecardPacket.NotecardDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RezObjectFromNotecardPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AcceptFriendshipPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AcceptFriendshipPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AcceptFriendshipPacket.TransactionBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AcceptFriendshipPacket.FolderDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DeclineFriendshipPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DeclineFriendshipPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DeclineFriendshipPacket.TransactionBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TerminateFriendshipPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TerminateFriendshipPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TerminateFriendshipPacket.ExBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.OfferCallingCardPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.OfferCallingCardPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.OfferCallingCardPacket.AgentBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AcceptCallingCardPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AcceptCallingCardPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AcceptCallingCardPacket.TransactionBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AcceptCallingCardPacket.FolderDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DeclineCallingCardPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DeclineCallingCardPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DeclineCallingCardPacket.TransactionBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RezScriptPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RezScriptPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RezScriptPacket.UpdateBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RezScriptPacket.InventoryBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CreateInventoryItemPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CreateInventoryItemPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CreateInventoryItemPacket.InventoryBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CreateLandmarkForEventPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CreateLandmarkForEventPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CreateLandmarkForEventPacket.EventDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CreateLandmarkForEventPacket.InventoryBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RegionHandleRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RegionHandleRequestPacket.RequestBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RegionIDAndHandleReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RegionIDAndHandleReplyPacket.ReplyBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MoneyTransferRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MoneyTransferRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MoneyTransferRequestPacket.MoneyDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MoneyBalanceRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MoneyBalanceRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MoneyBalanceRequestPacket.MoneyDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MoneyBalanceReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MoneyBalanceReplyPacket.MoneyDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RoutedMoneyBalanceReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RoutedMoneyBalanceReplyPacket.TargetBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RoutedMoneyBalanceReplyPacket.MoneyDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ActivateGesturesPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ActivateGesturesPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ActivateGesturesPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DeactivateGesturesPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DeactivateGesturesPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DeactivateGesturesPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MuteListUpdatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MuteListUpdatePacket.MuteDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UseCachedMuteListPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UseCachedMuteListPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GrantUserRightsPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GrantUserRightsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GrantUserRightsPacket.RightsBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChangeUserRightsPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChangeUserRightsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChangeUserRightsPacket.RightsBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.OnlineNotificationPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.OnlineNotificationPacket.AgentBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.OfflineNotificationPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.OfflineNotificationPacket.AgentBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SetStartLocationRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SetStartLocationRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SetStartLocationRequestPacket.StartLocationDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AssetUploadRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AssetUploadRequestPacket.AssetBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AssetUploadCompletePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AssetUploadCompletePacket.AssetBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CreateGroupRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CreateGroupRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CreateGroupRequestPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CreateGroupReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CreateGroupReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CreateGroupReplyPacket.ReplyDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateGroupInfoPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateGroupInfoPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateGroupInfoPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleChangesPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleChangesPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleChangesPacket.RoleChangeBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.JoinGroupRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.JoinGroupRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.JoinGroupRequestPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.JoinGroupReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.JoinGroupReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.JoinGroupReplyPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EjectGroupMemberRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EjectGroupMemberRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EjectGroupMemberRequestPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EjectGroupMemberRequestPacket.EjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EjectGroupMemberReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EjectGroupMemberReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EjectGroupMemberReplyPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.EjectGroupMemberReplyPacket.EjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LeaveGroupRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LeaveGroupRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LeaveGroupRequestPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LeaveGroupReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LeaveGroupReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LeaveGroupReplyPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.InviteGroupRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.InviteGroupRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.InviteGroupRequestPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.InviteGroupRequestPacket.InviteDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupProfileRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupProfileRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupProfileRequestPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupProfileReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupProfileReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupProfileReplyPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountSummaryRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountSummaryRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountSummaryRequestPacket.MoneyDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountSummaryReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountSummaryReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountSummaryReplyPacket.MoneyDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountDetailsRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountDetailsRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountDetailsRequestPacket.MoneyDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountDetailsReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountDetailsReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountDetailsReplyPacket.MoneyDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountDetailsReplyPacket.HistoryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountTransactionsRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountTransactionsRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountTransactionsRequestPacket.MoneyDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountTransactionsReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountTransactionsReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountTransactionsReplyPacket.MoneyDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupAccountTransactionsReplyPacket.HistoryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupActiveProposalsRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupActiveProposalsRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupActiveProposalsRequestPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupActiveProposalsRequestPacket.TransactionDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupActiveProposalItemReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupActiveProposalItemReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupActiveProposalItemReplyPacket.TransactionDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupActiveProposalItemReplyPacket.ProposalDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupVoteHistoryRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupVoteHistoryRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupVoteHistoryRequestPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupVoteHistoryRequestPacket.TransactionDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupVoteHistoryItemReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupVoteHistoryItemReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupVoteHistoryItemReplyPacket.TransactionDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupVoteHistoryItemReplyPacket.HistoryItemDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupVoteHistoryItemReplyPacket.VoteItemBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.StartGroupProposalPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.StartGroupProposalPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.StartGroupProposalPacket.ProposalDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupProposalBallotPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupProposalBallotPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupProposalBallotPacket.ProposalDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupMembersRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupMembersRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupMembersRequestPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupMembersReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupMembersReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupMembersReplyPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupMembersReplyPacket.MemberDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ActivateGroupPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ActivateGroupPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SetGroupContributionPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SetGroupContributionPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SetGroupContributionPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SetGroupAcceptNoticesPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SetGroupAcceptNoticesPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SetGroupAcceptNoticesPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SetGroupAcceptNoticesPacket.NewDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleDataRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleDataRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleDataRequestPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleDataReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleDataReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleDataReplyPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleDataReplyPacket.RoleDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleMembersRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleMembersRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleMembersRequestPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleMembersReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleMembersReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleMembersReplyPacket.MemberDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupTitlesRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupTitlesRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupTitlesReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupTitlesReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupTitlesReplyPacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupTitleUpdatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupTitleUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleUpdatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupRoleUpdatePacket.RoleDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LiveHelpGroupRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LiveHelpGroupRequestPacket.RequestDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LiveHelpGroupReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LiveHelpGroupReplyPacket.ReplyDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentWearablesRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentWearablesRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentWearablesUpdatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentWearablesUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentWearablesUpdatePacket.WearableDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentIsNowWearingPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentIsNowWearingPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentIsNowWearingPacket.WearableDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentCachedTexturePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentCachedTexturePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentCachedTexturePacket.WearableDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentCachedTextureResponsePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentCachedTextureResponsePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentCachedTextureResponsePacket.WearableDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentDataUpdateRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentDataUpdateRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentDataUpdatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentDataUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupDataUpdatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.GroupDataUpdatePacket.AgentGroupDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentGroupDataUpdatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentGroupDataUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentGroupDataUpdatePacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentDropGroupPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentDropGroupPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RezSingleAttachmentFromInvPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RezSingleAttachmentFromInvPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RezSingleAttachmentFromInvPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RezMultipleAttachmentsFromInvPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RezMultipleAttachmentsFromInvPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RezMultipleAttachmentsFromInvPacket.HeaderDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RezMultipleAttachmentsFromInvPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DetachAttachmentIntoInvPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.DetachAttachmentIntoInvPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CreateNewOutfitAttachmentsPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CreateNewOutfitAttachmentsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CreateNewOutfitAttachmentsPacket.HeaderDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CreateNewOutfitAttachmentsPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UserInfoRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UserInfoRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UserInfoReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UserInfoReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UserInfoReplyPacket.UserDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateUserInfoPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateUserInfoPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.UpdateUserInfoPacket.UserDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.InitiateDownloadPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.InitiateDownloadPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.InitiateDownloadPacket.FileDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MapLayerRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MapLayerRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MapLayerReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MapLayerReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MapLayerReplyPacket.LayerDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MapBlockRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MapBlockRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MapBlockRequestPacket.PositionDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MapNameRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MapNameRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MapNameRequestPacket.NameDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MapBlockReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MapBlockReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MapBlockReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MapItemRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MapItemRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MapItemRequestPacket.RequestDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MapItemReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MapItemReplyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MapItemReplyPacket.RequestDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MapItemReplyPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SendPostcardPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SendPostcardPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelMediaCommandMessagePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelMediaCommandMessagePacket.CommandBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelMediaUpdatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelMediaUpdatePacket.DataBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelMediaUpdatePacket.DataBlockExtendedBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LandStatRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LandStatRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LandStatRequestPacket.RequestDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LandStatReplyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LandStatReplyPacket.RequestDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LandStatReplyPacket.ReportDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ErrorPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ErrorPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ErrorPacket.DataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectIncludeInSearchPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectIncludeInSearchPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectIncludeInSearchPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RezRestoreToWorldPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RezRestoreToWorldPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RezRestoreToWorldPacket.InventoryDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LinkInventoryItemPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LinkInventoryItemPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LinkInventoryItemPacket.InventoryBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PacketAckPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PacketAckPacket.PacketsBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.OpenCircuitPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.OpenCircuitPacket.CircuitInfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CloseCircuitPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectAddPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectAddPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectAddPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MultipleObjectUpdatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MultipleObjectUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.MultipleObjectUpdatePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RequestMultipleObjectsPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RequestMultipleObjectsPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RequestMultipleObjectsPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectPositionPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectPositionPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectPositionPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RequestObjectPropertiesFamilyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RequestObjectPropertiesFamilyPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RequestObjectPropertiesFamilyPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CoarseLocationUpdatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CoarseLocationUpdatePacket.LocationBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CoarseLocationUpdatePacket.IndexBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CoarseLocationUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CrossedRegionPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CrossedRegionPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CrossedRegionPacket.RegionDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CrossedRegionPacket.InfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ConfirmEnableSimulatorPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ConfirmEnableSimulatorPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectPropertiesPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectPropertiesPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectPropertiesFamilyPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectPropertiesFamilyPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelPropertiesRequestPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelPropertiesRequestPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelPropertiesRequestPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AttachedSoundPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AttachedSoundPacket.DataBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AttachedSoundGainChangePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AttachedSoundGainChangePacket.DataBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PreloadSoundPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.PreloadSoundPacket.DataBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerEffectPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerEffectPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ViewerEffectPacket.EffectBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.StartPingCheckPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.StartPingCheckPacket.PingIDBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CompletePingCheckPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CompletePingCheckPacket.PingIDBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentUpdatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentAnimationPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentAnimationPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentAnimationPacket.AnimationListBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentAnimationPacket.PhysicalAvatarEventListBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentRequestSitPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentRequestSitPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentRequestSitPacket.TargetObjectBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentSitPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AgentSitPacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RequestImagePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RequestImagePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.RequestImagePacket.RequestImageBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ImageDataPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ImageDataPacket.ImageIDBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ImageDataPacket.ImageDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ImagePacketPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ImagePacketPacket.ImageIDBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ImagePacketPacket.ImageDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LayerDataPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LayerDataPacket.LayerIDBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.LayerDataPacket.LayerDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectUpdatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectUpdatePacket.RegionDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectUpdatePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectUpdateCompressedPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectUpdateCompressedPacket.RegionDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectUpdateCompressedPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectUpdateCachedPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectUpdateCachedPacket.RegionDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ObjectUpdateCachedPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ImprovedTerseObjectUpdatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ImprovedTerseObjectUpdatePacket.RegionDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ImprovedTerseObjectUpdatePacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.KillObjectPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.KillObjectPacket.ObjectDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TransferPacketPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.TransferPacketPacket.TransferDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SendXferPacketPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SendXferPacketPacket.XferIDBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SendXferPacketPacket.DataPacketBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ConfirmXferPacketPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ConfirmXferPacketPacket.XferIDBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarAnimationPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarAnimationPacket.SenderBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarAnimationPacket.AnimationListBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarAnimationPacket.AnimationSourceListBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarAnimationPacket.PhysicalAvatarEventListBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarSitResponsePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarSitResponsePacket.SitObjectBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.AvatarSitResponsePacket.SitTransformBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CameraConstraintPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.CameraConstraintPacket.CameraCollidePlaneBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelPropertiesPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelPropertiesPacket.ParcelDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ParcelPropertiesPacket.AgeVerificationBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentUpdatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentUpdatePacket.GroupDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentUpdatePacket.AnimationDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentUpdatePacket.GranterBlockBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentUpdatePacket.NVPairDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentUpdatePacket.VisualParamBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentUpdatePacket.AgentAccessBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentUpdatePacket.AgentInfoBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentAlivePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentAlivePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentPositionUpdatePacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.ChildAgentPositionUpdatePacket.AgentDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SoundTriggerPacket">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.Packets.SoundTriggerPacket.SoundDataBlock">
            <exclude />
        </member>
        <member name="T:OpenMetaverse.VisualColorOperation">
            <summary>
            Operation to apply when applying color to texture
            </summary>
        </member>
        <member name="T:OpenMetaverse.VisualColorParam">
            <summary>
            Information needed to translate visual param value to RGBA color
            </summary>
        </member>
        <member name="M:OpenMetaverse.VisualColorParam.#ctor(OpenMetaverse.VisualColorOperation,OpenMetaverse.Color4[])">
            <summary>
            Construct VisualColorParam
            </summary>
            <param name="operation">Operation to apply when applying color to texture</param>
            <param name="colors">Colors</param>
        </member>
        <member name="T:OpenMetaverse.VisualAlphaParam">
            <summary>
            Represents alpha blending and bump infor for a visual parameter
            such as sleive length
            </summary>
        </member>
        <member name="M:OpenMetaverse.VisualAlphaParam.#ctor(System.Single,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create new alhpa information for a visual param
            </summary>
            <param name="domain">Stregth of the alpha to apply</param>
            <param name="tgaFile">File containing the alpha channel</param>
            <param name="skipIfZero">Skip blending if parameter value is 0</param>
            <param name="multiplyBlend">Use miltiply insted of alpha blending</param>
        </member>
        <member name="F:OpenMetaverse.VisualAlphaParam.Domain">
            <summary>Stregth of the alpha to apply</summary>
        </member>
        <member name="F:OpenMetaverse.VisualAlphaParam.TGAFile">
            <summary>File containing the alpha channel</summary>
        </member>
        <member name="F:OpenMetaverse.VisualAlphaParam.SkipIfZero">
            <summary>Skip blending if parameter value is 0</summary>
        </member>
        <member name="F:OpenMetaverse.VisualAlphaParam.MultiplyBlend">
            <summary>Use miltiply insted of alpha blending</summary>
        </member>
        <member name="T:OpenMetaverse.VisualParam">
            <summary>
            A single visual characteristic of an avatar mesh, such as eyebrow height
            </summary>
        </member>
        <member name="M:OpenMetaverse.VisualParam.#ctor(System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Boolean,System.Int32[],System.Nullable{OpenMetaverse.VisualAlphaParam},System.Nullable{OpenMetaverse.VisualColorParam})">
            <summary>
            Set all the values through the constructor
            </summary>
            <param name="paramID">Index of this visual param</param>
            <param name="name">Internal name</param>
            <param name="group">
            </param>
            <param name="wearable">
            </param>
            <param name="label">Displayable label of this characteristic</param>
            <param name="labelMin">Displayable label for the minimum value of this characteristic</param>
            <param name="labelMax">Displayable label for the maximum value of this characteristic</param>
            <param name="def">Default value</param>
            <param name="min">Minimum value</param>
            <param name="max">Maximum value</param>
            <param name="isBumpAttribute">Is this param used for creation of bump layer?</param>
            <param name="drivers">Array of param IDs that are drivers for this parameter</param>
            <param name="alpha">Alpha blending/bump info</param>
            <param name="colorParams">Color information</param>
        </member>
        <member name="F:OpenMetaverse.VisualParam.ParamID">
            <summary>Index of this visual param</summary>
        </member>
        <member name="F:OpenMetaverse.VisualParam.Name">
            <summary>Internal name</summary>
        </member>
        <member name="F:OpenMetaverse.VisualParam.Group">
            <summary>Group ID this parameter belongs to</summary>
        </member>
        <member name="F:OpenMetaverse.VisualParam.Wearable">
            <summary>Name of the wearable this parameter belongs to</summary>
        </member>
        <member name="F:OpenMetaverse.VisualParam.Label">
            <summary>Displayable label of this characteristic</summary>
        </member>
        <member name="F:OpenMetaverse.VisualParam.LabelMin">
            <summary>Displayable label for the minimum value of this characteristic</summary>
        </member>
        <member name="F:OpenMetaverse.VisualParam.LabelMax">
            <summary>Displayable label for the maximum value of this characteristic</summary>
        </member>
        <member name="F:OpenMetaverse.VisualParam.DefaultValue">
            <summary>Default value</summary>
        </member>
        <member name="F:OpenMetaverse.VisualParam.MinValue">
            <summary>Minimum value</summary>
        </member>
        <member name="F:OpenMetaverse.VisualParam.MaxValue">
            <summary>Maximum value</summary>
        </member>
        <member name="F:OpenMetaverse.VisualParam.IsBumpAttribute">
            <summary>Is this param used for creation of bump layer?</summary>
        </member>
        <member name="F:OpenMetaverse.VisualParam.AlphaParams">
            <summary>Alpha blending/bump info</summary>
        </member>
        <member name="F:OpenMetaverse.VisualParam.ColorParams">
            <summary>Color information</summary>
        </member>
        <member name="F:OpenMetaverse.VisualParam.Drivers">
            <summary>Array of param IDs that are drivers for this parameter</summary>
        </member>
        <member name="T:OpenMetaverse.VisualParams">
            <summary>
            Holds the Params array of all the avatar appearance parameters
            </summary>
        </member>
        <member name="T:OpenMetaverse.Assets.Asset">
            <summary>
            Base class for all Asset types
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.Asset.#ctor">
            <summary>
            Construct a new Asset object
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.Asset.#ctor(OpenMetaverse.UUID,System.Byte[])">
            <summary>
            Construct a new Asset object
            </summary>
            <param name="assetID">A unique <see cref="T:OpenMetaverse.UUID" /> specific to this asset</param>
            <param name="assetData">A byte array containing the raw asset data</param>
        </member>
        <member name="F:OpenMetaverse.Assets.Asset.AssetData">
            <summary>A byte array containing the raw asset data</summary>
        </member>
        <member name="F:OpenMetaverse.Assets.Asset.Temporary">
            <summary>True if the asset it only stored on the server temporarily</summary>
        </member>
        <member name="F:OpenMetaverse.Assets.Asset._AssetID">
            <summary>A unique ID</summary>
        </member>
        <member name="P:OpenMetaverse.Assets.Asset.AssetID">
            <summary>The assets unique ID</summary>
        </member>
        <member name="P:OpenMetaverse.Assets.Asset.AssetType">
            <summary>
            The "type" of asset, Notecard, Animation, etc
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.Asset.Encode">
            <summary>
            Regenerates the <code>AssetData</code> byte array from the properties
            of the derived class.
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.Asset.Decode">
            <summary>
            Decodes the AssetData, placing it in appropriate properties of the derived
            class.
            </summary>
            <returns>True if the asset decoding succeeded, otherwise false</returns>
        </member>
        <member name="T:OpenMetaverse.Assets.ArchiveConstants">
            <summary>
            Constants for the archiving module
            </summary>
        </member>
        <member name="F:OpenMetaverse.Assets.ArchiveConstants.CONTROL_FILE_PATH">
            <summary>
            The location of the archive control file
            </summary>
        </member>
        <member name="F:OpenMetaverse.Assets.ArchiveConstants.ASSETS_PATH">
            <summary>
            Path for the assets held in an archive
            </summary>
        </member>
        <member name="F:OpenMetaverse.Assets.ArchiveConstants.OBJECTS_PATH">
            <summary>
            Path for the prims file
            </summary>
        </member>
        <member name="F:OpenMetaverse.Assets.ArchiveConstants.TERRAINS_PATH">
            <summary>
            Path for terrains.  Technically these may be assets, but I think it's quite nice to split them out.
            </summary>
        </member>
        <member name="F:OpenMetaverse.Assets.ArchiveConstants.SETTINGS_PATH">
            <summary>
            Path for region settings.
            </summary>
        </member>
        <member name="F:OpenMetaverse.Assets.ArchiveConstants.ASSET_EXTENSION_SEPARATOR">
            <summary>
            The character the separates the uuid from extension information in an archived asset filename
            </summary>
        </member>
        <member name="F:OpenMetaverse.Assets.ArchiveConstants.ASSET_TYPE_TO_EXTENSION">
            <summary>
            Extensions used for asset types in the archive
            </summary>
        </member>
        <member name="T:OpenMetaverse.Assets.AssetsArchiver">
            <summary>
            Archives assets
            </summary>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetsArchiver.m_assets">
            <summary>
            Archive assets
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetsArchiver.Archive(OpenMetaverse.Assets.TarArchiveWriter)">
            <summary>
            Archive the assets given to this archiver to the given archive.
            </summary>
            <param name="archive">
            </param>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetsArchiver.WriteMetadata(OpenMetaverse.Assets.TarArchiveWriter)">
            <summary>
            Write an assets metadata file to the given archive
            </summary>
            <param name="archive">
            </param>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetsArchiver.WriteData(OpenMetaverse.Assets.TarArchiveWriter)">
            <summary>
            Write asset data files to the given archive
            </summary>
            <param name="archive">
            </param>
        </member>
        <member name="T:OpenMetaverse.Assets.TarArchiveReader">
            <summary>
            Temporary code to do the bare minimum required to read a tar archive for our purposes
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.TarArchiveReader.#ctor(System.IO.Stream)">
            <summary>
            Generate a tar reader which reads from the given stream.
            </summary>
            <param name="s">
            </param>
        </member>
        <member name="F:OpenMetaverse.Assets.TarArchiveReader.m_br">
            <summary>
            Binary reader for the underlying stream
            </summary>
        </member>
        <member name="F:OpenMetaverse.Assets.TarArchiveReader.m_nullCharArray">
            <summary>
            Used to trim off null chars
            </summary>
        </member>
        <member name="F:OpenMetaverse.Assets.TarArchiveReader.m_spaceCharArray">
            <summary>
            Used to trim off space chars
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.TarArchiveReader.ReadEntry(System.String@,OpenMetaverse.Assets.TarArchiveReader.TarEntryType@)">
            <summary>
            Read the next entry in the tar file.
            </summary>
            <param name="filePath">
            </param>
            <param name="entryType">
            </param>
            <returns>the data for the entry.  Returns null if there are no more entries</returns>
        </member>
        <member name="M:OpenMetaverse.Assets.TarArchiveReader.ReadHeader">
            <summary>
            Read the next 512 byte chunk of data as a tar header.
            </summary>
            <returns>A tar header struct.  null if we have reached the end of the archive.</returns>
        </member>
        <member name="M:OpenMetaverse.Assets.TarArchiveReader.ReadData(System.Int32)">
            <summary>
            Read data following a header
            </summary>
            <param name="fileSize">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Assets.TarArchiveReader.ConvertOctalBytesToDecimal(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert octal bytes to a decimal representation
            </summary>
            <param name="bytes">
            </param>
            <param name="count">
            </param>
            <param name="startIndex">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:OpenMetaverse.Assets.TarArchiveWriter">
            <summary>
            Temporary code to produce a tar archive in tar v7 format
            </summary>
        </member>
        <member name="F:OpenMetaverse.Assets.TarArchiveWriter.m_bw">
            <summary>
            Binary writer for the underlying stream
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.TarArchiveWriter.WriteDir(System.String)">
            <summary>
            Write a directory entry to the tar archive.  We can only handle one path level right now!
            </summary>
            <param name="dirName">
            </param>
        </member>
        <member name="M:OpenMetaverse.Assets.TarArchiveWriter.WriteFile(System.String,System.String)">
            <summary>
            Write a file to the tar archive
            </summary>
            <param name="filePath">
            </param>
            <param name="data">
            </param>
        </member>
        <member name="M:OpenMetaverse.Assets.TarArchiveWriter.WriteFile(System.String,System.Byte[])">
            <summary>
            Write a file to the tar archive
            </summary>
            <param name="filePath">
            </param>
            <param name="data">
            </param>
        </member>
        <member name="M:OpenMetaverse.Assets.TarArchiveWriter.Close">
            <summary>
            Finish writing the raw tar archive data to a stream.  The stream will be closed on completion.
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.TarArchiveWriter.WriteEntry(System.String,System.Byte[],System.Char)">
            <summary>
            Write a particular entry
            </summary>
            <param name="filePath">
            </param>
            <param name="data">
            </param>
            <param name="fileType">
            </param>
        </member>
        <member name="T:OpenMetaverse.Assets.AssetAnimation">
            <summary>
            Represents an Animation
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetAnimation.#ctor">
            <summary>Default Constructor</summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetAnimation.#ctor(OpenMetaverse.UUID,System.Byte[])">
            <summary>
            Construct an Asset object of type Animation
            </summary>
            <param name="assetID">A unique <see cref="T:OpenMetaverse.UUID" /> specific to this asset</param>
            <param name="assetData">A byte array containing the raw asset data</param>
        </member>
        <member name="P:OpenMetaverse.Assets.AssetAnimation.AssetType">
            <summary>Override the base classes AssetType</summary>
        </member>
        <member name="T:OpenMetaverse.Assets.AssetBodypart">
            <summary>
            Represents an <seealso cref="T:OpenMetaverse.Assets.AssetWearable" /> that represents an avatars body ie: Hair, Etc.
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetBodypart.#ctor">
            <summary>Initializes a new instance of an AssetBodyPart object</summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetBodypart.#ctor(OpenMetaverse.UUID,System.Byte[])">
            <summary>Initializes a new instance of an AssetBodyPart object with parameters</summary>
            <param name="assetID">A unique <see cref="T:OpenMetaverse.UUID" /> specific to this asset</param>
            <param name="assetData">A byte array containing the raw asset data</param>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetBodypart.#ctor(System.String)">
            <summary>Initializes a new instance of an AssetBodyPart object with parameters</summary>
            <param name="source">A string representing the values of the Bodypart</param>
        </member>
        <member name="P:OpenMetaverse.Assets.AssetBodypart.AssetType">
            <summary>Override the base classes AssetType</summary>
        </member>
        <member name="T:OpenMetaverse.Assets.AssetClothing">
            <summary>
            Represents an <seealso cref="T:OpenMetaverse.Assets.AssetWearable" /> that can be worn on an avatar
            such as a Shirt, Pants, etc.
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetClothing.#ctor">
            <summary>Initializes a new instance of an AssetScriptBinary object</summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetClothing.#ctor(OpenMetaverse.UUID,System.Byte[])">
            <summary>Initializes a new instance of an AssetScriptBinary object with parameters</summary>
            <param name="assetID">A unique <see cref="T:OpenMetaverse.UUID" /> specific to this asset</param>
            <param name="assetData">A byte array containing the raw asset data</param>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetClothing.#ctor(System.String)">
            <summary>Initializes a new instance of an AssetScriptBinary object with parameters</summary>
            <param name="source">A string containing the Clothings data</param>
        </member>
        <member name="P:OpenMetaverse.Assets.AssetClothing.AssetType">
            <summary>Override the base classes AssetType</summary>
        </member>
        <member name="T:OpenMetaverse.Assets.GestureStepType">
            <summary>
            Type of gesture step
            </summary>
        </member>
        <member name="T:OpenMetaverse.Assets.GestureStep">
            <summary>
            Base class for gesture steps
            </summary>
        </member>
        <member name="P:OpenMetaverse.Assets.GestureStep.GestureStepType">
            <summary>
            Retururns what kind of gesture step this is
            </summary>
        </member>
        <member name="T:OpenMetaverse.Assets.GestureStepAnimation">
            <summary>
            Describes animation step of a gesture
            </summary>
        </member>
        <member name="F:OpenMetaverse.Assets.GestureStepAnimation.AnimationStart">
            <summary>
            If true, this step represents start of animation, otherwise animation stop
            </summary>
        </member>
        <member name="F:OpenMetaverse.Assets.GestureStepAnimation.ID">
            <summary>
            Animation asset <see cref="T:OpenMetaverse.UUID" /></summary>
        </member>
        <member name="F:OpenMetaverse.Assets.GestureStepAnimation.Name">
            <summary>
            Animation inventory name
            </summary>
        </member>
        <member name="P:OpenMetaverse.Assets.GestureStepAnimation.GestureStepType">
            <summary>
            Returns what kind of gesture step this is
            </summary>
        </member>
        <member name="T:OpenMetaverse.Assets.GestureStepSound">
            <summary>
            Describes sound step of a gesture
            </summary>
        </member>
        <member name="F:OpenMetaverse.Assets.GestureStepSound.ID">
            <summary>
            Sound asset <see cref="T:OpenMetaverse.UUID" /></summary>
        </member>
        <member name="F:OpenMetaverse.Assets.GestureStepSound.Name">
            <summary>
            Sound inventory name
            </summary>
        </member>
        <member name="P:OpenMetaverse.Assets.GestureStepSound.GestureStepType">
            <summary>
            Returns what kind of gesture step this is
            </summary>
        </member>
        <member name="T:OpenMetaverse.Assets.GestureStepChat">
            <summary>
            Describes sound step of a gesture
            </summary>
        </member>
        <member name="F:OpenMetaverse.Assets.GestureStepChat.Text">
            <summary>
            Text to output in chat
            </summary>
        </member>
        <member name="P:OpenMetaverse.Assets.GestureStepChat.GestureStepType">
            <summary>
            Returns what kind of gesture step this is
            </summary>
        </member>
        <member name="T:OpenMetaverse.Assets.GestureStepWait">
            <summary>
            Describes sound step of a gesture
            </summary>
        </member>
        <member name="F:OpenMetaverse.Assets.GestureStepWait.WaitForAnimation">
            <summary>
            If true in this step we wait for all animations to finish
            </summary>
        </member>
        <member name="F:OpenMetaverse.Assets.GestureStepWait.WaitForTime">
            <summary>
            If true gesture player should wait for the specified amount of time
            </summary>
        </member>
        <member name="F:OpenMetaverse.Assets.GestureStepWait.WaitTime">
            <summary>
            Time in seconds to wait if WaitForAnimation is false
            </summary>
        </member>
        <member name="P:OpenMetaverse.Assets.GestureStepWait.GestureStepType">
            <summary>
            Returns what kind of gesture step this is
            </summary>
        </member>
        <member name="T:OpenMetaverse.Assets.GestureStepEOF">
            <summary>
            Describes the final step of a gesture
            </summary>
        </member>
        <member name="P:OpenMetaverse.Assets.GestureStepEOF.GestureStepType">
            <summary>
            Returns what kind of gesture step this is
            </summary>
        </member>
        <member name="T:OpenMetaverse.Assets.AssetGesture">
            <summary>
            Represents a sequence of animations, sounds, and chat actions
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetGesture.#ctor">
            <summary>
            Constructs guesture asset
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetGesture.#ctor(OpenMetaverse.UUID,System.Byte[])">
            <summary>
            Constructs guesture asset
            </summary>
            <param name="assetID">A unique <see cref="T:OpenMetaverse.UUID" /> specific to this asset</param>
            <param name="assetData">A byte array containing the raw asset data</param>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetGesture.TriggerKey">
            <summary>
            Keyboard key that triggers the gestyre
            </summary>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetGesture.TriggerKeyMask">
            <summary>
            Modifier to the trigger key
            </summary>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetGesture.Trigger">
            <summary>
            String that triggers playing of the gesture sequence
            </summary>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetGesture.ReplaceWith">
            <summary>
            Text that replaces trigger in chat once gesture is triggered
            </summary>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetGesture.Sequence">
            <summary>
            Sequence of gesture steps
            </summary>
        </member>
        <member name="P:OpenMetaverse.Assets.AssetGesture.AssetType">
            <summary>
            Returns asset type
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetGesture.Encode">
            <summary>
            Encodes gesture asset suitable for uplaod
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetGesture.Decode">
            <summary>
            Decodes gesture assset into play sequence
            </summary>
            <returns>true if the asset data was decoded successfully</returns>
        </member>
        <member name="T:OpenMetaverse.Assets.AssetLandmark">
            <summary>
            Represents a Landmark with RegionID and Position vector
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetLandmark.#ctor">
            <summary>Construct an Asset of type Landmark</summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetLandmark.#ctor(OpenMetaverse.UUID,System.Byte[])">
            <summary>
            Construct an Asset object of type Landmark
            </summary>
            <param name="assetID">A unique <see cref="T:OpenMetaverse.UUID" /> specific to this asset</param>
            <param name="assetData">A byte array containing the raw asset data</param>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetLandmark.#ctor(OpenMetaverse.UUID,OpenMetaverse.Vector3)">
            <summary>
            Constuct an asset of type Landmark
            </summary>
            <param name="regionID">UUID of the target region</param>
            <param name="pos">Local position of landmark</param>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetLandmark.RegionID">
            <summary>UUID of the Landmark target region</summary>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetLandmark.Position">
            <summary> Local position of the target </summary>
        </member>
        <member name="P:OpenMetaverse.Assets.AssetLandmark.AssetType">
            <summary>Override the base classes AssetType</summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetLandmark.Encode">
            <summary>
            Encode the raw contents of a string with the specific Landmark format
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetLandmark.Decode">
            <summary>
            Decode the raw asset data, populating the RegionID and Position
            </summary>
            <returns>true if the AssetData was successfully decoded to a UUID and Vector</returns>
        </member>
        <member name="T:OpenMetaverse.Assets.AssetNotecard">
            <summary>
            Represents a string of characters encoded with specific formatting properties
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetNotecard.#ctor">
            <summary>Construct an Asset of type Notecard</summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetNotecard.#ctor(OpenMetaverse.UUID,System.Byte[])">
            <summary>
            Construct an Asset object of type Notecard
            </summary>
            <param name="assetID">A unique <see cref="T:OpenMetaverse.UUID" /> specific to this asset</param>
            <param name="assetData">A byte array containing the raw asset data</param>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetNotecard.#ctor(System.String)">
            <summary>
            Construct an Asset object of type Notecard
            </summary>
            <param name="text">A text string containing the main body text of the notecard</param>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetNotecard.BodyText">
            <summary>A text string containing main text of the notecard</summary>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetNotecard.EmbeddedItems">
            <summary>List of <see cref="T:OpenMetaverse.InventoryItem" />s embedded on the notecard</summary>
        </member>
        <member name="P:OpenMetaverse.Assets.AssetNotecard.AssetType">
            <summary>Override the base classes AssetType</summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetNotecard.Encode">
            <summary>
            Encode the raw contents of a string with the specific Linden Text properties
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetNotecard.Decode">
            <summary>
            Decode the raw asset data including the Linden Text properties
            </summary>
            <returns>true if the AssetData was successfully decoded</returns>
        </member>
        <member name="T:OpenMetaverse.Assets.AssetPrim">
            <summary>
            A linkset asset, containing a parent primitive and zero or more children
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetPrim.#ctor">
            <summary>Initializes a new instance of an AssetPrim object</summary>
        </member>
        <member name="T:OpenMetaverse.Assets.AssetPrim.ProfileShape">
            <summary>
            Only used internally for XML serialization/deserialization
            </summary>
        </member>
        <member name="P:OpenMetaverse.Assets.AssetPrim.AssetType">
            <summary>Override the base classes AssetType</summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetPrim.Encode">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetPrim.Decode">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:OpenMetaverse.Assets.PrimObject">
            <summary>
            The deserialized form of a single primitive in a linkset asset
            </summary>
        </member>
        <member name="T:OpenMetaverse.Assets.AssetScriptBinary">
            <summary>
            Represents an AssetScriptBinary object containing the
            LSO compiled bytecode of an LSL script
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetScriptBinary.#ctor">
            <summary>Initializes a new instance of an AssetScriptBinary object</summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetScriptBinary.#ctor(OpenMetaverse.UUID,System.Byte[])">
            <summary>Initializes a new instance of an AssetScriptBinary object with parameters</summary>
            <param name="assetID">A unique <see cref="T:OpenMetaverse.UUID" /> specific to this asset</param>
            <param name="assetData">A byte array containing the raw asset data</param>
        </member>
        <member name="P:OpenMetaverse.Assets.AssetScriptBinary.AssetType">
            <summary>Override the base classes AssetType</summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetScriptBinary.Encode">
            <summary>
            TODO: Encodes a scripts contents into a LSO Bytecode file
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetScriptBinary.Decode">
            <summary>
            TODO: Decode LSO Bytecode into a string
            </summary>
            <returns>true</returns>
        </member>
        <member name="T:OpenMetaverse.Assets.AssetScriptText">
            <summary>
            Represents an LSL Text object containing a string of UTF encoded characters
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetScriptText.#ctor">
            <summary>Initializes a new AssetScriptText object</summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetScriptText.#ctor(OpenMetaverse.UUID,System.Byte[])">
            <summary>
            Initializes a new AssetScriptText object with parameters
            </summary>
            <param name="assetID">A unique <see cref="T:OpenMetaverse.UUID" /> specific to this asset</param>
            <param name="assetData">A byte array containing the raw asset data</param>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetScriptText.#ctor(System.String)">
            <summary>
            Initializes a new AssetScriptText object with parameters
            </summary>
            <param name="source">A string containing the scripts contents</param>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetScriptText.Source">
            <summary>A string of characters represting the script contents</summary>
        </member>
        <member name="P:OpenMetaverse.Assets.AssetScriptText.AssetType">
            <summary>Override the base classes AssetType</summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetScriptText.Encode">
            <summary>
            Encode a string containing the scripts contents into byte encoded AssetData
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetScriptText.Decode">
            <summary>
            Decode a byte array containing the scripts contents into a string
            </summary>
            <returns>true if decoding is successful</returns>
        </member>
        <member name="T:OpenMetaverse.Assets.AssetSound">
            <summary>
            Represents a Sound Asset
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetSound.#ctor">
            <summary>Initializes a new instance of an AssetSound object</summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetSound.#ctor(OpenMetaverse.UUID,System.Byte[])">
            <summary>Initializes a new instance of an AssetSound object with parameters</summary>
            <param name="assetID">A unique <see cref="T:OpenMetaverse.UUID" /> specific to this asset</param>
            <param name="assetData">A byte array containing the raw asset data</param>
        </member>
        <member name="P:OpenMetaverse.Assets.AssetSound.AssetType">
            <summary>Override the base classes AssetType</summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetSound.Encode">
            <summary>
            TODO: Encodes a sound file
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetSound.Decode">
            <summary>
            TODO: Decode a sound file
            </summary>
            <returns>true</returns>
        </member>
        <member name="T:OpenMetaverse.Assets.AssetTexture">
            <summary>
            Represents a texture
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetTexture.#ctor">
            <summary>Initializes a new instance of an AssetTexture object</summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetTexture.#ctor(OpenMetaverse.UUID,System.Byte[])">
            <summary>
            Initializes a new instance of an AssetTexture object
            </summary>
            <param name="assetID">A unique <see cref="T:OpenMetaverse.UUID" /> specific to this asset</param>
            <param name="assetData">A byte array containing the raw asset data</param>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetTexture.#ctor(OpenMetaverse.Imaging.ManagedImage)">
            <summary>
            Initializes a new instance of an AssetTexture object
            </summary>
            <param name="image">A <seealso cref="T:OpenMetaverse.Imaging.ManagedImage" /> object containing texture data</param>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetTexture.Image">
            <summary>A <seealso cref="T:OpenMetaverse.Imaging.ManagedImage" /> object containing image data</summary>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetTexture.LayerInfo">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetTexture.Components">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.Assets.AssetTexture.AssetType">
            <summary>Override the base classes AssetType</summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetTexture.Encode">
            <summary>
            Populates the <seealso cref="F:OpenMetaverse.Assets.AssetTexture.AssetData" /> byte array with a JPEG2000
            encoded image created from the data in <seealso cref="F:OpenMetaverse.Assets.AssetTexture.Image" /></summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetTexture.Decode">
            <summary>
            Decodes the JPEG2000 data in <code>AssetData</code> to the
            <seealso cref="T:OpenMetaverse.Imaging.ManagedImage" /> object <seealso cref="F:OpenMetaverse.Assets.AssetTexture.Image" /></summary>
            <returns>True if the decoding was successful, otherwise false</returns>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetTexture.DecodeLayerBoundaries">
            <summary>
            Decodes the begin and end byte positions for each quality layer in
            the image
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:OpenMetaverse.Assets.AssetWearable">
            <summary>
            Represents a Wearable Asset, Clothing, Hair, Skin, Etc
            </summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetWearable.#ctor">
            <summary>Initializes a new instance of an AssetWearable object</summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetWearable.#ctor(OpenMetaverse.UUID,System.Byte[])">
            <summary>Initializes a new instance of an AssetWearable object with parameters</summary>
            <param name="assetID">A unique <see cref="T:OpenMetaverse.UUID" /> specific to this asset</param>
            <param name="assetData">A byte array containing the raw asset data</param>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetWearable.#ctor(System.String)">
            <summary>Initializes a new instance of an AssetWearable object with parameters</summary>
            <param name="source">A string containing the asset parameters</param>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetWearable.Name">
            <summary>A string containing the name of the asset</summary>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetWearable.Description">
            <summary>A string containing a short description of the asset</summary>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetWearable.WearableType">
            <summary>The Assets WearableType</summary>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetWearable.ForSale">
            <summary>The For-Sale status of the object</summary>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetWearable.SalePrice">
            <summary>An Integer representing the purchase price of the asset</summary>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetWearable.Creator">
            <summary>The <seealso cref="T:OpenMetaverse.UUID" /> of the assets creator</summary>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetWearable.Owner">
            <summary>The <seealso cref="T:OpenMetaverse.UUID" /> of the assets current owner</summary>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetWearable.LastOwner">
            <summary>The <seealso cref="T:OpenMetaverse.UUID" /> of the assets prior owner</summary>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetWearable.Group">
            <summary>The <seealso cref="T:OpenMetaverse.UUID" /> of the Group this asset is set to</summary>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetWearable.GroupOwned">
            <summary>True if the asset is owned by a <seealso cref="T:OpenMetaverse.Group" /></summary>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetWearable.Permissions">
            <summary>The Permissions mask of the asset</summary>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetWearable.Params">
            <summary>A Dictionary containing Key/Value pairs of the objects parameters</summary>
        </member>
        <member name="F:OpenMetaverse.Assets.AssetWearable.Textures">
            <summary>A Dictionary containing Key/Value pairs where the Key is the textures Index and the Value is the Textures <seealso cref="T:OpenMetaverse.UUID" /></summary>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetWearable.Decode">
            <summary>
            Decode an assets byte encoded data to a string
            </summary>
            <returns>true if the asset data was decoded successfully</returns>
        </member>
        <member name="M:OpenMetaverse.Assets.AssetWearable.Encode">
            <summary>
            Encode the assets string represantion into a format consumable by the asset server
            </summary>
        </member>
        <member name="F:OpenMetaverse.Http.EventQueueClient.REQUEST_TIMEOUT">
            <summary>=</summary>
        </member>
        <member name="F:OpenMetaverse.Http.EventQueueClient._errorCount">
            <summary>Number of times we've received an unknown CAPS exception in series.</summary>
        </member>
        <member name="F:OpenMetaverse.Http.EventQueueClient._random">
            <summary>For exponential backoff on error.</summary>
        </member>
        <member name="T:OpenMetaverse.Imaging.Baker">
            <summary>
            A set of textures that are layered on texture of each other and "baked"
            in to a single texture, for avatar appearances
            </summary>
        </member>
        <member name="M:OpenMetaverse.Imaging.Baker.#ctor(OpenMetaverse.BakeType)">
            <summary>
            Default constructor
            </summary>
            <param name="bakeType">Bake type</param>
        </member>
        <member name="F:OpenMetaverse.Imaging.Baker.bakedTexture">
            <summary>Final baked texture</summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.Baker.textures">
            <summary>Component layers</summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.Baker.bakeWidth">
            <summary>Width of the final baked image and scratchpad</summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.Baker.bakeHeight">
            <summary>Height of the final baked image and scratchpad</summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.Baker.bakeType">
            <summary>Bake type</summary>
        </member>
        <member name="P:OpenMetaverse.Imaging.Baker.BakedTexture">
            <summary>Final baked texture</summary>
        </member>
        <member name="P:OpenMetaverse.Imaging.Baker.Textures">
            <summary>Component layers</summary>
        </member>
        <member name="P:OpenMetaverse.Imaging.Baker.BakeWidth">
            <summary>Width of the final baked image and scratchpad</summary>
        </member>
        <member name="P:OpenMetaverse.Imaging.Baker.BakeHeight">
            <summary>Height of the final baked image and scratchpad</summary>
        </member>
        <member name="P:OpenMetaverse.Imaging.Baker.BakeType">
            <summary>Bake type</summary>
        </member>
        <member name="P:OpenMetaverse.Imaging.Baker.IsSkin">
            <summary>Is this one of the 3 skin bakes</summary>
        </member>
        <member name="M:OpenMetaverse.Imaging.Baker.AddTexture(OpenMetaverse.AppearanceManager.TextureData)">
            <summary>
            Adds layer for baking
            </summary>
            <param name="tdata">TexturaData struct that contains texture and its params</param>
        </member>
        <member name="M:OpenMetaverse.Imaging.Baker.BakeTypeFor(OpenMetaverse.AvatarTextureIndex)">
            <summary>
            Converts avatar texture index (face) to Bake type
            </summary>
            <param name="index">Face number (AvatarTextureIndex)</param>
            <returns>BakeType, layer to which this texture belongs to</returns>
        </member>
        <member name="M:OpenMetaverse.Imaging.Baker.SanitizeLayers(OpenMetaverse.Imaging.ManagedImage,OpenMetaverse.Imaging.ManagedImage)">
            <summary>
            Make sure images exist, resize source if needed to match the destination
            </summary>
            <param name="dest">Destination image</param>
            <param name="src">Source image</param>
            <returns>Sanitization was succefull</returns>
        </member>
        <member name="M:OpenMetaverse.Imaging.Baker.InitBakedLayerColor(OpenMetaverse.Color4)">
            <summary>
            Fills a baked layer as a solid *appearing* color. The colors are
            subtly dithered on a 16x16 grid to prevent the JPEG2000 stage from
            compressing it too far since it seems to cause upload failures if
            the image is a pure solid color
            </summary>
            <param name="color">Color of the base of this layer</param>
        </member>
        <member name="M:OpenMetaverse.Imaging.Baker.InitBakedLayerColor(System.Single,System.Single,System.Single)">
            <summary>
            Fills a baked layer as a solid *appearing* color. The colors are
            subtly dithered on a 16x16 grid to prevent the JPEG2000 stage from
            compressing it too far since it seems to cause upload failures if
            the image is a pure solid color
            </summary>
            <param name="r">Red value</param>
            <param name="g">Green value</param>
            <param name="b">Blue value</param>
        </member>
        <member name="M:OpenMetaverse.Imaging.ManagedImage.#ctor(System.Int32,System.Int32,OpenMetaverse.Imaging.ManagedImage.ImageChannels)">
            <summary>
            Create a new blank image
            </summary>
            <param name="width">width</param>
            <param name="height">height</param>
            <param name="channels">channel flags</param>
        </member>
        <member name="M:OpenMetaverse.Imaging.ManagedImage.#ctor(System.Drawing.Bitmap)">
            <summary>
            </summary>
            <param name="bitmap">
            </param>
        </member>
        <member name="F:OpenMetaverse.Imaging.ManagedImage.Width">
            <summary>
            Image width
            </summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.ManagedImage.Height">
            <summary>
            Image height
            </summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.ManagedImage.Channels">
            <summary>
            Image channel flags
            </summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.ManagedImage.Red">
            <summary>
            Red channel data
            </summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.ManagedImage.Green">
            <summary>
            Green channel data
            </summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.ManagedImage.Blue">
            <summary>
            Blue channel data
            </summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.ManagedImage.Alpha">
            <summary>
            Alpha channel data
            </summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.ManagedImage.Bump">
            <summary>
            Bump channel data
            </summary>
        </member>
        <member name="M:OpenMetaverse.Imaging.ManagedImage.ConvertChannels(OpenMetaverse.Imaging.ManagedImage.ImageChannels)">
            <summary>
            Convert the channels in the image. Channels are created or destroyed as required.
            </summary>
            <param name="channels">new channel flags</param>
        </member>
        <member name="M:OpenMetaverse.Imaging.ManagedImage.ResizeNearestNeighbor(System.Int32,System.Int32)">
            <summary>
            Resize or stretch the image using nearest neighbor (ugly) resampling
            </summary>
            <param name="width">new width</param>
            <param name="height">new height</param>
        </member>
        <member name="M:OpenMetaverse.Imaging.ManagedImage.ExportRaw">
            <summary>
            Create a byte array containing 32-bit RGBA data with a bottom-left
            origin, suitable for feeding directly into OpenGL
            </summary>
            <returns>A byte array containing raw texture data</returns>
        </member>
        <member name="T:OpenMetaverse.Imaging.OpenJPEG">
            <summary>
            A Wrapper around openjpeg to encode and decode images to and from byte arrays
            </summary>
        </member>
        <member name="T:OpenMetaverse.Imaging.OpenJPEG.J2KLayerInfo">
            <summary>
            Defines the beginning and ending file positions of a layer in an
            LRCP-progression JPEG2000 file
            </summary>
        </member>
        <member name="T:OpenMetaverse.Imaging.OpenJPEG.MarshalledImage">
            <summary>
            This structure is used to marshal both encoded and decoded images.
            MUST MATCH THE STRUCT IN dotnet.h!
            </summary>
        </member>
        <member name="T:OpenMetaverse.Imaging.OpenJPEG.MarshalledPacket">
            <summary>
            Information about a single packet in a JPEG2000 stream
            </summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.OpenJPEG.MarshalledPacket.start_pos">
            <summary>Packet start position</summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.OpenJPEG.MarshalledPacket.end_ph_pos">
            <summary>Packet header end position</summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.OpenJPEG.MarshalledPacket.end_pos">
            <summary>Packet end position</summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.OpenJPEG.TGA_HEADER_SIZE">
            <summary>TGA Header size</summary>
        </member>
        <member name="F:OpenMetaverse.Imaging.OpenJPEG.OpenJPEGLock">
            <summary>OpenJPEG is not threadsafe, so this object is used to lock
            during calls into unmanaged code</summary>
        </member>
        <member name="M:OpenMetaverse.Imaging.OpenJPEG.Encode(OpenMetaverse.Imaging.ManagedImage,System.Boolean)">
            <summary>
            Encode a <seealso cref="T:OpenMetaverse.Imaging.ManagedImage" /> object into a byte array
            </summary>
            <param name="image">The <seealso cref="T:OpenMetaverse.Imaging.ManagedImage" /> object to encode</param>
            <param name="lossless">true to enable lossless conversion, only useful for small images ie: sculptmaps</param>
            <returns>A byte array containing the encoded Image object</returns>
        </member>
        <member name="M:OpenMetaverse.Imaging.OpenJPEG.Encode(OpenMetaverse.Imaging.ManagedImage)">
            <summary>
            Encode a <seealso cref="T:OpenMetaverse.Imaging.ManagedImage" /> object into a byte array
            </summary>
            <param name="image">The <seealso cref="T:OpenMetaverse.Imaging.ManagedImage" /> object to encode</param>
            <returns>a byte array of the encoded image</returns>
        </member>
        <member name="M:OpenMetaverse.Imaging.OpenJPEG.DecodeToImage(System.Byte[],OpenMetaverse.Imaging.ManagedImage@,System.Drawing.Image@)">
            <summary>
            Decode JPEG2000 data to an <seealso cref="T:System.Drawing.Image" /> and
            <seealso cref="T:OpenMetaverse.Imaging.ManagedImage" /></summary>
            <param name="encoded">JPEG2000 encoded data</param>
            <param name="managedImage">ManagedImage object to decode to</param>
            <param name="image">Image object to decode to</param>
            <returns>True if the decode succeeds, otherwise false</returns>
        </member>
        <member name="M:OpenMetaverse.Imaging.OpenJPEG.DecodeToImage(System.Byte[],OpenMetaverse.Imaging.ManagedImage@)">
            <summary>
            </summary>
            <param name="encoded">
            </param>
            <param name="managedImage">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Imaging.OpenJPEG.DecodeLayerBoundaries(System.Byte[],OpenMetaverse.Imaging.OpenJPEG.J2KLayerInfo[]@,System.Int32@)">
            <summary>
            </summary>
            <param name="encoded">
            </param>
            <param name="layerInfo">
            </param>
            <param name="components">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Imaging.OpenJPEG.EncodeFromImage(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Encode a <seealso cref="T:System.Drawing.Bitmap" /> object into a byte array
            </summary>
            <param name="bitmap">The source <seealso cref="T:System.Drawing.Bitmap" /> object to encode</param>
            <param name="lossless">true to enable lossless decoding</param>
            <returns>A byte array containing the source Bitmap object</returns>
        </member>
        <member name="T:OpenMetaverse.Imaging.LoadTGAClass">
            <summary>
            Capability to load TGAs to Bitmap
            </summary>
        </member>
        <member name="T:OpenMetaverse.Interfaces.IMessage">
            <summary>
            Interface requirements for Messaging system
            </summary>
        </member>
        <member name="T:OpenMetaverse.Rendering.IRendering">
            <summary>
            Abstract base for rendering plugins
            </summary>
        </member>
        <member name="M:OpenMetaverse.Rendering.IRendering.GenerateSimpleMesh(OpenMetaverse.Primitive,OpenMetaverse.Rendering.DetailLevel)">
            <summary>
            Generates a basic mesh structure from a primitive
            </summary>
            <param name="prim">Primitive to generate the mesh from</param>
            <param name="lod">Level of detail to generate the mesh at</param>
            <returns>The generated mesh</returns>
        </member>
        <member name="M:OpenMetaverse.Rendering.IRendering.GenerateFacetedMesh(OpenMetaverse.Primitive,OpenMetaverse.Rendering.DetailLevel)">
            <summary>
            Generates a a series of faces, each face containing a mesh and
            metadata
            </summary>
            <param name="prim">Primitive to generate the mesh from</param>
            <param name="lod">Level of detail to generate the mesh at</param>
            <returns>The generated mesh</returns>
        </member>
        <member name="M:OpenMetaverse.Rendering.IRendering.TransformTexCoords(System.Collections.Generic.List{OpenMetaverse.Rendering.Vertex},OpenMetaverse.Vector3,OpenMetaverse.Primitive.TextureEntryFace)">
            <summary>
            Apply texture coordinate modifications from a
            <seealso cref="!:TextureEntryFace" /> to a list of vertices
            </summary>
            <param name="vertices">Vertex list to modify texture coordinates for</param>
            <param name="center">Center-point of the face</param>
            <param name="teFace">Face texture parameters</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.TeleportFinishMessage">
            <summary>
            Sent to the client to indicate a teleport request has completed
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.TeleportFinishMessage.AgentID">
            <summary>The <see cref="T:OpenMetaverse.UUID" /> of the agent</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.TeleportFinishMessage.LocationID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.TeleportFinishMessage.RegionHandle">
            <summary>The simulators handle the agent teleported to</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.TeleportFinishMessage.SeedCapability">
            <summary>A Uri which contains a list of Capabilities the simulator supports</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.TeleportFinishMessage.SimAccess">
            <summary>Indicates the level of access required
            to access the simulator, or the content rating, or the simulators
            map status</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.TeleportFinishMessage.IP">
            <summary>The IP Address of the simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.TeleportFinishMessage.Port">
            <summary>The UDP Port the simulator will listen for UDP traffic on</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.TeleportFinishMessage.Flags">
            <summary>Status flags indicating the state of the Agent upon arrival, Flying, etc.</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.TeleportFinishMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.TeleportFinishMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.EstablishAgentCommunicationMessage">
            <summary>
            Sent to the viewer when a neighboring simulator is requesting the agent make a connection to it.
            </summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.EstablishAgentCommunicationMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.EstablishAgentCommunicationMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.CrossedRegionMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.CrossedRegionMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.EnableSimulatorMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.EnableSimulatorMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.TeleportFailedMessage">
            <summary>
            A message sent to the client which indicates a teleport request has failed
            and contains some information on why it failed
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.TeleportFailedMessage.ExtraParams">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.TeleportFailedMessage.MessageKey">
            <summary>A string key of the reason the teleport failed e.g. CouldntTPCloser
            Which could be used to look up a value in a dictionary or enum</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.TeleportFailedMessage.AgentID">
            <summary>The <see cref="T:OpenMetaverse.UUID" /> of the Agent</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.TeleportFailedMessage.Reason">
            <summary>A string human readable message containing the reason </summary>
            <remarks>An example: Could not teleport closer to destination</remarks>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.TeleportFailedMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.TeleportFailedMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.LandStatReplyMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.LandStatReplyMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.ParcelObjectOwnersReplyMessage">
            <summary>
            Contains a list of prim owner information for a specific parcel in a simulator
            </summary>
            <remarks>
            A Simulator will always return at least 1 entry
            If agent does not have proper permission the OwnerID will be UUID.Zero
            If agent does not have proper permission OR there are no primitives on parcel
            the DataBlocksExtended map will not be sent from the simulator
            </remarks>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.ParcelObjectOwnersReplyMessage.PrimOwner">
            <summary>
            Prim ownership information for a specified owner on a single parcel
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelObjectOwnersReplyMessage.PrimOwner.OwnerID">
            <summary>The <see cref="T:OpenMetaverse.UUID" /> of the prim owner,
            UUID.Zero if agent has no permission to view prim owner information</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelObjectOwnersReplyMessage.PrimOwner.Count">
            <summary>The total number of prims</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelObjectOwnersReplyMessage.PrimOwner.IsGroupOwned">
            <summary>True if the OwnerID is a <see cref="T:OpenMetaverse.Group" /></summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelObjectOwnersReplyMessage.PrimOwner.OnlineStatus">
            <summary>True if the owner is online
            <remarks>This is no longer used by the LL Simulators</remarks></summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelObjectOwnersReplyMessage.PrimOwner.TimeStamp">
            <summary>The date the most recent prim was rezzed</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelObjectOwnersReplyMessage.PrimOwnersBlock">
            <summary>An Array of <see cref="T:OpenMetaverse.Messages.Linden.ParcelObjectOwnersReplyMessage.PrimOwner" /> objects</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ParcelObjectOwnersReplyMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ParcelObjectOwnersReplyMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage">
            <summary>
            The details of a single parcel in a region, also contains some regionwide globals
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.LocalID">
            <summary>Simulator-local ID of this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.AABBMax">
            <summary>Maximum corner of the axis-aligned bounding box for this
            parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.AABBMin">
            <summary>Minimum corner of the axis-aligned bounding box for this
            parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.Area">
            <summary>Total parcel land area</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.AuctionID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.AuthBuyerID">
            <summary>Key of authorized buyer</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.Bitmap">
            <summary>Bitmap describing land layout in 4x4m squares across the
            entire region</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.Category">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.ClaimDate">
            <summary>Date land was claimed</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.ClaimPrice">
            <summary>Appears to always be zero</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.Desc">
            <summary>Parcel Description</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.ParcelFlags">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.GroupID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.GroupPrims">
            <summary>Total number of primitives owned by the parcel group on
            this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.IsGroupOwned">
            <summary>Whether the land is deeded to a group or not</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.LandingType">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.MaxPrims">
            <summary>Maximum number of primitives this parcel supports</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.MediaID">
            <summary>The Asset UUID of the Texture which when applied to a
            primitive will display the media</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.MediaURL">
            <summary>A URL which points to any Quicktime supported media type</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.MediaAutoScale">
            <summary>A byte, if 0x1 viewer should auto scale media to fit object</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.MusicURL">
            <summary>URL For Music Stream</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.Name">
            <summary>Parcel Name</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.OtherCleanTime">
            <summary>Autoreturn value in minutes for others' objects</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.OtherCount">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.OtherPrims">
            <summary>Total number of other primitives on this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.OwnerID">
            <summary>UUID of the owner of this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.OwnerPrims">
            <summary>Total number of primitives owned by the parcel owner on
            this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.ParcelPrimBonus">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.PassHours">
            <summary>How long is pass valid for</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.PassPrice">
            <summary>Price for a temporary pass</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.PublicCount">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.RegionDenyAnonymous">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.RegionPushOverride">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.RentPrice">
            <summary>This field is no longer used</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.RequestResult">
            The result of a request for parcel properties</member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.SalePrice">
            <summary>Sale price of the parcel, only useful if ForSale is set</summary>
            <remarks>The SalePrice will remain the same after an ownership
            transfer (sale), so it can be used to see the purchase price after
            a sale if the new owner has not changed it</remarks>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.SelectedPrims">
            <summary>
            Number of primitives your avatar is currently
            selecting and sitting on in this parcel
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.SelfCount">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.SequenceID">
            <summary>
            A number which increments by 1, starting at 0 for each ParcelProperties request.
            Can be overriden by specifying the sequenceID with the ParcelPropertiesRequest being sent.
            a Negative number indicates the action in <seealso cref="T:OpenMetaverse.ParcelPropertiesStatus" /> has occurred.
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.SimWideMaxPrims">
            <summary>Maximum primitives across the entire simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.SimWideTotalPrims">
            <summary>Total primitives across the entire simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.SnapSelection">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.SnapshotID">
            <summary>Key of parcel snapshot</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.Status">
            <summary>Parcel ownership status</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.TotalPrims">
            <summary>Total number of primitives on this parcel</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.UserLocation">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.UserLookAt">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.RegionDenyAgeUnverified">
            <summary>TRUE of region denies access to age unverified users</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.MediaDesc">
            <summary>A description of the media</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.MediaHeight">
            <summary>An Integer which represents the height of the media</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.MediaWidth">
            <summary>An integer which represents the width of the media</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.MediaLoop">
            <summary>A boolean, if true the viewer should loop the media</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.MediaType">
            <summary>A string which contains the mime type of the media</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.ObscureMedia">
            <summary>true to obscure (hide) media url</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.ObscureMusic">
            <summary>true to obscure (hide) music url</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ParcelPropertiesMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage">
            <summary>A message sent from the viewer to the simulator to updated a specific parcels settings</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.AuthBuyerID">
            <summary>The <seealso cref="T:OpenMetaverse.UUID" /> of the agent authorized to purchase this
            parcel of land or a NULL <seealso cref="T:OpenMetaverse.UUID" /> if the sale is authorized to anyone</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.MediaAutoScale">
            <summary>true to enable auto scaling of the parcel media</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.Category">
            <summary>The category of this parcel used when search is enabled to restrict
            search results</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.Desc">
            <summary>A string containing the description to set</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.GroupID">
            <summary>The <seealso cref="T:OpenMetaverse.UUID" /> of the <seealso cref="T:OpenMetaverse.Group" /> which allows for additional
            powers and restrictions.</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.Landing">
            <summary>The <seealso cref="T:OpenMetaverse.LandingType" /> which specifies how avatars which teleport
            to this parcel are handled</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.LocalID">
            <summary>The LocalID of the parcel to update settings on</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.MediaDesc">
            <summary>A string containing the description of the media which can be played
            to visitors</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.MediaHeight">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.MediaLoop">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.MediaID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.MediaType">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.MediaURL">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.MediaWidth">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.MusicURL">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.Name">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.ObscureMedia">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.ObscureMusic">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.ParcelFlags">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.PassHours">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.PassPrice">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.SalePrice">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.SnapshotID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.UserLocation">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.UserLookAt">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ParcelPropertiesUpdateMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.RemoteParcelRequestBlock">
            <summary>Base class used for the RemoteParcelRequest message</summary>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.RemoteParcelRequestRequest">
            <summary>
            A message sent from the viewer to the simulator to request information
            on a remote parcel
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.RemoteParcelRequestRequest.Location">
            <summary>Local sim position of the parcel we are looking up</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.RemoteParcelRequestRequest.RegionHandle">
            <summary>Region handle of the parcel we are looking up</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.RemoteParcelRequestRequest.RegionID">
            <summary>Region <see cref="T:OpenMetaverse.UUID" /> of the parcel we are looking up</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.RemoteParcelRequestRequest.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.RemoteParcelRequestRequest.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.RemoteParcelRequestReply">
            <summary>
            A message sent from the simulator to the viewer in response to a <see cref="T:OpenMetaverse.Messages.Linden.RemoteParcelRequestRequest" />
            which will contain parcel information
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.RemoteParcelRequestReply.ParcelID">
            <summary>The grid-wide unique parcel ID</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.RemoteParcelRequestReply.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.RemoteParcelRequestReply.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.RemoteParcelRequestMessage">
            <summary>
            A message containing a request for a remote parcel from a viewer, or a response
            from the simulator to that request
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.RemoteParcelRequestMessage.Request">
            <summary>The request or response details block</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.RemoteParcelRequestMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.RemoteParcelRequestMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.NewFileAgentInventoryMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.NewFileAgentInventoryMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.AgentGroupDataUpdateMessage">
            <summary>
            A message sent from the simulator to an agent which contains
            the groups the agent is in
            </summary>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.AgentGroupDataUpdateMessage.GroupData">
            <summary>Group Details specific to the agent</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.AgentGroupDataUpdateMessage.GroupData.AcceptNotices">
            <summary>true of the agent accepts group notices</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.AgentGroupDataUpdateMessage.GroupData.Contribution">
            <summary>The agents tier contribution to the group</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.AgentGroupDataUpdateMessage.GroupData.GroupID">
            <summary>The Groups <seealso cref="T:OpenMetaverse.UUID" /></summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.AgentGroupDataUpdateMessage.GroupData.GroupInsigniaID">
            <summary>The <seealso cref="T:OpenMetaverse.UUID" /> of the groups insignia</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.AgentGroupDataUpdateMessage.GroupData.GroupName">
            <summary>The name of the group</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.AgentGroupDataUpdateMessage.GroupData.GroupPowers">
            <summary>The aggregate permissions the agent has in the group for all roles the agent
            is assigned</summary>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.AgentGroupDataUpdateMessage.NewGroupData">
            <summary>An optional block containing additional agent specific information</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.AgentGroupDataUpdateMessage.NewGroupData.ListInProfile">
            <summary>true of the agent allows this group to be
            listed in their profile</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.AgentGroupDataUpdateMessage.AgentID">
            <summary>The Agent receiving the message</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.AgentGroupDataUpdateMessage.GroupDataBlock">
            <summary>An array containing <seealso cref="T:OpenMetaverse.Messages.Linden.AgentGroupDataUpdateMessage.GroupData" /> information
            for each <see cref="T:OpenMetaverse.Group" /> the agent is a member of</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.AgentGroupDataUpdateMessage.NewGroupDataBlock">
            <summary>An array containing <seealso cref="T:OpenMetaverse.Messages.Linden.AgentGroupDataUpdateMessage.NewGroupData" /> information
            for each <see cref="T:OpenMetaverse.Group" /> the agent is a member of</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.AgentGroupDataUpdateMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.AgentGroupDataUpdateMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.UpdateAgentLanguageMessage">
            <summary>
            A message sent from the viewer to the simulator which
            specifies the language and permissions for others to detect
            the language specified
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.UpdateAgentLanguageMessage.Language">
            <summary>A string containng the default language
            to use for the agent</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.UpdateAgentLanguageMessage.LanguagePublic">
            <summary>true of others are allowed to
            know the language setting</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.UpdateAgentLanguageMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.UpdateAgentLanguageMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.AgentDropGroupMessage">
            <summary>
            An EventQueue message sent from the simulator to an agent when the agent
            leaves a group
            </summary>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.AgentDropGroupMessage.AgentData">
            <summary>An object containing the Agents UUID, and the Groups UUID</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.AgentDropGroupMessage.AgentData.AgentID">
            <summary>The ID of the Agent leaving the group</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.AgentDropGroupMessage.AgentData.GroupID">
            <summary>The GroupID the Agent is leaving</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.AgentDropGroupMessage.AgentDataBlock">
            <summary>
            An Array containing the AgentID and GroupID
            </summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.AgentDropGroupMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.AgentDropGroupMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.AssetUploaderBlock">
            <summary>Base class for Asset uploads/results via Capabilities</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.AssetUploaderBlock.State">
            <summary>
            The request state
            </summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.AssetUploaderBlock.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.AssetUploaderBlock.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.UploaderRequestUpload">
            <summary>
            A message sent from the viewer to the simulator to request a temporary upload capability
            which allows an asset to be uploaded
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.UploaderRequestUpload.Url">
            <summary>The Capability URL sent by the simulator to upload the baked texture to</summary>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.UploaderRequestComplete">
            <summary>
            A message sent from the simulator that will inform the agent the upload is complete,
            and the UUID of the uploaded asset
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.UploaderRequestComplete.AssetID">
            <summary>The uploaded texture asset ID</summary>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.UploadBakedTextureMessage">
            <summary>
            A message sent from the viewer to the simulator to request a temporary
            capability URI which is used to upload an agents baked appearance textures
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.UploadBakedTextureMessage.Request">
            <summary>Object containing request or response</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.UploadBakedTextureMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.UploadBakedTextureMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.RequiredVoiceVersionMessage">
            <summary>
            A message sent from the simulator which indicates the minimum version required for
            using voice chat
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.RequiredVoiceVersionMessage.MajorVersion">
            <summary>Major Version Required</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.RequiredVoiceVersionMessage.MinorVersion">
            <summary>Minor version required</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.RequiredVoiceVersionMessage.RegionName">
            <summary>The name of the region sending the version requrements</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.RequiredVoiceVersionMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.RequiredVoiceVersionMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.ParcelVoiceInfoRequestMessage">
            <summary>
            A message sent from the simulator to the viewer containing the
            voice server URI
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelVoiceInfoRequestMessage.ParcelID">
            <summary>The Parcel ID which the voice server URI applies</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelVoiceInfoRequestMessage.RegionName">
            <summary>The name of the region</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelVoiceInfoRequestMessage.SipChannelUri">
            <summary>A uri containing the server/channel information
            which the viewer can utilize to participate in voice conversations</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ParcelVoiceInfoRequestMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ParcelVoiceInfoRequestMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.ProvisionVoiceAccountRequestMessage">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ProvisionVoiceAccountRequestMessage.Password">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ProvisionVoiceAccountRequestMessage.Username">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ProvisionVoiceAccountRequestMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ProvisionVoiceAccountRequestMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.UploadScriptTaskMessage">
            <summary>
            A message sent by the viewer to the simulator to request a temporary
            capability for a script contained with in a Tasks inventory to be updated
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.UploadScriptTaskMessage.Request">
            <summary>Object containing request or response</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.UploadScriptTaskMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.UploadScriptTaskMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.ScriptRunningReplyMessage">
            <summary>
            A message sent from the simulator to the viewer to indicate
            a Tasks scripts status.
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ScriptRunningReplyMessage.ItemID">
            <summary>The Asset ID of the script</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ScriptRunningReplyMessage.Mono">
            <summary>True of the script is compiled/ran using the mono interpreter, false indicates it
            uses the older less efficient lsl2 interprter</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ScriptRunningReplyMessage.ObjectID">
            <summary>The Task containing the scripts <seealso cref="T:OpenMetaverse.UUID" /></summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ScriptRunningReplyMessage.Running">
            <summary>true of the script is in a running state</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ScriptRunningReplyMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ScriptRunningReplyMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.UpdateGestureAgentInventoryMessage">
            <summary>
            A message containing the request/response used for updating a gesture
            contained with an agents inventory
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.UpdateGestureAgentInventoryMessage.Request">
            <summary>Object containing request or response</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.UpdateGestureAgentInventoryMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.UpdateGestureAgentInventoryMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.UpdateNotecardTaskInventoryMessage">
            <summary>
            A message request/response which is used to update a notecard contained within
            a tasks inventory
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.UpdateNotecardTaskInventoryMessage.TaskID">
            <summary>The <seealso cref="T:OpenMetaverse.UUID" /> of the Task containing the notecard asset to update</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.UpdateNotecardTaskInventoryMessage.ItemID">
            <summary>The notecard assets <seealso cref="T:OpenMetaverse.UUID" /> contained in the tasks inventory</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.UpdateNotecardTaskInventoryMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.UpdateNotecardTaskInventoryMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.UpdateAgentInventoryRequestMessage">
            <summary>
            A reusable class containing a message sent from the viewer to the simulator to request a temporary uploader capability
            which is used to update an asset in an agents inventory
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.UpdateAgentInventoryRequestMessage.ItemID">
            <summary>
            The Notecard AssetID to replace
            </summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.UpdateAgentInventoryRequestMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.UpdateAgentInventoryRequestMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.UpdateNotecardAgentInventoryMessage">
            <summary>
            A message containing the request/response used for updating a notecard
            contained with an agents inventory
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.UpdateNotecardAgentInventoryMessage.Request">
            <summary>Object containing request or response</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.UpdateNotecardAgentInventoryMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.UpdateNotecardAgentInventoryMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.CopyInventoryFromNotecardMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.CopyInventoryFromNotecardMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.UploaderScriptRequestError">
            <summary>
            A message sent from the simulator to the viewer which indicates
            an error occurred while attempting to update a script in an agents or tasks
            inventory
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.UploaderScriptRequestError.Compiled">
            <summary>true of the script was successfully compiled by the simulator</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.UploaderScriptRequestError.Error">
            <summary>A string containing the error which occured while trying
            to update the script</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.UploaderScriptRequestError.AssetID">
            <summary>A new AssetID assigned to the script</summary>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.UpdateScriptTaskUpdateMessage">
            <summary>
            A message sent from the viewer to the simulator
            requesting the update of an existing script contained
            within a tasks inventory
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.UpdateScriptTaskUpdateMessage.ScriptRunning">
            <summary>if true, set the script mode to running</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.UpdateScriptTaskUpdateMessage.ItemID">
            <summary>The scripts InventoryItem ItemID to update</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.UpdateScriptTaskUpdateMessage.Target">
            <summary>A lowercase string containing either "mono" or "lsl2" which
            specifies the script is compiled and ran on the mono runtime, or the older
            lsl runtime</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.UpdateScriptTaskUpdateMessage.TaskID">
            <summary>The tasks <see cref="T:OpenMetaverse.UUID" /> which contains the script to update</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.UpdateScriptTaskUpdateMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.UpdateScriptTaskUpdateMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.UpdateScriptTaskMessage">
            <summary>
            A message containing either the request or response used in updating a script inside
            a tasks inventory
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.UpdateScriptTaskMessage.Request">
            <summary>Object containing request or response</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.UpdateScriptTaskMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.UpdateScriptTaskMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.UploaderRequestScriptComplete">
            <summary>
            Response from the simulator to notify the viewer the upload is completed, and
            the UUID of the script asset and its compiled status
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.UploaderRequestScriptComplete.AssetID">
            <summary>The uploaded texture asset ID</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.UploaderRequestScriptComplete.Compiled">
            <summary>true of the script was compiled successfully</summary>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.UpdateScriptAgentRequestMessage">
            <summary>
            A message sent from a viewer to the simulator requesting a temporary uploader capability
            used to update a script contained in an agents inventory
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.UpdateScriptAgentRequestMessage.ItemID">
            <summary>The existing asset if of the script in the agents inventory to replace</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.UpdateScriptAgentRequestMessage.Target">
            <summary>The language of the script</summary>
            <remarks>Defaults to lsl version 2, "mono" might be another possible option</remarks>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.UpdateScriptAgentRequestMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.UpdateScriptAgentRequestMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.UpdateScriptAgentMessage">
            <summary>
            A message containing either the request or response used in updating a script inside
            an agents inventory
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.UpdateScriptAgentMessage.Request">
            <summary>Object containing request or response</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.UpdateScriptAgentMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.UpdateScriptAgentMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.SendPostcardMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.SendPostcardMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.MapLayerMessageBase">
            <summary>Base class for Map Layers via Capabilities</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.MapLayerMessageBase.Flags">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.MapLayerMessageBase.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.MapLayerMessageBase.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.MapLayerRequestVariant">
            <summary>
            Sent by an agent to the capabilities server to request map layers
            </summary>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.MapLayerReplyVariant">
            <summary>
            A message sent from the simulator to the viewer which contains an array of map images and their grid coordinates
            </summary>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.MapLayerReplyVariant.LayerData">
            <summary>
            An object containing map location details
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.MapLayerReplyVariant.LayerData.ImageID">
            <summary>The Asset ID of the regions tile overlay</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.MapLayerReplyVariant.LayerData.Bottom">
            <summary>The grid location of the southern border of the map tile</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.MapLayerReplyVariant.LayerData.Left">
            <summary>The grid location of the western border of the map tile</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.MapLayerReplyVariant.LayerData.Right">
            <summary>The grid location of the eastern border of the map tile</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.MapLayerReplyVariant.LayerData.Top">
            <summary>The grid location of the northern border of the map tile</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.MapLayerReplyVariant.LayerDataBlocks">
            <summary>An array containing LayerData items</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.MapLayerReplyVariant.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.MapLayerReplyVariant.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.MapLayerMessage.Request">
            <summary>Object containing request or response</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.MapLayerMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.MapLayerMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.ProductInfoRequestMessage">
            <summary>
            New as of 1.23 RC1, no details yet.
            </summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ProductInfoRequestMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ProductInfoRequestMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.SearchStatRequestMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.SearchStatRequestMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ChatSessionRequestBlock.Method">
            <summary>A string containing the method used</summary>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.ChatSessionRequestStartConference">
            <summary>
            A request sent from an agent to the Simulator to begin a new conference.
            Contains a list of Agents which will be included in the conference
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ChatSessionRequestStartConference.AgentsBlock">
            <summary>An array containing the <see cref="T:OpenMetaverse.UUID" /> of the agents invited to this conference</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ChatSessionRequestStartConference.SessionID">
            <summary>The conferences Session ID</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ChatSessionRequestStartConference.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ChatSessionRequestStartConference.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.ChatSessionRequestMuteUpdate">
            <summary>
            A moderation request sent from a conference moderator
            Contains an agent and an optional action to take
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ChatSessionRequestMuteUpdate.SessionID">
            <summary>The Session ID</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ChatSessionRequestMuteUpdate.AgentID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ChatSessionRequestMuteUpdate.RequestKey">
            <summary>A list containing Key/Value pairs, known valid values:
            key: text value: true/false - allow/disallow specified agents ability to use text in session
            key: voice value: true/false - allow/disallow specified agents ability to use voice in session
            </summary>
            <remarks>"text" or "voice"</remarks>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ChatSessionRequestMuteUpdate.RequestValue">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ChatSessionRequestMuteUpdate.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ChatSessionRequestMuteUpdate.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.ChatSessionAcceptInvitation">
            <summary>
            A message sent from the agent to the simulator which tells the
            simulator we've accepted a conference invitation
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ChatSessionAcceptInvitation.SessionID">
            <summary>The conference SessionID</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ChatSessionAcceptInvitation.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ChatSessionAcceptInvitation.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ChatSessionRequestMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ChatSessionRequestMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ChatterboxSessionEventReplyMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ChatterboxSessionEventReplyMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ChatterBoxSessionStartReplyMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ChatterBoxSessionStartReplyMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ChatterBoxInvitationMessage.FromAgentID">
            <summary>Key of sender</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ChatterBoxInvitationMessage.FromAgentName">
            <summary>Name of sender</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ChatterBoxInvitationMessage.ToAgentID">
            <summary>Key of destination avatar</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ChatterBoxInvitationMessage.ParentEstateID">
            <summary>ID of originating estate</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ChatterBoxInvitationMessage.RegionID">
            <summary>Key of originating region</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ChatterBoxInvitationMessage.Position">
            <summary>Coordinates in originating region</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ChatterBoxInvitationMessage.Dialog">
            <summary>Instant message type</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ChatterBoxInvitationMessage.GroupIM">
            <summary>Group IM session toggle</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ChatterBoxInvitationMessage.IMSessionID">
            <summary>Key of IM session, for Group Messages, the groups UUID</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ChatterBoxInvitationMessage.Timestamp">
            <summary>Timestamp of the instant message</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ChatterBoxInvitationMessage.Message">
            <summary>Instant message text</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ChatterBoxInvitationMessage.Offline">
            <summary>Whether this message is held for offline avatars</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ChatterBoxInvitationMessage.BinaryBucket">
            <summary>Context specific packed data</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ChatterBoxInvitationMessage.Voice">
            <summary>Is this invitation for voice group/conference chat</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ChatterBoxInvitationMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ChatterBoxInvitationMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.ChatterBoxSessionAgentListUpdatesMessage">
            <summary>
            Sent from the simulator to the viewer.
            When an agent initially joins a session the AgentUpdatesBlock object will contain a list of session members including
            a boolean indicating they can use voice chat in this session, a boolean indicating they are allowed to moderate
            this session, and lastly a string which indicates another agent is entering the session with the Transition set to "ENTER"
            During the session lifetime updates on individuals are sent. During the update the booleans sent during the initial join are
            excluded with the exception of the Transition field. This indicates a new user entering or exiting the session with
            the string "ENTER" or "LEAVE" respectively.
            </summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ChatterBoxSessionAgentListUpdatesMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ChatterBoxSessionAgentListUpdatesMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.ForceCloseChatterBoxSessionMessage">
            <summary>
            An EventQueue message sent when the agent is forcibly removed from a chatterbox session
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ForceCloseChatterBoxSessionMessage.Reason">
            <summary>
            A string containing the reason the agent was removed
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ForceCloseChatterBoxSessionMessage.SessionID">
            <summary>
            The ChatterBoxSession's SessionID
            </summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ForceCloseChatterBoxSessionMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ForceCloseChatterBoxSessionMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.EventQueueAck.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.EventQueueAck.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.EventQueueEvent.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.EventQueueEvent.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.EventQueueGetMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.EventQueueGetMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ViewerStatsMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ViewerStatsMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.PlacesReplyMessage">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.PlacesReplyMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.PlacesReplyMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.UpdateAgentInformationMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.UpdateAgentInformationMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.DirLandReplyMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.DirLandReplyMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.ObjectMediaNavigateMessage">
            <summary>
            A message sent from the viewer to the simulator which
            specifies that the user has changed current URL
            of the specific media on a prim face
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ObjectMediaNavigateMessage.URL">
            <summary>
            New URL
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ObjectMediaNavigateMessage.PrimID">
            <summary>
            Prim UUID where navigation occured
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ObjectMediaNavigateMessage.Face">
            <summary>
            Face index
            </summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ObjectMediaNavigateMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ObjectMediaNavigateMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.ObjectMediaBlock">
            <summary>Base class used for the ObjectMedia message</summary>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.ObjectMediaRequest">
            <summary>
            Message used to retrive prim media data
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ObjectMediaRequest.PrimID">
            <summary>
            Prim UUID
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ObjectMediaRequest.Verb">
            <summary>
            Requested operation, either GET or UPDATE
            </summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ObjectMediaRequest.Serialize">
            <summary>
            Serialize object
            </summary>
            <returns>Serialized object as OSDMap</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ObjectMediaRequest.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.ObjectMediaResponse">
            <summary>
            Message used to update prim media data
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ObjectMediaResponse.PrimID">
            <summary>
            Prim UUID
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ObjectMediaResponse.FaceMedia">
            <summary>
            Array of media entries indexed by face number
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ObjectMediaResponse.Version">
            <summary>
            Media version string
            </summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ObjectMediaResponse.Serialize">
            <summary>
            Serialize object
            </summary>
            <returns>Serialized object as OSDMap</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ObjectMediaResponse.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.ObjectMediaUpdate">
            <summary>
            Message used to update prim media data
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ObjectMediaUpdate.PrimID">
            <summary>
            Prim UUID
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ObjectMediaUpdate.FaceMedia">
            <summary>
            Array of media entries indexed by face number
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ObjectMediaUpdate.Verb">
            <summary>
            Requested operation, either GET or UPDATE
            </summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ObjectMediaUpdate.Serialize">
            <summary>
            Serialize object
            </summary>
            <returns>Serialized object as OSDMap</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ObjectMediaUpdate.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.ObjectMediaMessage">
            <summary>
            Message for setting or getting per face MediaEntry
            </summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ObjectMediaMessage.Request">
            <summary>The request or response details block</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ObjectMediaMessage.Serialize">
            <summary>
            Serialize the object
            </summary>
            <returns>An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the objects data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ObjectMediaMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserialize the message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.ObjectResourcesDetail">
            <summary>Details about object resource usage</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ObjectResourcesDetail.ID">
            <summary>Object UUID</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ObjectResourcesDetail.Name">
            <summary>Object name</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ObjectResourcesDetail.GroupOwned">
            <summary>Indicates if object is group owned</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ObjectResourcesDetail.Location">
            <summary>Locatio of the object</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ObjectResourcesDetail.OwnerID">
            <summary>Object owner</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ObjectResourcesDetail.Resources">
            <summary>Resource usage, keys are resource names, values are resource usage for that specific resource</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ObjectResourcesDetail.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserializes object from OSD
            </summary>
            <param name="obj">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ObjectResourcesDetail.FromOSD(OpenMetaverse.StructuredData.OSD)">
            <summary>
            Makes an instance based on deserialized data
            </summary>
            <param name="osd">
                <see cref="T:OpenMetaverse.StructuredData.OSD" /> serialized data</param>
            <returns>Instance containg deserialized data</returns>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.ParcelResourcesDetail">
            <summary>Details about parcel resource usage</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelResourcesDetail.ID">
            <summary>Parcel UUID</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelResourcesDetail.LocalID">
            <summary>Parcel local ID</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelResourcesDetail.Name">
            <summary>Parcel name</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelResourcesDetail.GroupOwned">
            <summary>Indicates if parcel is group owned</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelResourcesDetail.OwnerID">
            <summary>Parcel owner</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.ParcelResourcesDetail.Objects">
            <summary>Array of <see cref="T:OpenMetaverse.Messages.Linden.ObjectResourcesDetail" /> containing per object resource usage</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ParcelResourcesDetail.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserializes object from OSD
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.ParcelResourcesDetail.FromOSD(OpenMetaverse.StructuredData.OSD)">
            <summary>
            Makes an instance based on deserialized data
            </summary>
            <param name="osd">
                <see cref="T:OpenMetaverse.StructuredData.OSD" /> serialized data</param>
            <returns>Instance containg deserialized data</returns>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.BaseResourcesInfo">
            <summary>Resource usage base class, both agent and parcel resource
            usage contains summary information</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.BaseResourcesInfo.SummaryAvailable">
            <summary>Summary of available resources, keys are resource names,
            values are resource usage for that specific resource</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.BaseResourcesInfo.SummaryUsed">
            <summary>Summary resource usage, keys are resource names,
            values are resource usage for that specific resource</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.BaseResourcesInfo.Serialize">
            <summary>
            Serializes object
            </summary>
            <returns>
                <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> serialized data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.BaseResourcesInfo.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserializes object from OSD
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.AttachmentResourcesMessage">
            <summary>Agent resource usage</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.AttachmentResourcesMessage.Attachments">
            <summary>Per attachment point object resource usage</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.AttachmentResourcesMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserializes object from OSD
            </summary>
            <param name="osd">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.AttachmentResourcesMessage.FromOSD(OpenMetaverse.StructuredData.OSD)">
            <summary>
            Makes an instance based on deserialized data
            </summary>
            <param name="osd">
                <see cref="T:OpenMetaverse.StructuredData.OSD" /> serialized data</param>
            <returns>Instance containg deserialized data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.AttachmentResourcesMessage.GetMessageHandler(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Detects which class handles deserialization of this message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
            <returns>Object capable of decoding this message</returns>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.LandResourcesRequest">
            <summary>Request message for parcel resource usage</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.LandResourcesRequest.ParcelID">
            <summary>UUID of the parel to request resource usage info</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.LandResourcesRequest.Serialize">
            <summary>
            Serializes object
            </summary>
            <returns>
                <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> serialized data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.LandResourcesRequest.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserializes object from OSD
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.LandResourcesMessage">
            <summary>Response message for parcel resource usage</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.LandResourcesMessage.ScriptResourceDetails">
            <summary>URL where parcel resource usage details can be retrieved</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.LandResourcesMessage.ScriptResourceSummary">
            <summary>URL where parcel resource usage summary can be retrieved</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.LandResourcesMessage.Serialize">
            <summary>
            Serializes object
            </summary>
            <returns>
                <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> serialized data</returns>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.LandResourcesMessage.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserializes object from OSD
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.LandResourcesMessage.GetMessageHandler(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Detects which class handles deserialization of this message
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
            <returns>Object capable of decoding this message</returns>
        </member>
        <member name="T:OpenMetaverse.Messages.Linden.LandResourcesInfo">
            <summary>Parcel resource usage</summary>
        </member>
        <member name="F:OpenMetaverse.Messages.Linden.LandResourcesInfo.Parcels">
            <summary>Array of <see cref="T:OpenMetaverse.Messages.Linden.ParcelResourcesDetail" /> containing per percal resource usage</summary>
        </member>
        <member name="M:OpenMetaverse.Messages.Linden.LandResourcesInfo.Deserialize(OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Deserializes object from OSD
            </summary>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> containing the data</param>
        </member>
        <member name="M:OpenMetaverse.Messages.MessageUtils.DecodeEvent(System.String,OpenMetaverse.StructuredData.OSDMap)">
            <summary>
            Return a decoded capabilities message as a strongly typed object
            </summary>
            <param name="eventName">A string containing the name of the capabilities message key</param>
            <param name="map">An <see cref="T:OpenMetaverse.StructuredData.OSDMap" /> to decode</param>
            <returns>A strongly typed object containing the decoded information from the capabilities message, or null
            if no existing Message object exists for the specified event</returns>
        </member>
        <member name="T:OpenMetaverse.MediaPermission">
            <summary>
            Permissions for control of object media
            </summary>
        </member>
        <member name="T:OpenMetaverse.MediaControls">
            <summary>
            Style of cotrols that shold be displayed to the user
            </summary>
        </member>
        <member name="T:OpenMetaverse.MediaEntry">
            <summary>
            Class representing media data for a single face
            </summary>
        </member>
        <member name="F:OpenMetaverse.MediaEntry.EnableAlterntiveImage">
            <summary>Is display of the alternative image enabled</summary>
        </member>
        <member name="F:OpenMetaverse.MediaEntry.AutoLoop">
            <summary>Should media auto loop</summary>
        </member>
        <member name="F:OpenMetaverse.MediaEntry.AutoPlay">
            <summary>Shoule media be auto played</summary>
        </member>
        <member name="F:OpenMetaverse.MediaEntry.AutoScale">
            <summary>Auto scale media to prim face</summary>
        </member>
        <member name="F:OpenMetaverse.MediaEntry.AutoZoom">
            <summary>Should viewer automatically zoom in on the face when clicked</summary>
        </member>
        <member name="F:OpenMetaverse.MediaEntry.InteractOnFirstClick">
            <summary>Should viewer interpret first click as interaction with the media
            or when false should the first click be treated as zoom in commadn</summary>
        </member>
        <member name="F:OpenMetaverse.MediaEntry.Controls">
            <summary>Style of controls viewer should display when
            viewer media on this face</summary>
        </member>
        <member name="F:OpenMetaverse.MediaEntry.HomeURL">
            <summary>Starting URL for the media</summary>
        </member>
        <member name="F:OpenMetaverse.MediaEntry.CurrentURL">
            <summary>Currently navigated URL</summary>
        </member>
        <member name="F:OpenMetaverse.MediaEntry.Height">
            <summary>Media height in pixes</summary>
        </member>
        <member name="F:OpenMetaverse.MediaEntry.Width">
            <summary>Media width in pixels</summary>
        </member>
        <member name="F:OpenMetaverse.MediaEntry.ControlPermissions">
            <summary>Who can controls the media</summary>
        </member>
        <member name="F:OpenMetaverse.MediaEntry.InteractPermissions">
            <summary>Who can interact with the media</summary>
        </member>
        <member name="F:OpenMetaverse.MediaEntry.EnableWhiteList">
            <summary>Is URL whitelist enabled</summary>
        </member>
        <member name="F:OpenMetaverse.MediaEntry.WhiteList">
            <summary>Array of URLs that are whitelisted</summary>
        </member>
        <member name="M:OpenMetaverse.MediaEntry.GetOSD">
            <summary>
            Serialize to OSD
            </summary>
            <returns>OSDMap with the serialized data</returns>
        </member>
        <member name="M:OpenMetaverse.MediaEntry.FromOSD(OpenMetaverse.StructuredData.OSD)">
            <summary>
            Deserialize from OSD data
            </summary>
            <param name="osd">Serialized OSD data</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="T:OpenMetaverse.Primitive">
            <summary>
            Particle system specific enumerators, flags and methods.
            </summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:OpenMetaverse.Primitive.ParticleSystem">
            <summary>
            Complete structure for the particle system
            </summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.ParticleSystem.#ctor(System.Byte[],System.Int32)">
            <summary>
            Decodes a byte[] array into a ParticleSystem Object
            </summary>
            <param name="data">ParticleSystem object</param>
            <param name="pos">Start position for BitPacker</param>
        </member>
        <member name="T:OpenMetaverse.Primitive.ParticleSystem.SourcePattern">
            <summary>
            Particle source pattern
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.SourcePattern.None">
            <summary>None</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.SourcePattern.Drop">
            <summary>Drop particles from source position with no force</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.SourcePattern.Explode">
            <summary>"Explode" particles in all directions</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.SourcePattern.Angle">
            <summary>Particles shoot across a 2D area</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.SourcePattern.AngleCone">
            <summary>Particles shoot across a 3D Cone</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.SourcePattern.AngleConeEmpty">
            <summary>Inverse of AngleCone (shoot particles everywhere except the 3D cone defined</summary>
        </member>
        <member name="T:OpenMetaverse.Primitive.ParticleSystem.ParticleDataFlags">
            <summary>
            Particle Data Flags
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleDataFlags.None">
            <summary>None</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleDataFlags.InterpColor">
            <summary>Interpolate color and alpha from start to end</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleDataFlags.InterpScale">
            <summary>Interpolate scale from start to end</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleDataFlags.Bounce">
            <summary>Bounce particles off particle sources Z height</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleDataFlags.Wind">
            <summary>velocity of particles is dampened toward the simulators wind</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleDataFlags.FollowSrc">
            <summary>Particles follow the source</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleDataFlags.FollowVelocity">
            <summary>Particles point towards the direction of source's velocity</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleDataFlags.TargetPos">
            <summary>Target of the particles</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleDataFlags.TargetLinear">
            <summary>Particles are sent in a straight line</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleDataFlags.Emissive">
            <summary>Particles emit a glow</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleDataFlags.Beam">
            <summary>used for point/grab/touch</summary>
        </member>
        <member name="T:OpenMetaverse.Primitive.ParticleSystem.ParticleFlags">
            <summary>
            Particle Flags Enum
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleFlags.None">
            <summary>None</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleFlags.ObjectRelative">
            <summary>Acceleration and velocity for particles are
            relative to the object rotation</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.ParticleFlags.UseNewAngle">
            <summary>Particles use new 'correct' angle parameters</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.PartFlags">
            <summary>Particle Flags</summary>
            <remarks>There appears to be more data packed in to this area
            for many particle systems. It doesn't appear to be flag values
            and serialization breaks unless there is a flag for every
            possible bit so it is left as an unsigned integer</remarks>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.Pattern">
            <summary>
                <seealso cref="T:SourcePattern" /> pattern of particles</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.MaxAge">
            <summary>A <see langword="float" /> representing the maximimum age (in seconds) particle will be displayed</summary>
            <remarks>Maximum value is 30 seconds</remarks>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.StartAge">
            <summary>A <see langword="float" /> representing the number of seconds,
            from when the particle source comes into view,
            or the particle system's creation, that the object will emits particles;
            after this time period no more particles are emitted</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.InnerAngle">
            <summary>A <see langword="float" /> in radians that specifies where particles will not be created</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.OuterAngle">
            <summary>A <see langword="float" /> in radians that specifies where particles will be created</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.BurstRate">
            <summary>A <see langword="float" /> representing the number of seconds between burts.</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.BurstRadius">
            <summary>A <see langword="float" /> representing the number of meters
            around the center of the source where particles will be created.</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.BurstSpeedMin">
            <summary>A <see langword="float" /> representing in seconds, the minimum speed between bursts of new particles
            being emitted</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.BurstSpeedMax">
            <summary>A <see langword="float" /> representing in seconds the maximum speed of new particles being emitted.</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.BurstPartCount">
            <summary>A <see langword="byte" /> representing the maximum number of particles emitted per burst</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.AngularVelocity">
            <summary>A <see cref="T:Vector3" /> which represents the velocity (speed) from the source which particles are emitted</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.PartAcceleration">
            <summary>A <see cref="T:Vector3" /> which represents the Acceleration from the source which particles are emitted</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.Texture">
            <summary>The <see cref="T:UUID" /> Key of the texture displayed on the particle</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.Target">
            <summary>The <see cref="T:UUID" /> Key of the specified target object or avatar particles will follow</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.PartDataFlags">
            <summary>Flags of particle from <seealso cref="T:ParticleDataFlags" /></summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.PartMaxAge">
            <summary>Max Age particle system will emit particles for</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.PartStartColor">
            <summary>The <see cref="T:Color4" /> the particle has at the beginning of its lifecycle</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.PartEndColor">
            <summary>The <see cref="T:Color4" /> the particle has at the ending of its lifecycle</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.PartStartScaleX">
            <summary>A <see langword="float" /> that represents the starting X size of the particle</summary>
            <remarks>Minimum value is 0, maximum value is 4</remarks>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.PartStartScaleY">
            <summary>A <see langword="float" /> that represents the starting Y size of the particle</summary>
            <remarks>Minimum value is 0, maximum value is 4</remarks>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.PartEndScaleX">
            <summary>A <see langword="float" /> that represents the ending X size of the particle</summary>
            <remarks>Minimum value is 0, maximum value is 4</remarks>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSystem.PartEndScaleY">
            <summary>A <see langword="float" /> that represents the ending Y size of the particle</summary>
            <remarks>Minimum value is 0, maximum value is 4</remarks>
        </member>
        <member name="M:OpenMetaverse.Primitive.ParticleSystem.GetBytes">
            <summary>
            Generate byte[] array from particle data
            </summary>
            <returns>Byte array</returns>
        </member>
        <member name="T:OpenMetaverse.Primitive.ConstructionData">
            <summary>
            Parameters used to construct a visual representation of a primitive
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.profileCurve">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathCurve">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathEnd">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathRadiusOffset">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathSkew">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathScaleX">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathScaleY">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathShearX">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathShearY">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathTaperX">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathTaperY">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathBegin">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathTwist">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathTwistBegin">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PathRevolutions">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.ProfileBegin">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.ProfileEnd">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.ProfileHollow">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.Material">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.State">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ConstructionData.PCode">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.ConstructionData.AttachmentPoint">
            <summary>Attachment point to an avatar</summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.ConstructionData.ProfileCurve">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.ConstructionData.ProfileHole">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.ConstructionData.PathBeginScale">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.ConstructionData.PathEndScale">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.Primitive.FlexibleData">
            <summary>
            Information on the flexible properties of a primitive
            </summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.FlexibleData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.FlexibleData.#ctor(System.Byte[],System.Int32)">
            <summary>
            </summary>
            <param name="data">
            </param>
            <param name="pos">
            </param>
        </member>
        <member name="F:OpenMetaverse.Primitive.FlexibleData.Softness">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.FlexibleData.Gravity">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.FlexibleData.Drag">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.FlexibleData.Wind">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.FlexibleData.Tension">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.FlexibleData.Force">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.FlexibleData.GetBytes">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Primitive.FlexibleData.GetOSD">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:OpenMetaverse.Primitive.LightData">
            <summary>
            Information on the light properties of a primitive
            </summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.LightData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.LightData.#ctor(System.Byte[],System.Int32)">
            <summary>
            </summary>
            <param name="data">
            </param>
            <param name="pos">
            </param>
        </member>
        <member name="F:OpenMetaverse.Primitive.LightData.Color">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.LightData.Intensity">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.LightData.Radius">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.LightData.Cutoff">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.LightData.Falloff">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.LightData.GetBytes">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Primitive.LightData.ToString">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:OpenMetaverse.Primitive.SculptData">
            <summary>
            Information on the sculpt properties of a sculpted primitive
            </summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.SculptData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.SculptData.#ctor(System.Byte[],System.Int32)">
            <summary>
            </summary>
            <param name="data">
            </param>
            <param name="pos">
            </param>
        </member>
        <member name="P:OpenMetaverse.Primitive.SculptData.Invert">
            <summary>
            Render inside out (inverts the normals).
            </summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.SculptData.Mirror">
            <summary>
            Render an X axis mirror of the sculpty.
            </summary>
        </member>
        <member name="T:OpenMetaverse.Primitive.ObjectProperties">
            <summary>
            Extended properties to describe an object
            </summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.ObjectProperties.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.ObjectID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.CreatorID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.OwnerID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.GroupID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.CreationDate">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.Permissions">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.OwnershipCost">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.SaleType">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.SalePrice">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.AggregatePerms">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.AggregatePermTextures">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.AggregatePermTexturesOwner">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.Category">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.InventorySerial">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.ItemID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.FolderID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.FromTaskID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.LastOwnerID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.Name">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.Description">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.TouchName">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.SitName">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ObjectProperties.TextureIDs">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.ObjectProperties.SetFamilyProperties(OpenMetaverse.Primitive.ObjectProperties)">
            <summary>
            Set the properties that are set in an ObjectPropertiesFamily packet
            </summary>
            <param name="props">
                <seealso cref="T:OpenMetaverse.Primitive.ObjectProperties" /> that has
            been partially filled by an ObjectPropertiesFamily packet</param>
        </member>
        <member name="T:OpenMetaverse.Primitive.TextureAnimMode">
            <summary>
            Texture animation mode
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimMode.ANIM_OFF">
            <summary>Disable texture animation</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimMode.ANIM_ON">
            <summary>Enable texture animation</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimMode.LOOP">
            <summary>Loop when animating textures</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimMode.REVERSE">
            <summary>Animate in reverse direction</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimMode.PING_PONG">
            <summary>Animate forward then reverse</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimMode.SMOOTH">
            <summary>Slide texture smoothly instead of frame-stepping</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimMode.ROTATE">
            <summary>Rotate texture instead of using frames</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimMode.SCALE">
            <summary>Scale texture instead of using frames</summary>
        </member>
        <member name="T:OpenMetaverse.Primitive.TextureEntryFace">
            <summary>
            A single textured face. Don't instantiate this class yourself, use the
            methods in TextureEntry
            </summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.TextureEntryFace.#ctor(OpenMetaverse.Primitive.TextureEntryFace)">
            <summary>
            Contains the definition for individual faces
            </summary>
            <param name="defaultTexture">
            </param>
        </member>
        <member name="P:OpenMetaverse.Primitive.TextureEntryFace.material">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.TextureEntryFace.media">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.TextureEntryFace.RGBA">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.TextureEntryFace.RepeatU">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.TextureEntryFace.RepeatV">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.TextureEntryFace.OffsetU">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.TextureEntryFace.OffsetV">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.TextureEntryFace.Rotation">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.TextureEntryFace.Glow">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.TextureEntryFace.Bump">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.TextureEntryFace.MediaFlags">
            <summary>In the future this will specify whether a webpage is
            attached to this face</summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.TextureEntryFace.TextureID">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.TextureEntryFace.ToString">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:OpenMetaverse.Primitive.TextureEntry">
            <summary>
            Represents all of the texturable faces for an object
            </summary>
            <remarks>Grid objects have infinite faces, with each face
            using the properties of the default face unless set otherwise. So if
            you have a TextureEntry with a default texture uuid of X, and face 18
            has a texture UUID of Y, every face would be textured with X except for
            face 18 that uses Y. In practice however, primitives utilize a maximum
            of nine faces</remarks>
        </member>
        <member name="M:OpenMetaverse.Primitive.TextureEntry.#ctor(OpenMetaverse.UUID)">
            <summary>
            Constructor that takes a default texture UUID
            </summary>
            <param name="defaultTextureID">Texture UUID to use as the default texture</param>
        </member>
        <member name="M:OpenMetaverse.Primitive.TextureEntry.#ctor(OpenMetaverse.Primitive.TextureEntryFace)">
            <summary>
            Constructor that takes a <code>TextureEntryFace</code> for the
            default face
            </summary>
            <param name="defaultFace">Face to use as the default face</param>
        </member>
        <member name="M:OpenMetaverse.Primitive.TextureEntry.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Constructor that creates the TextureEntry class from a byte array
            </summary>
            <param name="data">Byte array containing the TextureEntry field</param>
            <param name="pos">Starting position of the TextureEntry field in
            the byte array</param>
            <param name="length">Length of the TextureEntry field, in bytes</param>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureEntry.DefaultTexture">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureEntry.FaceTextures">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.TextureEntry.CreateFace(System.UInt32)">
            <summary>
            This will either create a new face if a custom face for the given
            index is not defined, or return the custom face for that index if
            it already exists
            </summary>
            <param name="index">The index number of the face to create or
            retrieve</param>
            <returns>A TextureEntryFace containing all the properties for that
            face</returns>
        </member>
        <member name="M:OpenMetaverse.Primitive.TextureEntry.GetFace(System.UInt32)">
            <summary>
            </summary>
            <param name="index">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Primitive.TextureEntry.GetOSD">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Primitive.TextureEntry.GetBytes">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Primitive.TextureEntry.ToString">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:OpenMetaverse.Primitive.TextureAnimation">
            <summary>
            Controls the texture animation of a particular prim
            </summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.TextureAnimation.#ctor(System.Byte[],System.Int32)">
            <summary>
            </summary>
            <param name="data">
            </param>
            <param name="pos">
            </param>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimation.Flags">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimation.Face">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimation.SizeX">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimation.SizeY">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimation.Start">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimation.Length">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnimation.Rate">
            <summary>
            </summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.TextureAnimation.GetBytes">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="F:OpenMetaverse.Primitive.MediaVersion">
            <summary>
            Current version of the media data for the prim
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.FaceMedia">
            <summary>
            Array of media entries indexed by face number
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParticleSys">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.GroupID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.LocalID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ParentID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.RegionHandle">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Flags">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TreeSpecies">
            <summary>Foliage type for this primitive. Only applicable if this
            primitive is foliage</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ScratchPad">
            <summary>Unknown</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Position">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Scale">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Rotation">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Velocity">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.AngularVelocity">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Acceleration">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.CollisionPlane">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Flexible">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Light">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Sculpt">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.ClickAction">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Sound">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.OwnerID">
            <summary>Identifies the owner if audio or a particle system is
            active</summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.SoundFlags">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.SoundGain">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.SoundRadius">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Text">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextColor">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.MediaURL">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Joint">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.JointPivot">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.JointAxisOrAnchor">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.NameValues">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.PrimData">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Properties">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.Textures">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Primitive.TextureAnim">
            <summary>
            </summary>
        </member>
        <member name="P:OpenMetaverse.Primitive.Type">
            <summary>Uses basic heuristics to estimate the primitive shape</summary>
        </member>
        <member name="M:OpenMetaverse.Primitive.PackPathTwist(System.Single)">
            <summary>
            Packs PathTwist, PathTwistBegin, PathRadiusOffset, and PathSkew
            parameters in to signed eight bit values
            </summary>
            <param name="pathTwist">Floating point parameter to pack</param>
            <returns>Signed eight bit value containing the packed parameter</returns>
        </member>
        <member name="M:OpenMetaverse.Primitive.UnpackPathTwist(System.SByte)">
            <summary>
            Unpacks PathTwist, PathTwistBegin, PathRadiusOffset, and PathSkew
            parameters from signed eight bit integers to floating point values
            </summary>
            <param name="pathTwist">Signed eight bit value to unpack</param>
            <returns>Unpacked floating point value</returns>
        </member>
        <member name="T:OpenMetaverse.Bumpiness">
            <summary>
            The type of bump-mapping applied to a face
            </summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.None">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Brightness">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Darkness">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Woodgrain">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Bark">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Bricks">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Checker">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Concrete">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Crustytile">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Cutstone">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Discs">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Gravel">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Petridish">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Siding">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Stonetile">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Stucco">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Suction">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Bumpiness.Weave">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.Shininess">
            <summary>
            The level of shininess applied to a face
            </summary>
        </member>
        <member name="F:OpenMetaverse.Shininess.None">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Shininess.Low">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Shininess.Medium">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.Shininess.High">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.MappingType">
            <summary>
            The texture mapping style used for a face
            </summary>
        </member>
        <member name="F:OpenMetaverse.MappingType.Default">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.MappingType.Planar">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.TextureAttributes">
            <summary>
            Flags in the TextureEntry block that describe which properties are
            set
            </summary>
        </member>
        <member name="F:OpenMetaverse.TextureAttributes.None">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TextureAttributes.TextureID">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TextureAttributes.RGBA">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TextureAttributes.RepeatU">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TextureAttributes.RepeatV">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TextureAttributes.OffsetU">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TextureAttributes.OffsetV">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TextureAttributes.Rotation">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TextureAttributes.Material">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TextureAttributes.Media">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TextureAttributes.Glow">
            <summary>
            </summary>
        </member>
        <member name="F:OpenMetaverse.TextureAttributes.All">
            <summary>
            </summary>
        </member>
        <member name="T:OpenMetaverse.Rendering.LindenMesh.LODMesh">
            <summary>
            Level of Detail mesh
            </summary>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.VoiceLoggingSettings.#ctor">
            <summary>
            Constructor for default logging settings
            </summary>
        </member>
        <member name="F:OpenMetaverse.Voice.VoiceGateway.VoiceLoggingSettings.Enabled">
            <summary>Enable logging</summary>
        </member>
        <member name="F:OpenMetaverse.Voice.VoiceGateway.VoiceLoggingSettings.Folder">
            <summary>The folder where any logs will be created</summary>
        </member>
        <member name="F:OpenMetaverse.Voice.VoiceGateway.VoiceLoggingSettings.FileNamePrefix">
            <summary>This will be prepended to beginning of each log file</summary>
        </member>
        <member name="F:OpenMetaverse.Voice.VoiceGateway.VoiceLoggingSettings.FileNameSuffix">
            <summary>The suffix or extension to be appended to each log file</summary>
        </member>
        <member name="F:OpenMetaverse.Voice.VoiceGateway.VoiceLoggingSettings.LogLevel">
            <summary>
            0: NONE - No logging
            1: ERROR - Log errors only
            2: WARNING - Log errors and warnings
            3: INFO - Log errors, warnings and info
            4: DEBUG - Log errors, warnings, info and debug
            </summary>
        </member>
        <member name="T:OpenMetaverse.Voice.VoiceGateway.AudioPropertiesEventArgs">
            Audio Properties Events are sent after audio capture is started. These events are used to display a microphone VU meter</member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnVoiceResponse">
            <summary>
            Event for most mundane request reposnses.
            </summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnConnectorCreateResponse">
            <summary>Response to Connector.Create request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnAuxGetCaptureDevicesResponse">
            <summary>Response to Aux.GetCaptureDevices request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnAuxGetRenderDevicesResponse">
            <summary>Response to Aux.GetRenderDevices request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnAuxAudioPropertiesEvent">
            <summary>Audio Properties Events are sent after audio capture is started.
            These events are used to display a microphone VU meter</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnAccountLoginResponse">
            <summary>Response to Account.Login request</summary>
        </member>
        <member name="E:OpenMetaverse.Voice.VoiceGateway.OnAccountLoginStateChangeEvent">
            <summary>This event message is sent whenever the login state of the
            particular Account has transitioned from one value to another</summary>
        </member>
        <member name="P:OpenMetaverse.Voice.VoiceGateway.CaptureDevices">
            <summary>
            List of audio input devices
            </summary>
        </member>
        <member name="P:OpenMetaverse.Voice.VoiceGateway.PlaybackDevices">
            <summary>
            List of audio output devices
            </summary>
        </member>
        <member name="P:OpenMetaverse.Voice.VoiceGateway.TestMode">
            <summary>
            Set audio test mode
            </summary>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.AccountLogin(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            This is used to login a specific user account(s). It may only be called after
            Connector initialization has completed successfully
            </summary>
            <param name="ConnectorHandle">Handle returned from successful Connector ?create? request</param>
            <param name="AccountName">User's account name</param>
            <param name="AccountPassword">User's account password</param>
            <param name="AudioSessionAnswerMode">Values may be ?AutoAnswer? or ?VerifyAnswer?</param>
            <param name="AccountURI">""</param>
            <param name="ParticipantPropertyFrequency">This is an integer that specifies how often
            the daemon will send participant property events while in a channel. If this is not set
            the default will be ?on state change?, which means that the events will be sent when
            the participant starts talking, stops talking, is muted, is unmuted.
            The valid values are:
            0 ? Never
            5 ? 10 times per second
            10 ? 5 times per second
            50 ? 1 time per second
            100 ? on participant state change (this is the default)</param>
            <param name="EnableBuddiesAndPresence">false</param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.AccountLogout(System.String)">
            <summary>
            This is used to logout a user session. It should only be called with a valid AccountHandle.
            </summary>
            <param name="AccountHandle">Handle returned from successful Connector ?login? request</param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.AuxGetCaptureDevices">
            <summary>
            This is used to get a list of audio devices that can be used for capture (input) of voice.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.AuxGetRenderDevices">
            <summary>
            This is used to get a list of audio devices that can be used for render (playback) of voice.
            </summary>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.AuxSetRenderDevice(System.String)">
            <summary>
            This command is used to select the render device.
            </summary>
            <param name="RenderDeviceSpecifier">The name of the device as returned by the Aux.GetRenderDevices command.</param>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.AuxSetCaptureDevice(System.String)">
            <summary>
            This command is used to select the capture device.
            </summary>
            <param name="CaptureDeviceSpecifier">The name of the device as returned by the Aux.GetCaptureDevices command.</param>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.AuxCaptureAudioStart(System.Int32)">
            <summary>
            This command is used to start the audio capture process which will cause
            AuxAudioProperty Events to be raised. These events can be used to display a
            microphone VU meter for the currently selected capture device. This command
            should not be issued if the user is on a call.
            </summary>
            <param name="Duration">(unused but required)</param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.AuxCaptureAudioStop">
            <summary>
            This command is used to stop the audio capture process.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.AuxSetMicLevel(System.Int32)">
            <summary>
            This command is used to set the mic volume while in the audio tuning process.
            Once an acceptable mic level is attained, the application must issue a
            connector set mic volume command to have that level be used while on voice
            calls.
            </summary>
            <param name="Level">the microphone volume (-100 to 100 inclusive)</param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.AuxSetSpeakerLevel(System.Int32)">
            <summary>
            This command is used to set the speaker volume while in the audio tuning
            process. Once an acceptable speaker level is attained, the application must
            issue a connector set speaker volume command to have that level be used while
            on voice calls.
            </summary>
            <param name="Level">the speaker volume (-100 to 100 inclusive)</param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.ConnectorCreate(System.String,System.String,System.UInt16,System.UInt16,OpenMetaverse.Voice.VoiceGateway.VoiceLoggingSettings)">
            <summary>
            This is used to initialize and stop the Connector as a whole. The Connector
            Create call must be completed successfully before any other requests are made
            (typically during application initialization). The shutdown should be called
            when the application is shutting down to gracefully release resources
            </summary>
            <param name="ClientName">A string value indicting the Application name</param>
            <param name="AccountManagementServer">URL for the management server</param>
            <param name="Logging">LoggingSettings</param>
            <param name="MaximumPort">
            </param>
            <param name="MinimumPort">
            </param>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.ConnectorInitiateShutdown(System.String)">
            <summary>
            Shutdown Connector -- Should be called when the application is shutting down
            to gracefully release resources
            </summary>
            <param name="ConnectorHandle">Handle returned from successful Connector ?create? request</param>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.ConnectorMuteLocalMic(System.String,System.Boolean)">
            <summary>
            Mute or unmute the microphone
            </summary>
            <param name="ConnectorHandle">Handle returned from successful Connector ?create? request</param>
            <param name="Mute">true (mute) or false (unmute)</param>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.ConnectorMuteLocalSpeaker(System.String,System.Boolean)">
            <summary>
            Mute or unmute the speaker
            </summary>
            <param name="ConnectorHandle">Handle returned from successful Connector ?create? request</param>
            <param name="Mute">true (mute) or false (unmute)</param>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.ConnectorSetLocalMicVolume(System.String,System.Int32)">
            <summary>
            Set microphone volume
            </summary>
            <param name="ConnectorHandle">Handle returned from successful Connector ?create? request</param>
            <param name="Value">The level of the audio, a number between -100 and 100 where
            0 represents ?normal? speaking volume</param>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.ConnectorSetLocalSpeakerVolume(System.String,System.Int32)">
            <summary>
            Set local speaker volume
            </summary>
            <param name="ConnectorHandle">Handle returned from successful Connector ?create? request</param>
            <param name="Value">The level of the audio, a number between -100 and 100 where
            0 represents ?normal? speaking volume</param>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.Start">
            <summary>
            Start up the Voice service.
            </summary>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.connector_OnVoiceResponse(System.Object,OpenMetaverse.Voice.VoiceGateway.VoiceResponseEventArgs)">
            <summary>
            Handle miscellaneous request status
            </summary>
            <param name="sender">
            </param>
            <param name="e">
            </param>
            ///<remarks>If something goes wrong, we log it.</remarks></member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.Dispose">
            <summary>
            Cleanup oject resources
            </summary>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.Network_EventQueueRunning(System.Object,OpenMetaverse.EventQueueRunningEventArgs)">
            <summary>
            Request voice cap when changing regions
            </summary>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.connector_OnSessionStateChangeEvent(System.Object,OpenMetaverse.Voice.VoiceGateway.SessionStateChangeEventArgs)">
            <summary>
            Handle a change in session state
            </summary>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.CloseSession(System.String)">
            <summary>
            Close a voice session
            </summary>
            <param name="sessionHandle">
            </param>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.FindSession(System.String,System.Boolean)">
            <summary>
            Locate a Session context from its handle
            </summary>
            <remarks>Creates the session context if it does not exist.</remarks>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.cClient_OnComplete(OpenMetaverse.Http.CapsClient,OpenMetaverse.StructuredData.OSD,System.Exception)">
            <summary>
            Handle completion of main voice cap request.
            </summary>
            <param name="client">
            </param>
            <param name="result">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.connector_OnDaemonRunning">
            <summary>
            Daemon has started so connect to it.
            </summary>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.connector_OnDaemonConnected">
            <summary>
            The daemon TCP connection is open.
            </summary>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.connector_OnConnectorCreateResponse(System.Object,OpenMetaverse.Voice.VoiceGateway.VoiceConnectorEventArgs)">
            <summary>
            Handle creation of the Connector.
            </summary>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.connector_OnAuxGetRenderDevicesResponse(System.Object,OpenMetaverse.Voice.VoiceGateway.VoiceDevicesEventArgs)">
            <summary>
            Handle response to audio output device query
            </summary>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.connector_OnAuxGetCaptureDevicesResponse(System.Object,OpenMetaverse.Voice.VoiceGateway.VoiceDevicesEventArgs)">
            <summary>
            Handle response to audio input device query
            </summary>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.ParcelChanged">
            <summary>
            Set voice channel for new parcel
            </summary>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.RequestParcelInfo(System.Uri)">
            <summary>
            Request info from a parcel capability Uri.
            </summary>
            <param name="cap">
            </param>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.pCap_OnComplete(OpenMetaverse.Http.CapsClient,OpenMetaverse.StructuredData.OSD,System.Exception)">
            <summary>
            Receive parcel voice cap
            </summary>
            <param name="client">
            </param>
            <param name="result">
            </param>
            <param name="error">
            </param>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.UpdatePosition(OpenMetaverse.AgentManager)">
            <summary>
            Tell Vivox where we are standing
            </summary>
            <remarks>This has to be called when we move or turn.</remarks>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.PosUpdating(System.Boolean)">
            <summary>
            Start and stop updating out position.
            </summary>
            <param name="go">
            </param>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.StartDaemon(System.String,System.String)">
            <summary>
            Starts a thread that keeps the daemon running
            </summary>
            <param name="path">
            </param>
            <param name="args">
            </param>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.StopDaemon">
            <summary>
            Stops the daemon and the thread keeping it running
            </summary>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.ConnectToDaemon(System.String,System.Int32)">
            <summary>
            </summary>
            <param name="address">
            </param>
            <param name="port">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.SessionCreate(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Create a Session
            Sessions typically represent a connection to a media session with one or more
            participants. This is used to generate an ?outbound? call to another user or
            channel. The specifics depend on the media types involved. A session handle is
            required to control the local user functions within the session (or remote
            users if the current account has rights to do so). Currently creating a
            session automatically connects to the audio media, there is no need to call
            Session.Connect at this time, this is reserved for future use.
            </summary>
            <param name="AccountHandle">Handle returned from successful Connector ?create? request</param>
            <param name="URI">This is the URI of the terminating point of the session (ie who/what is being called)</param>
            <param name="Name">This is the display name of the entity being called (user or channel)</param>
            <param name="Password">Only needs to be supplied when the target URI is password protected</param>
            <param name="PasswordHashAlgorithm">This indicates the format of the password as passed in. This can either be
            ?ClearText? or ?SHA1UserName?. If this element does not exist, it is assumed to be ?ClearText?. If it is
            ?SHA1UserName?, the password as passed in is the SHA1 hash of the password and username concatenated together,
            then base64 encoded, with the final ?=? character stripped off.</param>
            <param name="JoinAudio">
            </param>
            <param name="JoinText">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.SessionConnect(System.String,System.String)">
            <summary>
            Used to accept a call
            </summary>
            <param name="SessionHandle">SessionHandle such as received from SessionNewEvent</param>
            <param name="AudioMedia">"default"</param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.SessionRenderAudioStart(System.String,System.Boolean)">
            <summary>
            This command is used to start the audio render process, which will then play
            the passed in file through the selected audio render device. This command
            should not be issued if the user is on a call.
            </summary>
            <param name="SoundFilePath">The fully qualified path to the sound file.</param>
            <param name="Loop">True if the file is to be played continuously and false if it is should be played once.</param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.SessionRenderAudioStop(System.String)">
            <summary>
            This command is used to stop the audio render process.
            </summary>
            <param name="SoundFilePath">The fully qualified path to the sound file issued in the start render command.</param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.SessionTerminate(System.String)">
            <summary>
            This is used to ?end? an established session (i.e. hang-up or disconnect).
            </summary>
            <param name="SessionHandle">Handle returned from successful Session ?create? request or a SessionNewEvent</param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.SessionSet3DPosition(System.String,OpenMetaverse.Voice.VoicePosition,OpenMetaverse.Voice.VoicePosition)">
            <summary>
            Set the combined speaking and listening position in 3D space.
            </summary>
            <param name="SessionHandle">Handle returned from successful Session ?create? request or a SessionNewEvent</param>
            <param name="SpeakerPosition">Speaking position</param>
            <param name="ListenerPosition">Listening position</param>
            <returns>
            </returns>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceGateway.SessionSetParticipantVolumeForMe(System.String,System.String,System.Int32)">
            <summary>
            Set User Volume for a particular user. Does not affect how other users hear that user.
            </summary>
            <param name="SessionHandle">Handle returned from successful Session ?create? request or a SessionNewEvent</param>
            <param name="ParticipantURI">
            </param>
            <param name="Volume">The level of the audio, a number between -100 and 100 where 0 represents ?normal? speaking volume</param>
            <returns>
            </returns>
        </member>
        <member name="F:OpenMetaverse.Voice.VoicePosition.Position">
            <summary>Positional vector of the users position</summary>
        </member>
        <member name="F:OpenMetaverse.Voice.VoicePosition.Velocity">
            <summary>Velocity vector of the position</summary>
        </member>
        <member name="F:OpenMetaverse.Voice.VoicePosition.AtOrientation">
            <summary>At Orientation (X axis) of the position</summary>
        </member>
        <member name="F:OpenMetaverse.Voice.VoicePosition.UpOrientation">
            <summary>Up Orientation (Y axis) of the position</summary>
        </member>
        <member name="F:OpenMetaverse.Voice.VoicePosition.LeftOrientation">
            <summary>Left Orientation (Z axis) of the position</summary>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceParticipant.IDFromName(System.String)">
            <summary>
            Extract the avatar UUID encoded in a SIP URI
            </summary>
            <param name="inName">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:OpenMetaverse.Voice.VoiceSession">
            <summary>
            Represents a single Voice Session to the Vivox service.
            </summary>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceSession.Close">
            <summary>
            Close this session.
            </summary>
        </member>
        <member name="M:OpenMetaverse.Voice.VoiceSession.FindParticipant(System.String)">
            <summary>
            Look up an existing Participants in this session
            </summary>
            <param name="puri">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:OpenMetaverse.DictionaryChangeCallback">
            <summary>
            </summary>
            <param name="action">
            </param>
            <param name="entry">
            </param>
        </member>
        <member name="T:OpenMetaverse.TextureDownloadCallback">
            <summary>
            A callback fired to indicate the status or final state of the requested texture. For progressive
            downloads this will fire each time new asset data is returned from the simulator.
            </summary>
            <param name="state">The <see cref="T:OpenMetaverse.TextureRequestState" /> indicating either Progress for textures not fully downloaded,
            or the final result of the request after it has been processed through the TexturePipeline</param>
            <param name="assetTexture">The <see cref="T:OpenMetaverse.Assets.AssetTexture" /> object containing the Assets ID, raw data
            and other information. For progressive rendering the <see cref="F:OpenMetaverse.Assets.Asset.AssetData" /> will contain
            the data from the beginning of the file. For failed, aborted and timed out requests it will contain
            an empty byte array.</param>
        </member>
    </members>
</doc>
